
RAFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c294  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800c560  0800c560  0000d560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c5a0  0800c5a0  0000d5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c5a8  0800c5a8  0000d5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c5ac  0800c5ac  0000d5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  0800c5b0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00007e50  24000014  0800c5c4  0000e014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24007e64  0800c5c4  0000ee64  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002050d  00000000  00000000  0000e042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003618  00000000  00000000  0002e54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a18  00000000  00000000  00031b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000378bf  00000000  00000000  00033580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00023415  00000000  00000000  0006ae3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0016e3db  00000000  00000000  0008e254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001fc62f  2**0
                  CONTENTS, READONLY
 17 .debug_rnglists 0000146a  00000000  00000000  001fc672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000071a8  00000000  00000000  001fdadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00000076  00000000  00000000  00204c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000055  00000000  00000000  00204cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000014 	.word	0x24000014
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800c548 	.word	0x0800c548

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000018 	.word	0x24000018
 8000308:	0800c548 	.word	0x0800c548

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f001 fb67 	bl	8001cd4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f86b 	bl	80006e0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800060a:	f000 f8d9 	bl	80007c0 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */

GPIO_INIT();
 800060e:	f000 fd33 	bl	8001078 <GPIO_INIT>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000612:	f000 fca9 	bl	8000f68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000616:	f000 fc6f 	bl	8000ef8 <MX_DMA_Init>
  MX_ADC1_Init();
 800061a:	f000 f901 	bl	8000820 <MX_ADC1_Init>
  MX_HASH_Init();
 800061e:	f000 fa87 	bl	8000b30 <MX_HASH_Init>
  MX_TIM2_Init();
 8000622:	f000 fae7 	bl	8000bf4 <MX_TIM2_Init>
  MX_UART7_Init();
 8000626:	f000 fbcf 	bl	8000dc8 <MX_UART7_Init>
  MX_ADC3_Init();
 800062a:	f000 f9db 	bl	80009e4 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 800062e:	f000 fc17 	bl	8000e60 <MX_USART3_UART_Init>
  MX_DAC1_Init();
 8000632:	f000 fa4b 	bl	8000acc <MX_DAC1_Init>
  MX_TIM3_Init();
 8000636:	f000 fb2b 	bl	8000c90 <MX_TIM3_Init>
  MX_SPI4_Init();
 800063a:	f000 fa8b 	bl	8000b54 <MX_SPI4_Init>
  MX_ADC2_Init();
 800063e:	f000 f96f 	bl	8000920 <MX_ADC2_Init>
  MX_TIM4_Init();
 8000642:	f000 fb73 	bl	8000d2c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3,GPIO_PIN_SET);
 8000646:	2201      	movs	r2, #1
 8000648:	2108      	movs	r1, #8
 800064a:	481e      	ldr	r0, [pc, #120]	@ (80006c4 <main+0xc8>)
 800064c:	f006 f9da 	bl	8006a04 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOK, GPIO_PIN_4,GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2110      	movs	r1, #16
 8000654:	481b      	ldr	r0, [pc, #108]	@ (80006c4 <main+0xc8>)
 8000656:	f006 f9d5 	bl	8006a04 <HAL_GPIO_WritePin>

// set the SPI Test fixed frame

uint16_t DAC_set_value =0;
 800065a:	2300      	movs	r3, #0
 800065c:	80fb      	strh	r3, [r7, #6]

fixed_frame[0]= 0xAA;
 800065e:	4b1a      	ldr	r3, [pc, #104]	@ (80006c8 <main+0xcc>)
 8000660:	22aa      	movs	r2, #170	@ 0xaa
 8000662:	701a      	strb	r2, [r3, #0]
fixed_frame[FIXED_FRAME_SZIE-1]=0xCC;
 8000664:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <main+0xcc>)
 8000666:	22cc      	movs	r2, #204	@ 0xcc
 8000668:	f883 2fff 	strb.w	r2, [r3, #4095]	@ 0xfff

uart_frame[0] = 0xAA;
 800066c:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <main+0xd0>)
 800066e:	22aa      	movs	r2, #170	@ 0xaa
 8000670:	701a      	strb	r2, [r3, #0]
uart_frame[1] = 0xAA;
 8000672:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <main+0xd0>)
 8000674:	22aa      	movs	r2, #170	@ 0xaa
 8000676:	705a      	strb	r2, [r3, #1]
uart_frame[ADC_TRANSFER_SIZE+2] = 0xCC;
 8000678:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <main+0xd0>)
 800067a:	22cc      	movs	r2, #204	@ 0xcc
 800067c:	f883 23ea 	strb.w	r2, [r3, #1002]	@ 0x3ea
uart_frame[ADC_TRANSFER_SIZE+3] = 0xCC;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <main+0xd0>)
 8000682:	22cc      	movs	r2, #204	@ 0xcc
 8000684:	f883 23eb 	strb.w	r2, [r3, #1003]	@ 0x3eb
//HAL_SPI_RegisterCallback(&hspi5,   HAL_SPI_ERROR_CB_ID  , HAL_SPI_ErrorCallback);




if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK) {
 8000688:	4811      	ldr	r0, [pc, #68]	@ (80006d0 <main+0xd4>)
 800068a:	f00a f80b 	bl	800a6a4 <HAL_TIM_Base_Start_IT>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <main+0x9c>
    Error_Handler();
 8000694:	f000 fe56 	bl	8001344 <Error_Handler>
}
start_ADCS();
 8000698:	f000 fe02 	bl	80012a0 <start_ADCS>
#ifdef RAW_DATA




	 		buffer_copy(uart_frame+2 ,(uint8_t*)ADC_buffer_entropy,ADC_TRANSFER_SIZE);
 800069c:	4b0d      	ldr	r3, [pc, #52]	@ (80006d4 <main+0xd8>)
 800069e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006a2:	490d      	ldr	r1, [pc, #52]	@ (80006d8 <main+0xdc>)
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 facb 	bl	8001c40 <buffer_copy>
	 		HAL_UART_Transmit (&huart7,uart_frame ,UART_FRAME_SIZE,100);
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 80006b0:	4906      	ldr	r1, [pc, #24]	@ (80006cc <main+0xd0>)
 80006b2:	480a      	ldr	r0, [pc, #40]	@ (80006dc <main+0xe0>)
 80006b4:	f00a fcfe 	bl	800b0b4 <HAL_UART_Transmit>
//	 		HAL_UART_Transmit (&huart3,uart_frame ,UART_FRAME_SIZE,100);
	 		HAL_Delay(10);
 80006b8:	200a      	movs	r0, #10
 80006ba:	f001 fb9d 	bl	8001df8 <HAL_Delay>
  {
 80006be:	bf00      	nop
 80006c0:	e7ec      	b.n	800069c <main+0xa0>
 80006c2:	bf00      	nop
 80006c4:	58022800 	.word	0x58022800
 80006c8:	24006e58 	.word	0x24006e58
 80006cc:	2400644c 	.word	0x2400644c
 80006d0:	24006c94 	.word	0x24006c94
 80006d4:	2400644e 	.word	0x2400644e
 80006d8:	24000030 	.word	0x24000030
 80006dc:	24006d2c 	.word	0x24006d2c

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b09c      	sub	sp, #112	@ 0x70
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ea:	224c      	movs	r2, #76	@ 0x4c
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f00b fefe 	bl	800c4f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2220      	movs	r2, #32
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f00b fef8 	bl	800c4f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000700:	2004      	movs	r0, #4
 8000702:	f006 f9ed 	bl	8006ae0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	4b2c      	ldr	r3, [pc, #176]	@ (80007bc <SystemClock_Config+0xdc>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	4a2b      	ldr	r2, [pc, #172]	@ (80007bc <SystemClock_Config+0xdc>)
 8000710:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000714:	6193      	str	r3, [r2, #24]
 8000716:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <SystemClock_Config+0xdc>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000722:	bf00      	nop
 8000724:	4b25      	ldr	r3, [pc, #148]	@ (80007bc <SystemClock_Config+0xdc>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800072c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000730:	d1f8      	bne.n	8000724 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000732:	2302      	movs	r3, #2
 8000734:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000736:	2301      	movs	r3, #1
 8000738:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800073a:	2340      	movs	r3, #64	@ 0x40
 800073c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000742:	2300      	movs	r3, #0
 8000744:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000746:	2304      	movs	r3, #4
 8000748:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 800074a:	2322      	movs	r3, #34	@ 0x22
 800074c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800074e:	2301      	movs	r3, #1
 8000750:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800075a:	230c      	movs	r3, #12
 800075c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075e:	2300      	movs	r3, #0
 8000760:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000762:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000766:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076c:	4618      	mov	r0, r3
 800076e:	f006 fa11 	bl	8006b94 <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000778:	f000 fde4 	bl	8001344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077c:	233f      	movs	r3, #63	@ 0x3f
 800077e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000780:	2303      	movs	r3, #3
 8000782:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000788:	2308      	movs	r3, #8
 800078a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800078c:	2340      	movs	r3, #64	@ 0x40
 800078e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000790:	2340      	movs	r3, #64	@ 0x40
 8000792:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000794:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000798:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800079a:	2340      	movs	r3, #64	@ 0x40
 800079c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2103      	movs	r1, #3
 80007a2:	4618      	mov	r0, r3
 80007a4:	f006 fdd0 	bl	8007348 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007ae:	f000 fdc9 	bl	8001344 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3770      	adds	r7, #112	@ 0x70
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	58024800 	.word	0x58024800

080007c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b0ae      	sub	sp, #184	@ 0xb8
 80007c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007c6:	463b      	mov	r3, r7
 80007c8:	22b8      	movs	r2, #184	@ 0xb8
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f00b fe8f 	bl	800c4f0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007d6:	f04f 0300 	mov.w	r3, #0
 80007da:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80007de:	2304      	movs	r3, #4
 80007e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80007e2:	230c      	movs	r3, #12
 80007e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007f2:	23c0      	movs	r3, #192	@ 0xc0
 80007f4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007fe:	2300      	movs	r3, #0
 8000800:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	4618      	mov	r0, r3
 8000808:	f007 f92a 	bl	8007a60 <HAL_RCCEx_PeriphCLKConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000812:	f000 fd97 	bl	8001344 <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	37b8      	adds	r7, #184	@ 0xb8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	@ 0x30
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000832:	463b      	mov	r3, r7
 8000834:	2224      	movs	r2, #36	@ 0x24
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f00b fe59 	bl	800c4f0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800083e:	4b36      	ldr	r3, [pc, #216]	@ (8000918 <MX_ADC1_Init+0xf8>)
 8000840:	4a36      	ldr	r2, [pc, #216]	@ (800091c <MX_ADC1_Init+0xfc>)
 8000842:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000844:	4b34      	ldr	r3, [pc, #208]	@ (8000918 <MX_ADC1_Init+0xf8>)
 8000846:	2200      	movs	r2, #0
 8000848:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800084a:	4b33      	ldr	r3, [pc, #204]	@ (8000918 <MX_ADC1_Init+0xf8>)
 800084c:	2204      	movs	r2, #4
 800084e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000850:	4b31      	ldr	r3, [pc, #196]	@ (8000918 <MX_ADC1_Init+0xf8>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000856:	4b30      	ldr	r3, [pc, #192]	@ (8000918 <MX_ADC1_Init+0xf8>)
 8000858:	2204      	movs	r2, #4
 800085a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800085c:	4b2e      	ldr	r3, [pc, #184]	@ (8000918 <MX_ADC1_Init+0xf8>)
 800085e:	2200      	movs	r2, #0
 8000860:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000862:	4b2d      	ldr	r3, [pc, #180]	@ (8000918 <MX_ADC1_Init+0xf8>)
 8000864:	2201      	movs	r2, #1
 8000866:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000868:	4b2b      	ldr	r3, [pc, #172]	@ (8000918 <MX_ADC1_Init+0xf8>)
 800086a:	2201      	movs	r2, #1
 800086c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800086e:	4b2a      	ldr	r3, [pc, #168]	@ (8000918 <MX_ADC1_Init+0xf8>)
 8000870:	2200      	movs	r2, #0
 8000872:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000876:	4b28      	ldr	r3, [pc, #160]	@ (8000918 <MX_ADC1_Init+0xf8>)
 8000878:	f44f 62ac 	mov.w	r2, #1376	@ 0x560
 800087c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800087e:	4b26      	ldr	r3, [pc, #152]	@ (8000918 <MX_ADC1_Init+0xf8>)
 8000880:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000884:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000886:	4b24      	ldr	r3, [pc, #144]	@ (8000918 <MX_ADC1_Init+0xf8>)
 8000888:	2203      	movs	r2, #3
 800088a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800088c:	4b22      	ldr	r3, [pc, #136]	@ (8000918 <MX_ADC1_Init+0xf8>)
 800088e:	2200      	movs	r2, #0
 8000890:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000892:	4b21      	ldr	r3, [pc, #132]	@ (8000918 <MX_ADC1_Init+0xf8>)
 8000894:	2200      	movs	r2, #0
 8000896:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000898:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <MX_ADC1_Init+0xf8>)
 800089a:	2200      	movs	r2, #0
 800089c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000918 <MX_ADC1_Init+0xf8>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008a6:	481c      	ldr	r0, [pc, #112]	@ (8000918 <MX_ADC1_Init+0xf8>)
 80008a8:	f001 fe1e 	bl	80024e8 <HAL_ADC_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80008b2:	f000 fd47 	bl	8001344 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80008b6:	2306      	movs	r3, #6
 80008b8:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 80008ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008be:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c8:	4619      	mov	r1, r3
 80008ca:	4813      	ldr	r0, [pc, #76]	@ (8000918 <MX_ADC1_Init+0xf8>)
 80008cc:	f003 fa48 	bl	8003d60 <HAL_ADCEx_MultiModeConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80008d6:	f000 fd35 	bl	8001344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008da:	2301      	movs	r3, #1
 80008dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008de:	2306      	movs	r3, #6
 80008e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008e6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80008ea:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ec:	2304      	movs	r3, #4
 80008ee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fa:	463b      	mov	r3, r7
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	@ (8000918 <MX_ADC1_Init+0xf8>)
 8000900:	f002 f8e0 	bl	8002ac4 <HAL_ADC_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800090a:	f000 fd1b 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	3730      	adds	r7, #48	@ 0x30
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	24006838 	.word	0x24006838
 800091c:	40022000 	.word	0x40022000

08000920 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	@ 0x28
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2224      	movs	r2, #36	@ 0x24
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f00b fddf 	bl	800c4f0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000932:	4b29      	ldr	r3, [pc, #164]	@ (80009d8 <MX_ADC2_Init+0xb8>)
 8000934:	4a29      	ldr	r2, [pc, #164]	@ (80009dc <MX_ADC2_Init+0xbc>)
 8000936:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000938:	4b27      	ldr	r3, [pc, #156]	@ (80009d8 <MX_ADC2_Init+0xb8>)
 800093a:	2200      	movs	r2, #0
 800093c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 800093e:	4b26      	ldr	r3, [pc, #152]	@ (80009d8 <MX_ADC2_Init+0xb8>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000944:	4b24      	ldr	r3, [pc, #144]	@ (80009d8 <MX_ADC2_Init+0xb8>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800094a:	4b23      	ldr	r3, [pc, #140]	@ (80009d8 <MX_ADC2_Init+0xb8>)
 800094c:	2204      	movs	r2, #4
 800094e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000950:	4b21      	ldr	r3, [pc, #132]	@ (80009d8 <MX_ADC2_Init+0xb8>)
 8000952:	2200      	movs	r2, #0
 8000954:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000956:	4b20      	ldr	r3, [pc, #128]	@ (80009d8 <MX_ADC2_Init+0xb8>)
 8000958:	2201      	movs	r2, #1
 800095a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800095c:	4b1e      	ldr	r3, [pc, #120]	@ (80009d8 <MX_ADC2_Init+0xb8>)
 800095e:	2201      	movs	r2, #1
 8000960:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000962:	4b1d      	ldr	r3, [pc, #116]	@ (80009d8 <MX_ADC2_Init+0xb8>)
 8000964:	2200      	movs	r2, #0
 8000966:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800096a:	4b1b      	ldr	r3, [pc, #108]	@ (80009d8 <MX_ADC2_Init+0xb8>)
 800096c:	2203      	movs	r2, #3
 800096e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000970:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <MX_ADC2_Init+0xb8>)
 8000972:	2200      	movs	r2, #0
 8000974:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000976:	4b18      	ldr	r3, [pc, #96]	@ (80009d8 <MX_ADC2_Init+0xb8>)
 8000978:	2200      	movs	r2, #0
 800097a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 800097c:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <MX_ADC2_Init+0xb8>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000984:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <MX_ADC2_Init+0xb8>)
 8000986:	2201      	movs	r2, #1
 8000988:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800098a:	4813      	ldr	r0, [pc, #76]	@ (80009d8 <MX_ADC2_Init+0xb8>)
 800098c:	f001 fdac 	bl	80024e8 <HAL_ADC_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 8000996:	f000 fcd5 	bl	8001344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_ADC2_Init+0xc0>)
 800099c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800099e:	2306      	movs	r3, #6
 80009a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009a6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80009aa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ac:	2304      	movs	r3, #4
 80009ae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4806      	ldr	r0, [pc, #24]	@ (80009d8 <MX_ADC2_Init+0xb8>)
 80009c0:	f002 f880 	bl	8002ac4 <HAL_ADC_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 80009ca:	f000 fcbb 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	3728      	adds	r7, #40	@ 0x28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	240068a8 	.word	0x240068a8
 80009dc:	40022100 	.word	0x40022100
 80009e0:	04300002 	.word	0x04300002

080009e4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	@ 0x28
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2224      	movs	r2, #36	@ 0x24
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f00b fd7d 	bl	800c4f0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80009f6:	4b31      	ldr	r3, [pc, #196]	@ (8000abc <MX_ADC3_Init+0xd8>)
 80009f8:	4a31      	ldr	r2, [pc, #196]	@ (8000ac0 <MX_ADC3_Init+0xdc>)
 80009fa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80009fc:	4b2f      	ldr	r3, [pc, #188]	@ (8000abc <MX_ADC3_Init+0xd8>)
 80009fe:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a02:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a04:	4b2d      	ldr	r3, [pc, #180]	@ (8000abc <MX_ADC3_Init+0xd8>)
 8000a06:	2208      	movs	r2, #8
 8000a08:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000a0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000abc <MX_ADC3_Init+0xd8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a10:	4b2a      	ldr	r3, [pc, #168]	@ (8000abc <MX_ADC3_Init+0xd8>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a16:	4b29      	ldr	r3, [pc, #164]	@ (8000abc <MX_ADC3_Init+0xd8>)
 8000a18:	2204      	movs	r2, #4
 8000a1a:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a1c:	4b27      	ldr	r3, [pc, #156]	@ (8000abc <MX_ADC3_Init+0xd8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000a22:	4b26      	ldr	r3, [pc, #152]	@ (8000abc <MX_ADC3_Init+0xd8>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000a28:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <MX_ADC3_Init+0xd8>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a2e:	4b23      	ldr	r3, [pc, #140]	@ (8000abc <MX_ADC3_Init+0xd8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000a36:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <MX_ADC3_Init+0xd8>)
 8000a38:	f44f 62ac 	mov.w	r2, #1376	@ 0x560
 8000a3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <MX_ADC3_Init+0xd8>)
 8000a40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000a46:	4b1d      	ldr	r3, [pc, #116]	@ (8000abc <MX_ADC3_Init+0xd8>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <MX_ADC3_Init+0xd8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000a54:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <MX_ADC3_Init+0xd8>)
 8000a56:	2203      	movs	r2, #3
 8000a58:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	@ (8000abc <MX_ADC3_Init+0xd8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a60:	4b16      	ldr	r3, [pc, #88]	@ (8000abc <MX_ADC3_Init+0xd8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000a66:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <MX_ADC3_Init+0xd8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <MX_ADC3_Init+0xd8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a74:	4811      	ldr	r0, [pc, #68]	@ (8000abc <MX_ADC3_Init+0xd8>)
 8000a76:	f001 fd37 	bl	80024e8 <HAL_ADC_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC3_Init+0xa0>
  {
    Error_Handler();
 8000a80:	f000 fc60 	bl	8001344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <MX_ADC3_Init+0xe0>)
 8000a86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a88:	2306      	movs	r3, #6
 8000a8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000a90:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <MX_ADC3_Init+0xe4>)
 8000a92:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a94:	2304      	movs	r3, #4
 8000a96:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4805      	ldr	r0, [pc, #20]	@ (8000abc <MX_ADC3_Init+0xd8>)
 8000aa6:	f002 f80d 	bl	8002ac4 <HAL_ADC_ConfigChannel>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000ab0:	f000 fc48 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	@ 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	24006918 	.word	0x24006918
 8000ac0:	58026000 	.word	0x58026000
 8000ac4:	04300002 	.word	0x04300002
 8000ac8:	47ff0000 	.word	0x47ff0000

08000acc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	2224      	movs	r2, #36	@ 0x24
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f00b fd09 	bl	800c4f0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000ade:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <MX_DAC1_Init+0x5c>)
 8000ae0:	4a12      	ldr	r2, [pc, #72]	@ (8000b2c <MX_DAC1_Init+0x60>)
 8000ae2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ae4:	4810      	ldr	r0, [pc, #64]	@ (8000b28 <MX_DAC1_Init+0x5c>)
 8000ae6:	f003 fb2c 	bl	8004142 <HAL_DAC_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000af0:	f000 fc28 	bl	8001344 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000b00:	2301      	movs	r3, #1
 8000b02:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2210      	movs	r2, #16
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	@ (8000b28 <MX_DAC1_Init+0x5c>)
 8000b10:	f003 fbba 	bl	8004288 <HAL_DAC_ConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b1a:	f000 fc13 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	3728      	adds	r7, #40	@ 0x28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	24006af0 	.word	0x24006af0
 8000b2c:	40007400 	.word	0x40007400

08000b30 <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Init.DataType = HASH_DATATYPE_32B;
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <MX_HASH_Init+0x20>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_HASH_Init+0x20>)
 8000b3c:	f005 ff7c 	bl	8006a38 <HAL_HASH_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_HASH_Init+0x1a>
  {
    Error_Handler();
 8000b46:	f000 fbfd 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	24006b04 	.word	0x24006b04

08000b54 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000b58:	4b24      	ldr	r3, [pc, #144]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000b5a:	4a25      	ldr	r2, [pc, #148]	@ (8000bf0 <MX_SPI4_Init+0x9c>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8000b5e:	4b23      	ldr	r3, [pc, #140]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000b64:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b6a:	4b20      	ldr	r3, [pc, #128]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b70:	4b1e      	ldr	r3, [pc, #120]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b76:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000b7e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b82:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b84:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b8a:	4b18      	ldr	r3, [pc, #96]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b90:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000b96:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b9c:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ba2:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ba8:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bae:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bba:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	@ (8000bec <MX_SPI4_Init+0x98>)
 8000bda:	f009 fb27 	bl	800a22c <HAL_SPI_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_SPI4_Init+0x94>
  {
    Error_Handler();
 8000be4:	f000 fbae 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	24006bc0 	.word	0x24006bc0
 8000bf0:	40013400 	.word	0x40013400

08000bf4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfa:	f107 0310 	add.w	r3, r7, #16
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c12:	4b1e      	ldr	r3, [pc, #120]	@ (8000c8c <MX_TIM2_Init+0x98>)
 8000c14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c8c <MX_TIM2_Init+0x98>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <MX_TIM2_Init+0x98>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c26:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <MX_TIM2_Init+0x98>)
 8000c28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <MX_TIM2_Init+0x98>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c34:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <MX_TIM2_Init+0x98>)
 8000c36:	2280      	movs	r2, #128	@ 0x80
 8000c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c3a:	4814      	ldr	r0, [pc, #80]	@ (8000c8c <MX_TIM2_Init+0x98>)
 8000c3c:	f009 fc35 	bl	800a4aa <HAL_TIM_Base_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c46:	f000 fb7d 	bl	8001344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	4619      	mov	r1, r3
 8000c56:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <MX_TIM2_Init+0x98>)
 8000c58:	f009 feb2 	bl	800a9c0 <HAL_TIM_ConfigClockSource>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c62:	f000 fb6f 	bl	8001344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c66:	2320      	movs	r3, #32
 8000c68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	@ (8000c8c <MX_TIM2_Init+0x98>)
 8000c74:	f00a f914 	bl	800aea0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c7e:	f000 fb61 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3720      	adds	r7, #32
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	24006c48 	.word	0x24006c48

08000c90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c96:	f107 0310 	add.w	r3, r7, #16
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cae:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <MX_TIM3_Init+0x94>)
 8000cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8000d28 <MX_TIM3_Init+0x98>)
 8000cb2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d24 <MX_TIM3_Init+0x94>)
 8000cb6:	220a      	movs	r2, #10
 8000cb8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	@ (8000d24 <MX_TIM3_Init+0x94>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cc0:	4b18      	ldr	r3, [pc, #96]	@ (8000d24 <MX_TIM3_Init+0x94>)
 8000cc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cc6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc8:	4b16      	ldr	r3, [pc, #88]	@ (8000d24 <MX_TIM3_Init+0x94>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <MX_TIM3_Init+0x94>)
 8000cd0:	2280      	movs	r2, #128	@ 0x80
 8000cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cd4:	4813      	ldr	r0, [pc, #76]	@ (8000d24 <MX_TIM3_Init+0x94>)
 8000cd6:	f009 fbe8 	bl	800a4aa <HAL_TIM_Base_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ce0:	f000 fb30 	bl	8001344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480c      	ldr	r0, [pc, #48]	@ (8000d24 <MX_TIM3_Init+0x94>)
 8000cf2:	f009 fe65 	bl	800a9c0 <HAL_TIM_ConfigClockSource>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000cfc:	f000 fb22 	bl	8001344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d00:	2300      	movs	r3, #0
 8000d02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <MX_TIM3_Init+0x94>)
 8000d0e:	f00a f8c7 	bl	800aea0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d18:	f000 fb14 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	3720      	adds	r7, #32
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	24006c94 	.word	0x24006c94
 8000d28:	40000400 	.word	0x40000400

08000d2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8000dc4 <MX_TIM4_Init+0x98>)
 8000d4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 8000d50:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d52:	220a      	movs	r2, #10
 8000d54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d56:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d5c:	4b18      	ldr	r3, [pc, #96]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d62:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d64:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d6a:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d6c:	2280      	movs	r2, #128	@ 0x80
 8000d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d70:	4813      	ldr	r0, [pc, #76]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d72:	f009 fb9a 	bl	800a4aa <HAL_TIM_Base_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000d7c:	f000 fae2 	bl	8001344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d86:	f107 0310 	add.w	r3, r7, #16
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480c      	ldr	r0, [pc, #48]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d8e:	f009 fe17 	bl	800a9c0 <HAL_TIM_ConfigClockSource>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000d98:	f000 fad4 	bl	8001344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000daa:	f00a f879 	bl	800aea0 <HAL_TIMEx_MasterConfigSynchronization>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000db4:	f000 fac6 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	24006ce0 	.word	0x24006ce0
 8000dc4:	40000800 	.word	0x40000800

08000dc8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	@ (8000e58 <MX_UART7_Init+0x90>)
 8000dce:	4a23      	ldr	r2, [pc, #140]	@ (8000e5c <MX_UART7_Init+0x94>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 921600;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <MX_UART7_Init+0x90>)
 8000dd4:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000dd8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b1f      	ldr	r3, [pc, #124]	@ (8000e58 <MX_UART7_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e58 <MX_UART7_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e58 <MX_UART7_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	@ (8000e58 <MX_UART7_Init+0x90>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <MX_UART7_Init+0x90>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df8:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <MX_UART7_Init+0x90>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <MX_UART7_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e04:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <MX_UART7_Init+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <MX_UART7_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000e10:	4811      	ldr	r0, [pc, #68]	@ (8000e58 <MX_UART7_Init+0x90>)
 8000e12:	f00a f8ff 	bl	800b014 <HAL_UART_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000e1c:	f000 fa92 	bl	8001344 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e20:	2100      	movs	r1, #0
 8000e22:	480d      	ldr	r0, [pc, #52]	@ (8000e58 <MX_UART7_Init+0x90>)
 8000e24:	f00b fa99 	bl	800c35a <HAL_UARTEx_SetTxFifoThreshold>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000e2e:	f000 fa89 	bl	8001344 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e32:	2100      	movs	r1, #0
 8000e34:	4808      	ldr	r0, [pc, #32]	@ (8000e58 <MX_UART7_Init+0x90>)
 8000e36:	f00b face 	bl	800c3d6 <HAL_UARTEx_SetRxFifoThreshold>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000e40:	f000 fa80 	bl	8001344 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000e44:	4804      	ldr	r0, [pc, #16]	@ (8000e58 <MX_UART7_Init+0x90>)
 8000e46:	f00b fa4f 	bl	800c2e8 <HAL_UARTEx_DisableFifoMode>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000e50:	f000 fa78 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	24006d2c 	.word	0x24006d2c
 8000e5c:	40007800 	.word	0x40007800

08000e60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e64:	4b22      	ldr	r3, [pc, #136]	@ (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000e66:	4a23      	ldr	r2, [pc, #140]	@ (8000ef4 <MX_USART3_UART_Init+0x94>)
 8000e68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8000e6a:	4b21      	ldr	r3, [pc, #132]	@ (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000e6c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000e70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e72:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000e86:	220c      	movs	r2, #12
 8000e88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e90:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e96:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea2:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ea8:	4811      	ldr	r0, [pc, #68]	@ (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000eaa:	f00a f8b3 	bl	800b014 <HAL_UART_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000eb4:	f000 fa46 	bl	8001344 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb8:	2100      	movs	r1, #0
 8000eba:	480d      	ldr	r0, [pc, #52]	@ (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000ebc:	f00b fa4d 	bl	800c35a <HAL_UARTEx_SetTxFifoThreshold>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ec6:	f000 fa3d 	bl	8001344 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4808      	ldr	r0, [pc, #32]	@ (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000ece:	f00b fa82 	bl	800c3d6 <HAL_UARTEx_SetRxFifoThreshold>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ed8:	f000 fa34 	bl	8001344 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000edc:	4804      	ldr	r0, [pc, #16]	@ (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000ede:	f00b fa03 	bl	800c2e8 <HAL_UARTEx_DisableFifoMode>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ee8:	f000 fa2c 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	24006dc0 	.word	0x24006dc0
 8000ef4:	40004800 	.word	0x40004800

08000ef8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000efe:	4b19      	ldr	r3, [pc, #100]	@ (8000f64 <MX_DMA_Init+0x6c>)
 8000f00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f04:	4a17      	ldr	r2, [pc, #92]	@ (8000f64 <MX_DMA_Init+0x6c>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f0e:	4b15      	ldr	r3, [pc, #84]	@ (8000f64 <MX_DMA_Init+0x6c>)
 8000f10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	200b      	movs	r0, #11
 8000f22:	f003 f8da 	bl	80040da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f26:	200b      	movs	r0, #11
 8000f28:	f003 f8f1 	bl	800410e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	200c      	movs	r0, #12
 8000f32:	f003 f8d2 	bl	80040da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f36:	200c      	movs	r0, #12
 8000f38:	f003 f8e9 	bl	800410e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	200d      	movs	r0, #13
 8000f42:	f003 f8ca 	bl	80040da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f46:	200d      	movs	r0, #13
 8000f48:	f003 f8e1 	bl	800410e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	200e      	movs	r0, #14
 8000f52:	f003 f8c2 	bl	80040da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f56:	200e      	movs	r0, #14
 8000f58:	f003 f8d9 	bl	800410e <HAL_NVIC_EnableIRQ>

}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	58024400 	.word	0x58024400

08000f68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	@ 0x28
 8000f6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800106c <MX_GPIO_Init+0x104>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f84:	4a39      	ldr	r2, [pc, #228]	@ (800106c <MX_GPIO_Init+0x104>)
 8000f86:	f043 0310 	orr.w	r3, r3, #16
 8000f8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8e:	4b37      	ldr	r3, [pc, #220]	@ (800106c <MX_GPIO_Init+0x104>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f94:	f003 0310 	and.w	r3, r3, #16
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f9c:	4b33      	ldr	r3, [pc, #204]	@ (800106c <MX_GPIO_Init+0x104>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa2:	4a32      	ldr	r2, [pc, #200]	@ (800106c <MX_GPIO_Init+0x104>)
 8000fa4:	f043 0320 	orr.w	r3, r3, #32
 8000fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fac:	4b2f      	ldr	r3, [pc, #188]	@ (800106c <MX_GPIO_Init+0x104>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb2:	f003 0320 	and.w	r3, r3, #32
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fba:	4b2c      	ldr	r3, [pc, #176]	@ (800106c <MX_GPIO_Init+0x104>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc0:	4a2a      	ldr	r2, [pc, #168]	@ (800106c <MX_GPIO_Init+0x104>)
 8000fc2:	f043 0308 	orr.w	r3, r3, #8
 8000fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fca:	4b28      	ldr	r3, [pc, #160]	@ (800106c <MX_GPIO_Init+0x104>)
 8000fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd0:	f003 0308 	and.w	r3, r3, #8
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd8:	4b24      	ldr	r3, [pc, #144]	@ (800106c <MX_GPIO_Init+0x104>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fde:	4a23      	ldr	r2, [pc, #140]	@ (800106c <MX_GPIO_Init+0x104>)
 8000fe0:	f043 0304 	orr.w	r3, r3, #4
 8000fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe8:	4b20      	ldr	r3, [pc, #128]	@ (800106c <MX_GPIO_Init+0x104>)
 8000fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800106c <MX_GPIO_Init+0x104>)
 8000ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800106c <MX_GPIO_Init+0x104>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001006:	4b19      	ldr	r3, [pc, #100]	@ (800106c <MX_GPIO_Init+0x104>)
 8001008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800101a:	4815      	ldr	r0, [pc, #84]	@ (8001070 <MX_GPIO_Init+0x108>)
 800101c:	f005 fcf2 	bl	8006a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	210c      	movs	r1, #12
 8001024:	4813      	ldr	r0, [pc, #76]	@ (8001074 <MX_GPIO_Init+0x10c>)
 8001026:	f005 fced 	bl	8006a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800102a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800102e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	480b      	ldr	r0, [pc, #44]	@ (8001070 <MX_GPIO_Init+0x108>)
 8001044:	f005 fb36 	bl	80066b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001048:	230c      	movs	r3, #12
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4805      	ldr	r0, [pc, #20]	@ (8001074 <MX_GPIO_Init+0x10c>)
 8001060:	f005 fb28 	bl	80066b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	@ 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	58024400 	.word	0x58024400
 8001070:	58021400 	.word	0x58021400
 8001074:	58020800 	.word	0x58020800

08001078 <GPIO_INIT>:

/* USER CODE BEGIN 4 */

void GPIO_INIT(){
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0


	 __HAL_RCC_GPIOK_CLK_ENABLE();
 800107e:	4b2d      	ldr	r3, [pc, #180]	@ (8001134 <GPIO_INIT+0xbc>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001084:	4a2b      	ldr	r2, [pc, #172]	@ (8001134 <GPIO_INIT+0xbc>)
 8001086:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800108a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108e:	4b29      	ldr	r3, [pc, #164]	@ (8001134 <GPIO_INIT+0xbc>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	683b      	ldr	r3, [r7, #0]
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]


	 /*Configure GPIO pin : MCO1_Pin */
	   GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010aa:	2308      	movs	r3, #8
 80010ac:	607b      	str	r3, [r7, #4]
	   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	60bb      	str	r3, [r7, #8]
	   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
	   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
	   HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	4619      	mov	r1, r3
 80010be:	481e      	ldr	r0, [pc, #120]	@ (8001138 <GPIO_INIT+0xc0>)
 80010c0:	f005 faf8 	bl	80066b4 <HAL_GPIO_Init>

	   /*Configure GPIO pin : MCO1_Pin */
	   GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010c4:	2310      	movs	r3, #16
 80010c6:	607b      	str	r3, [r7, #4]
	   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
	   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
	   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
	   HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	4619      	mov	r1, r3
 80010d8:	4817      	ldr	r0, [pc, #92]	@ (8001138 <GPIO_INIT+0xc0>)
 80010da:	f005 faeb 	bl	80066b4 <HAL_GPIO_Init>

	   /*Configure GPIO pin : MCO1_Pin */
	   GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010de:	2320      	movs	r3, #32
 80010e0:	607b      	str	r3, [r7, #4]
	   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e2:	2301      	movs	r3, #1
 80010e4:	60bb      	str	r3, [r7, #8]
	   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
	   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
	   HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	4811      	ldr	r0, [pc, #68]	@ (8001138 <GPIO_INIT+0xc0>)
 80010f4:	f005 fade 	bl	80066b4 <HAL_GPIO_Init>


	   /*Configure GPIO pin : MCO1_Pin */
	   GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010f8:	2340      	movs	r3, #64	@ 0x40
 80010fa:	607b      	str	r3, [r7, #4]
	   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
	   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
	   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
	   HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	4619      	mov	r1, r3
 800110c:	480a      	ldr	r0, [pc, #40]	@ (8001138 <GPIO_INIT+0xc0>)
 800110e:	f005 fad1 	bl	80066b4 <HAL_GPIO_Init>

	   GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001112:	2301      	movs	r3, #1
 8001114:	607b      	str	r3, [r7, #4]
	   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	2301      	movs	r3, #1
 8001118:	60bb      	str	r3, [r7, #8]
	   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800111a:	2302      	movs	r3, #2
 800111c:	60fb      	str	r3, [r7, #12]
	   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	613b      	str	r3, [r7, #16]
	   HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	4619      	mov	r1, r3
 8001126:	4804      	ldr	r0, [pc, #16]	@ (8001138 <GPIO_INIT+0xc0>)
 8001128:	f005 fac4 	bl	80066b4 <HAL_GPIO_Init>



}
 800112c:	bf00      	nop
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	58024400 	.word	0x58024400
 8001138:	58022800 	.word	0x58022800

0800113c <HAL_ADC_ConvHalfCpltCallback>:
//
//}
//


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]



	if (hadc == &hadc1){
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a1a      	ldr	r2, [pc, #104]	@ (80011b0 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d10b      	bne.n	8001164 <HAL_ADC_ConvHalfCpltCallback+0x28>


		HAL_TIM_Base_Start(&htim3);
 800114c:	4819      	ldr	r0, [pc, #100]	@ (80011b4 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 800114e:	f009 fa03 	bl	800a558 <HAL_TIM_Base_Start>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001152:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	@ 0x24
		 start_time_1 = __HAL_TIM_GET_COUNTER(&htim3);
 800115a:	4b16      	ldr	r3, [pc, #88]	@ (80011b4 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001160:	4a15      	ldr	r2, [pc, #84]	@ (80011b8 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8001162:	6013      	str	r3, [r2, #0]


	}

	if (hadc == &hadc3){
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a15      	ldr	r2, [pc, #84]	@ (80011bc <HAL_ADC_ConvHalfCpltCallback+0x80>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d10b      	bne.n	8001184 <HAL_ADC_ConvHalfCpltCallback+0x48>


		HAL_TIM_Base_Start(&htim4);
 800116c:	4814      	ldr	r0, [pc, #80]	@ (80011c0 <HAL_ADC_ConvHalfCpltCallback+0x84>)
 800116e:	f009 f9f3 	bl	800a558 <HAL_TIM_Base_Start>
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001172:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <HAL_ADC_ConvHalfCpltCallback+0x84>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2200      	movs	r2, #0
 8001178:	625a      	str	r2, [r3, #36]	@ 0x24
		 start_time_2 = __HAL_TIM_GET_COUNTER(&htim4);
 800117a:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <HAL_ADC_ConvHalfCpltCallback+0x84>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001180:	4a10      	ldr	r2, [pc, #64]	@ (80011c4 <HAL_ADC_ConvHalfCpltCallback+0x88>)
 8001182:	6013      	str	r3, [r2, #0]
//    // D-Cache is disabled, do not clean/invalidate
//}



	ADC1_reading =  ADC_buffer_entropy[ADC_BUFFER_SIZE/2];
 8001184:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 8001186:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800118a:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <HAL_ADC_ConvHalfCpltCallback+0x90>)
 8001192:	801a      	strh	r2, [r3, #0]
	ADC2_reading =	(ADC_buffer_entropy[ADC_BUFFER_SIZE/2]>>18)&0x0FFFF;
 8001194:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 8001196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800119a:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 800119e:	0c9b      	lsrs	r3, r3, #18
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <HAL_ADC_ConvHalfCpltCallback+0x94>)
 80011a4:	801a      	strh	r2, [r3, #0]
//	ADC2_reading = certification_signal_extract(ADC_BUFFER_SIZE/2 -1);
//	HAL_GPIO_WritePin(GPIOK, GPIO_PIN_0,GPIO_PIN_SET);

//	 start_time= TIM2 -> CNT;

}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	24006838 	.word	0x24006838
 80011b4:	24006c94 	.word	0x24006c94
 80011b8:	24006430 	.word	0x24006430
 80011bc:	24006918 	.word	0x24006918
 80011c0:	24006ce0 	.word	0x24006ce0
 80011c4:	2400643c 	.word	0x2400643c
 80011c8:	24000030 	.word	0x24000030
 80011cc:	24006e54 	.word	0x24006e54
 80011d0:	24006e56 	.word	0x24006e56

080011d4 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]





	if (hadc == &hadc1){
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a14      	ldr	r2, [pc, #80]	@ (8001230 <HAL_ADC_ConvCpltCallback+0x5c>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d10b      	bne.n	80011fc <HAL_ADC_ConvCpltCallback+0x28>

		end_time_1 = __HAL_TIM_GET_COUNTER(&htim3);
 80011e4:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <HAL_ADC_ConvCpltCallback+0x60>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ea:	4a13      	ldr	r2, [pc, #76]	@ (8001238 <HAL_ADC_ConvCpltCallback+0x64>)
 80011ec:	6013      	str	r3, [r2, #0]
		elapsed_time_1 = end_time_1 - start_time_1 ;
 80011ee:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <HAL_ADC_ConvCpltCallback+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b12      	ldr	r3, [pc, #72]	@ (800123c <HAL_ADC_ConvCpltCallback+0x68>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	4a11      	ldr	r2, [pc, #68]	@ (8001240 <HAL_ADC_ConvCpltCallback+0x6c>)
 80011fa:	6013      	str	r3, [r2, #0]

	}

	if (hadc == &hadc3){
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a11      	ldr	r2, [pc, #68]	@ (8001244 <HAL_ADC_ConvCpltCallback+0x70>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d10b      	bne.n	800121c <HAL_ADC_ConvCpltCallback+0x48>

		end_time_2 = __HAL_TIM_GET_COUNTER(&htim4);
 8001204:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <HAL_ADC_ConvCpltCallback+0x74>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120a:	4a10      	ldr	r2, [pc, #64]	@ (800124c <HAL_ADC_ConvCpltCallback+0x78>)
 800120c:	6013      	str	r3, [r2, #0]
		elapsed_time_2 = end_time_2 - start_time_2 ;
 800120e:	4b0f      	ldr	r3, [pc, #60]	@ (800124c <HAL_ADC_ConvCpltCallback+0x78>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	4a0e      	ldr	r2, [pc, #56]	@ (8001254 <HAL_ADC_ConvCpltCallback+0x80>)
 800121a:	6013      	str	r3, [r2, #0]


#ifdef RAW_DATA


	 ADC_buffer_status= ADC_BUFFER_READY;
 800121c:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <HAL_ADC_ConvCpltCallback+0x84>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]


#endif


}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	24006838 	.word	0x24006838
 8001234:	24006c94 	.word	0x24006c94
 8001238:	24006434 	.word	0x24006434
 800123c:	24006430 	.word	0x24006430
 8001240:	24006438 	.word	0x24006438
 8001244:	24006918 	.word	0x24006918
 8001248:	24006ce0 	.word	0x24006ce0
 800124c:	24006440 	.word	0x24006440
 8001250:	2400643c 	.word	0x2400643c
 8001254:	24006444 	.word	0x24006444
 8001258:	24006448 	.word	0x24006448

0800125c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]


		static DAC_value =2400;
 		if (HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2) != HAL_OK)
 8001264:	2110      	movs	r1, #16
 8001266:	480c      	ldr	r0, [pc, #48]	@ (8001298 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001268:	f002 ff8d 	bl	8004186 <HAL_DAC_Start>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_TIM_PeriodElapsedCallback+0x1a>
 		  {
 		    Error_Handler();
 8001272:	f000 f867 	bl	8001344 <Error_Handler>
// 		}
// 		else{
// 			DAC_value++;
// 		}

 		  if (HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, DAC_value) != HAL_OK)
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2200      	movs	r2, #0
 800127c:	2110      	movs	r1, #16
 800127e:	4806      	ldr	r0, [pc, #24]	@ (8001298 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001280:	f002 ffd8 	bl	8004234 <HAL_DAC_SetValue>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_TIM_PeriodElapsedCallback+0x32>
 		  {

 		    Error_Handler();
 800128a:	f000 f85b 	bl	8001344 <Error_Handler>

 		  }

}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	24006af0 	.word	0x24006af0
 800129c:	24000000 	.word	0x24000000

080012a0 <start_ADCS>:



void start_ADCS() {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
    // Initialize the ADCs
    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_DIFFERENTIAL_ENDED) != HAL_OK) {
 80012a4:	4a20      	ldr	r2, [pc, #128]	@ (8001328 <start_ADCS+0x88>)
 80012a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80012aa:	4820      	ldr	r0, [pc, #128]	@ (800132c <start_ADCS+0x8c>)
 80012ac:	f002 fc14 	bl	8003ad8 <HAL_ADCEx_Calibration_Start>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <start_ADCS+0x1a>
        Error_Handler();
 80012b6:	f000 f845 	bl	8001344 <Error_Handler>
    }

    if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_DIFFERENTIAL_ENDED) != HAL_OK) {
 80012ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001328 <start_ADCS+0x88>)
 80012bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80012c0:	481b      	ldr	r0, [pc, #108]	@ (8001330 <start_ADCS+0x90>)
 80012c2:	f002 fc09 	bl	8003ad8 <HAL_ADCEx_Calibration_Start>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <start_ADCS+0x30>
        Error_Handler();
 80012cc:	f000 f83a 	bl	8001344 <Error_Handler>
    }

    // Start DMA for ADCs
    if (HAL_ADCEx_MultiModeStart_DMA(&hadc1, ADC_buffer_entropy, ADC_BUFFER_SIZE) != HAL_OK) {
 80012d0:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 80012d4:	4917      	ldr	r1, [pc, #92]	@ (8001334 <start_ADCS+0x94>)
 80012d6:	4815      	ldr	r0, [pc, #84]	@ (800132c <start_ADCS+0x8c>)
 80012d8:	f002 fc62 	bl	8003ba0 <HAL_ADCEx_MultiModeStart_DMA>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <start_ADCS+0x46>
        Error_Handler();
 80012e2:	f000 f82f 	bl	8001344 <Error_Handler>
    }

    HAL_error_status = HAL_ADC_Start_DMA(&hadc3, ADC_buffer_certification, ADC_BUFFER_SIZE);
 80012e6:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 80012ea:	4913      	ldr	r1, [pc, #76]	@ (8001338 <start_ADCS+0x98>)
 80012ec:	4810      	ldr	r0, [pc, #64]	@ (8001330 <start_ADCS+0x90>)
 80012ee:	f001 fb03 	bl	80028f8 <HAL_ADC_Start_DMA>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b11      	ldr	r3, [pc, #68]	@ (800133c <start_ADCS+0x9c>)
 80012f8:	701a      	strb	r2, [r3, #0]

    if ( HAL_error_status!= HAL_OK) {
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <start_ADCS+0x9c>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <start_ADCS+0x66>
        Error_Handler();
 8001302:	f000 f81f 	bl	8001344 <Error_Handler>
    }

//     Start TIM2 to trigger ADCs
    if (HAL_TIM_Base_Start(&htim2) != HAL_OK) {
 8001306:	480e      	ldr	r0, [pc, #56]	@ (8001340 <start_ADCS+0xa0>)
 8001308:	f009 f926 	bl	800a558 <HAL_TIM_Base_Start>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <start_ADCS+0x76>
        Error_Handler();
 8001312:	f000 f817 	bl	8001344 <Error_Handler>
    }

    // Short delay to ensure ADCs are triggered
    HAL_Delay(1);
 8001316:	2001      	movs	r0, #1
 8001318:	f000 fd6e 	bl	8001df8 <HAL_Delay>

    // Stop TIM2 after the first trigger (if needed)
    HAL_TIM_Base_Stop(&htim2);
 800131c:	4808      	ldr	r0, [pc, #32]	@ (8001340 <start_ADCS+0xa0>)
 800131e:	f009 f999 	bl	800a654 <HAL_TIM_Base_Stop>
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	47ff0000 	.word	0x47ff0000
 800132c:	24006838 	.word	0x24006838
 8001330:	24006918 	.word	0x24006918
 8001334:	24000030 	.word	0x24000030
 8001338:	24003230 	.word	0x24003230
 800133c:	24007e58 	.word	0x24007e58
 8001340:	24006c48 	.word	0x24006c48

08001344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001348:	b672      	cpsid	i
}
 800134a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <Error_Handler+0x8>

08001350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <HAL_MspInit+0x5c>)
 8001358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800135c:	4a13      	ldr	r2, [pc, #76]	@ (80013ac <HAL_MspInit+0x5c>)
 800135e:	f043 0302 	orr.w	r3, r3, #2
 8001362:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001366:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <HAL_MspInit+0x5c>)
 8001368:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8001374:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <HAL_MspInit+0x5c>)
 8001376:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800137a:	4a0c      	ldr	r2, [pc, #48]	@ (80013ac <HAL_MspInit+0x5c>)
 800137c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001380:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001384:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <HAL_MspInit+0x5c>)
 8001386:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800138a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8001392:	2020      	movs	r0, #32
 8001394:	f000 fd54 	bl	8001e40 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8001398:	f000 fd7a 	bl	8001e90 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 800139c:	2000      	movs	r0, #0
 800139e:	f000 fd63 	bl	8001e68 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	58024400 	.word	0x58024400

080013b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a92      	ldr	r2, [pc, #584]	@ (8001608 <HAL_ADC_MspInit+0x258>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d15d      	bne.n	800147e <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013c2:	4b92      	ldr	r3, [pc, #584]	@ (800160c <HAL_ADC_MspInit+0x25c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	4a90      	ldr	r2, [pc, #576]	@ (800160c <HAL_ADC_MspInit+0x25c>)
 80013ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013cc:	4b8f      	ldr	r3, [pc, #572]	@ (800160c <HAL_ADC_MspInit+0x25c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d10e      	bne.n	80013f2 <HAL_ADC_MspInit+0x42>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013d4:	4b8e      	ldr	r3, [pc, #568]	@ (8001610 <HAL_ADC_MspInit+0x260>)
 80013d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013da:	4a8d      	ldr	r2, [pc, #564]	@ (8001610 <HAL_ADC_MspInit+0x260>)
 80013dc:	f043 0320 	orr.w	r3, r3, #32
 80013e0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80013e4:	4b8a      	ldr	r3, [pc, #552]	@ (8001610 <HAL_ADC_MspInit+0x260>)
 80013e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013ea:	f003 0320 	and.w	r3, r3, #32
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	4b87      	ldr	r3, [pc, #540]	@ (8001610 <HAL_ADC_MspInit+0x260>)
 80013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f8:	4a85      	ldr	r2, [pc, #532]	@ (8001610 <HAL_ADC_MspInit+0x260>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001402:	4b83      	ldr	r3, [pc, #524]	@ (8001610 <HAL_ADC_MspInit+0x260>)
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	61bb      	str	r3, [r7, #24]
 800140e:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001410:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001414:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8001418:	f000 fd5e 	bl	8001ed8 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800141c:	4b7d      	ldr	r3, [pc, #500]	@ (8001614 <HAL_ADC_MspInit+0x264>)
 800141e:	4a7e      	ldr	r2, [pc, #504]	@ (8001618 <HAL_ADC_MspInit+0x268>)
 8001420:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001422:	4b7c      	ldr	r3, [pc, #496]	@ (8001614 <HAL_ADC_MspInit+0x264>)
 8001424:	2209      	movs	r2, #9
 8001426:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001428:	4b7a      	ldr	r3, [pc, #488]	@ (8001614 <HAL_ADC_MspInit+0x264>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800142e:	4b79      	ldr	r3, [pc, #484]	@ (8001614 <HAL_ADC_MspInit+0x264>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001434:	4b77      	ldr	r3, [pc, #476]	@ (8001614 <HAL_ADC_MspInit+0x264>)
 8001436:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800143a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800143c:	4b75      	ldr	r3, [pc, #468]	@ (8001614 <HAL_ADC_MspInit+0x264>)
 800143e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001442:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001444:	4b73      	ldr	r3, [pc, #460]	@ (8001614 <HAL_ADC_MspInit+0x264>)
 8001446:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800144a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800144c:	4b71      	ldr	r3, [pc, #452]	@ (8001614 <HAL_ADC_MspInit+0x264>)
 800144e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001452:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001454:	4b6f      	ldr	r3, [pc, #444]	@ (8001614 <HAL_ADC_MspInit+0x264>)
 8001456:	2200      	movs	r2, #0
 8001458:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800145a:	4b6e      	ldr	r3, [pc, #440]	@ (8001614 <HAL_ADC_MspInit+0x264>)
 800145c:	2200      	movs	r2, #0
 800145e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001460:	486c      	ldr	r0, [pc, #432]	@ (8001614 <HAL_ADC_MspInit+0x264>)
 8001462:	f003 f853 	bl	800450c <HAL_DMA_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 800146c:	f7ff ff6a 	bl	8001344 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a68      	ldr	r2, [pc, #416]	@ (8001614 <HAL_ADC_MspInit+0x264>)
 8001474:	659a      	str	r2, [r3, #88]	@ 0x58
 8001476:	4a67      	ldr	r2, [pc, #412]	@ (8001614 <HAL_ADC_MspInit+0x264>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800147c:	e0c0      	b.n	8001600 <HAL_ADC_MspInit+0x250>
  else if(hadc->Instance==ADC2)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a66      	ldr	r2, [pc, #408]	@ (800161c <HAL_ADC_MspInit+0x26c>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d15c      	bne.n	8001542 <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001488:	4b60      	ldr	r3, [pc, #384]	@ (800160c <HAL_ADC_MspInit+0x25c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	4a5f      	ldr	r2, [pc, #380]	@ (800160c <HAL_ADC_MspInit+0x25c>)
 8001490:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001492:	4b5e      	ldr	r3, [pc, #376]	@ (800160c <HAL_ADC_MspInit+0x25c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d10e      	bne.n	80014b8 <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800149a:	4b5d      	ldr	r3, [pc, #372]	@ (8001610 <HAL_ADC_MspInit+0x260>)
 800149c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014a0:	4a5b      	ldr	r2, [pc, #364]	@ (8001610 <HAL_ADC_MspInit+0x260>)
 80014a2:	f043 0320 	orr.w	r3, r3, #32
 80014a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80014aa:	4b59      	ldr	r3, [pc, #356]	@ (8001610 <HAL_ADC_MspInit+0x260>)
 80014ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014b0:	f003 0320 	and.w	r3, r3, #32
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b8:	4b55      	ldr	r3, [pc, #340]	@ (8001610 <HAL_ADC_MspInit+0x260>)
 80014ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014be:	4a54      	ldr	r2, [pc, #336]	@ (8001610 <HAL_ADC_MspInit+0x260>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014c8:	4b51      	ldr	r3, [pc, #324]	@ (8001610 <HAL_ADC_MspInit+0x260>)
 80014ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80014d6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80014da:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80014de:	f000 fcfb 	bl	8001ed8 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc2.Instance = DMA1_Stream3;
 80014e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001620 <HAL_ADC_MspInit+0x270>)
 80014e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001624 <HAL_ADC_MspInit+0x274>)
 80014e6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80014e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001620 <HAL_ADC_MspInit+0x270>)
 80014ea:	220a      	movs	r2, #10
 80014ec:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001620 <HAL_ADC_MspInit+0x270>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001620 <HAL_ADC_MspInit+0x270>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80014fa:	4b49      	ldr	r3, [pc, #292]	@ (8001620 <HAL_ADC_MspInit+0x270>)
 80014fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001500:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001502:	4b47      	ldr	r3, [pc, #284]	@ (8001620 <HAL_ADC_MspInit+0x270>)
 8001504:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001508:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800150a:	4b45      	ldr	r3, [pc, #276]	@ (8001620 <HAL_ADC_MspInit+0x270>)
 800150c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001510:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001512:	4b43      	ldr	r3, [pc, #268]	@ (8001620 <HAL_ADC_MspInit+0x270>)
 8001514:	2200      	movs	r2, #0
 8001516:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001518:	4b41      	ldr	r3, [pc, #260]	@ (8001620 <HAL_ADC_MspInit+0x270>)
 800151a:	2200      	movs	r2, #0
 800151c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800151e:	4b40      	ldr	r3, [pc, #256]	@ (8001620 <HAL_ADC_MspInit+0x270>)
 8001520:	2200      	movs	r2, #0
 8001522:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001524:	483e      	ldr	r0, [pc, #248]	@ (8001620 <HAL_ADC_MspInit+0x270>)
 8001526:	f002 fff1 	bl	800450c <HAL_DMA_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8001530:	f7ff ff08 	bl	8001344 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a3a      	ldr	r2, [pc, #232]	@ (8001620 <HAL_ADC_MspInit+0x270>)
 8001538:	659a      	str	r2, [r3, #88]	@ 0x58
 800153a:	4a39      	ldr	r2, [pc, #228]	@ (8001620 <HAL_ADC_MspInit+0x270>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001540:	e05e      	b.n	8001600 <HAL_ADC_MspInit+0x250>
  else if(hadc->Instance==ADC3)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a38      	ldr	r2, [pc, #224]	@ (8001628 <HAL_ADC_MspInit+0x278>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d159      	bne.n	8001600 <HAL_ADC_MspInit+0x250>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800154c:	4b30      	ldr	r3, [pc, #192]	@ (8001610 <HAL_ADC_MspInit+0x260>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001552:	4a2f      	ldr	r2, [pc, #188]	@ (8001610 <HAL_ADC_MspInit+0x260>)
 8001554:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001558:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800155c:	4b2c      	ldr	r3, [pc, #176]	@ (8001610 <HAL_ADC_MspInit+0x260>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001562:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800156a:	4b29      	ldr	r3, [pc, #164]	@ (8001610 <HAL_ADC_MspInit+0x260>)
 800156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001570:	4a27      	ldr	r2, [pc, #156]	@ (8001610 <HAL_ADC_MspInit+0x260>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800157a:	4b25      	ldr	r3, [pc, #148]	@ (8001610 <HAL_ADC_MspInit+0x260>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001588:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 800158c:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001590:	f000 fca2 	bl	8001ed8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001594:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8001598:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800159c:	f000 fc9c 	bl	8001ed8 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream2;
 80015a0:	4b22      	ldr	r3, [pc, #136]	@ (800162c <HAL_ADC_MspInit+0x27c>)
 80015a2:	4a23      	ldr	r2, [pc, #140]	@ (8001630 <HAL_ADC_MspInit+0x280>)
 80015a4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80015a6:	4b21      	ldr	r3, [pc, #132]	@ (800162c <HAL_ADC_MspInit+0x27c>)
 80015a8:	2273      	movs	r2, #115	@ 0x73
 80015aa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <HAL_ADC_MspInit+0x27c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b2:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <HAL_ADC_MspInit+0x27c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <HAL_ADC_MspInit+0x27c>)
 80015ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015be:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015c0:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <HAL_ADC_MspInit+0x27c>)
 80015c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015c6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015c8:	4b18      	ldr	r3, [pc, #96]	@ (800162c <HAL_ADC_MspInit+0x27c>)
 80015ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015ce:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80015d0:	4b16      	ldr	r3, [pc, #88]	@ (800162c <HAL_ADC_MspInit+0x27c>)
 80015d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015d6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80015d8:	4b14      	ldr	r3, [pc, #80]	@ (800162c <HAL_ADC_MspInit+0x27c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015de:	4b13      	ldr	r3, [pc, #76]	@ (800162c <HAL_ADC_MspInit+0x27c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80015e4:	4811      	ldr	r0, [pc, #68]	@ (800162c <HAL_ADC_MspInit+0x27c>)
 80015e6:	f002 ff91 	bl	800450c <HAL_DMA_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_ADC_MspInit+0x244>
      Error_Handler();
 80015f0:	f7ff fea8 	bl	8001344 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a0d      	ldr	r2, [pc, #52]	@ (800162c <HAL_ADC_MspInit+0x27c>)
 80015f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80015fa:	4a0c      	ldr	r2, [pc, #48]	@ (800162c <HAL_ADC_MspInit+0x27c>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001600:	bf00      	nop
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40022000 	.word	0x40022000
 800160c:	24007e5c 	.word	0x24007e5c
 8001610:	58024400 	.word	0x58024400
 8001614:	24006988 	.word	0x24006988
 8001618:	40020010 	.word	0x40020010
 800161c:	40022100 	.word	0x40022100
 8001620:	24006a00 	.word	0x24006a00
 8001624:	40020058 	.word	0x40020058
 8001628:	58026000 	.word	0x58026000
 800162c:	24006a78 	.word	0x24006a78
 8001630:	40020040 	.word	0x40020040

08001634 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	@ 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a18      	ldr	r2, [pc, #96]	@ (80016b4 <HAL_DAC_MspInit+0x80>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d129      	bne.n	80016aa <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001656:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <HAL_DAC_MspInit+0x84>)
 8001658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800165c:	4a16      	ldr	r2, [pc, #88]	@ (80016b8 <HAL_DAC_MspInit+0x84>)
 800165e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001662:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001666:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <HAL_DAC_MspInit+0x84>)
 8001668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800166c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001674:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <HAL_DAC_MspInit+0x84>)
 8001676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167a:	4a0f      	ldr	r2, [pc, #60]	@ (80016b8 <HAL_DAC_MspInit+0x84>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001684:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <HAL_DAC_MspInit+0x84>)
 8001686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001692:	2320      	movs	r3, #32
 8001694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001696:	2303      	movs	r3, #3
 8001698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	4805      	ldr	r0, [pc, #20]	@ (80016bc <HAL_DAC_MspInit+0x88>)
 80016a6:	f005 f805 	bl	80066b4 <HAL_GPIO_Init>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80016aa:	bf00      	nop
 80016ac:	3728      	adds	r7, #40	@ 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40007400 	.word	0x40007400
 80016b8:	58024400 	.word	0x58024400
 80016bc:	58020000 	.word	0x58020000

080016c0 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 80016c8:	4b20      	ldr	r3, [pc, #128]	@ (800174c <HAL_HASH_MspInit+0x8c>)
 80016ca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80016ce:	4a1f      	ldr	r2, [pc, #124]	@ (800174c <HAL_HASH_MspInit+0x8c>)
 80016d0:	f043 0320 	orr.w	r3, r3, #32
 80016d4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80016d8:	4b1c      	ldr	r3, [pc, #112]	@ (800174c <HAL_HASH_MspInit+0x8c>)
 80016da:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80016de:	f003 0320 	and.w	r3, r3, #32
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]

    /* HASH DMA Init */
    /* HASH_IN Init */
    hdma_hash_in.Instance = DMA1_Stream1;
 80016e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001750 <HAL_HASH_MspInit+0x90>)
 80016e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001754 <HAL_HASH_MspInit+0x94>)
 80016ea:	601a      	str	r2, [r3, #0]
    hdma_hash_in.Init.Request = DMA_REQUEST_HASH_IN;
 80016ec:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <HAL_HASH_MspInit+0x90>)
 80016ee:	224e      	movs	r2, #78	@ 0x4e
 80016f0:	605a      	str	r2, [r3, #4]
    hdma_hash_in.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016f2:	4b17      	ldr	r3, [pc, #92]	@ (8001750 <HAL_HASH_MspInit+0x90>)
 80016f4:	2240      	movs	r2, #64	@ 0x40
 80016f6:	609a      	str	r2, [r3, #8]
    hdma_hash_in.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f8:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <HAL_HASH_MspInit+0x90>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
    hdma_hash_in.Init.MemInc = DMA_MINC_ENABLE;
 80016fe:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <HAL_HASH_MspInit+0x90>)
 8001700:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001704:	611a      	str	r2, [r3, #16]
    hdma_hash_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001706:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <HAL_HASH_MspInit+0x90>)
 8001708:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800170c:	615a      	str	r2, [r3, #20]
    hdma_hash_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <HAL_HASH_MspInit+0x90>)
 8001710:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001714:	619a      	str	r2, [r3, #24]
    hdma_hash_in.Init.Mode = DMA_NORMAL;
 8001716:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <HAL_HASH_MspInit+0x90>)
 8001718:	2200      	movs	r2, #0
 800171a:	61da      	str	r2, [r3, #28]
    hdma_hash_in.Init.Priority = DMA_PRIORITY_LOW;
 800171c:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <HAL_HASH_MspInit+0x90>)
 800171e:	2200      	movs	r2, #0
 8001720:	621a      	str	r2, [r3, #32]
    hdma_hash_in.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001722:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <HAL_HASH_MspInit+0x90>)
 8001724:	2200      	movs	r2, #0
 8001726:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_hash_in) != HAL_OK)
 8001728:	4809      	ldr	r0, [pc, #36]	@ (8001750 <HAL_HASH_MspInit+0x90>)
 800172a:	f002 feef 	bl	800450c <HAL_DMA_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <HAL_HASH_MspInit+0x78>
    {
      Error_Handler();
 8001734:	f7ff fe06 	bl	8001344 <Error_Handler>
    }

    __HAL_LINKDMA(hhash,hdmain,hdma_hash_in);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a05      	ldr	r2, [pc, #20]	@ (8001750 <HAL_HASH_MspInit+0x90>)
 800173c:	631a      	str	r2, [r3, #48]	@ 0x30
 800173e:	4a04      	ldr	r2, [pc, #16]	@ (8001750 <HAL_HASH_MspInit+0x90>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	58024400 	.word	0x58024400
 8001750:	24006b48 	.word	0x24006b48
 8001754:	40020028 	.word	0x40020028

08001758 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b0b8      	sub	sp, #224	@ 0xe0
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	22b8      	movs	r2, #184	@ 0xb8
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f00a feb9 	bl	800c4f0 <memset>
  if(hspi->Instance==SPI4)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a2f      	ldr	r2, [pc, #188]	@ (8001840 <HAL_SPI_MspInit+0xe8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d156      	bne.n	8001836 <HAL_SPI_MspInit+0xde>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001788:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8001794:	2304      	movs	r3, #4
 8001796:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 12;
 8001798:	230c      	movs	r3, #12
 800179a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800179c:	2302      	movs	r3, #2
 800179e:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 1;
 80017a0:	2301      	movs	r3, #1
 80017a2:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80017a4:	2302      	movs	r3, #2
 80017a6:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80017a8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80017ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL3;
 80017b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017ba:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	4618      	mov	r0, r3
 80017c2:	f006 f94d 	bl	8007a60 <HAL_RCCEx_PeriphCLKConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 80017cc:	f7ff fdba 	bl	8001344 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80017d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001844 <HAL_SPI_MspInit+0xec>)
 80017d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001844 <HAL_SPI_MspInit+0xec>)
 80017d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017e0:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <HAL_SPI_MspInit+0xec>)
 80017e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ee:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <HAL_SPI_MspInit+0xec>)
 80017f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f4:	4a13      	ldr	r2, [pc, #76]	@ (8001844 <HAL_SPI_MspInit+0xec>)
 80017f6:	f043 0310 	orr.w	r3, r3, #16
 80017fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017fe:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <HAL_SPI_MspInit+0xec>)
 8001800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001804:	f003 0310 	and.w	r3, r3, #16
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800180c:	2364      	movs	r3, #100	@ 0x64
 800180e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001824:	2305      	movs	r3, #5
 8001826:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800182a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800182e:	4619      	mov	r1, r3
 8001830:	4805      	ldr	r0, [pc, #20]	@ (8001848 <HAL_SPI_MspInit+0xf0>)
 8001832:	f004 ff3f 	bl	80066b4 <HAL_GPIO_Init>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001836:	bf00      	nop
 8001838:	37e0      	adds	r7, #224	@ 0xe0
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40013400 	.word	0x40013400
 8001844:	58024400 	.word	0x58024400
 8001848:	58021000 	.word	0x58021000

0800184c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800185c:	d117      	bne.n	800188e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800185e:	4b26      	ldr	r3, [pc, #152]	@ (80018f8 <HAL_TIM_Base_MspInit+0xac>)
 8001860:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001864:	4a24      	ldr	r2, [pc, #144]	@ (80018f8 <HAL_TIM_Base_MspInit+0xac>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800186e:	4b22      	ldr	r3, [pc, #136]	@ (80018f8 <HAL_TIM_Base_MspInit+0xac>)
 8001870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2100      	movs	r1, #0
 8001880:	201c      	movs	r0, #28
 8001882:	f002 fc2a 	bl	80040da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001886:	201c      	movs	r0, #28
 8001888:	f002 fc41 	bl	800410e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800188c:	e030      	b.n	80018f0 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM3)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1a      	ldr	r2, [pc, #104]	@ (80018fc <HAL_TIM_Base_MspInit+0xb0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d117      	bne.n	80018c8 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001898:	4b17      	ldr	r3, [pc, #92]	@ (80018f8 <HAL_TIM_Base_MspInit+0xac>)
 800189a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800189e:	4a16      	ldr	r2, [pc, #88]	@ (80018f8 <HAL_TIM_Base_MspInit+0xac>)
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018a8:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <HAL_TIM_Base_MspInit+0xac>)
 80018aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	201d      	movs	r0, #29
 80018bc:	f002 fc0d 	bl	80040da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018c0:	201d      	movs	r0, #29
 80018c2:	f002 fc24 	bl	800410e <HAL_NVIC_EnableIRQ>
}
 80018c6:	e013      	b.n	80018f0 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM4)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001900 <HAL_TIM_Base_MspInit+0xb4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d10e      	bne.n	80018f0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018d2:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <HAL_TIM_Base_MspInit+0xac>)
 80018d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018d8:	4a07      	ldr	r2, [pc, #28]	@ (80018f8 <HAL_TIM_Base_MspInit+0xac>)
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018e2:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <HAL_TIM_Base_MspInit+0xac>)
 80018e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	58024400 	.word	0x58024400
 80018fc:	40000400 	.word	0x40000400
 8001900:	40000800 	.word	0x40000800

08001904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b0ba      	sub	sp, #232	@ 0xe8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800191c:	f107 0318 	add.w	r3, r7, #24
 8001920:	22b8      	movs	r2, #184	@ 0xb8
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f00a fde3 	bl	800c4f0 <memset>
  if(huart->Instance==UART7)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a4d      	ldr	r2, [pc, #308]	@ (8001a64 <HAL_UART_MspInit+0x160>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d146      	bne.n	80019c2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001934:	f04f 0202 	mov.w	r2, #2
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001946:	f107 0318 	add.w	r3, r7, #24
 800194a:	4618      	mov	r0, r3
 800194c:	f006 f888 	bl	8007a60 <HAL_RCCEx_PeriphCLKConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001956:	f7ff fcf5 	bl	8001344 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800195a:	4b43      	ldr	r3, [pc, #268]	@ (8001a68 <HAL_UART_MspInit+0x164>)
 800195c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001960:	4a41      	ldr	r2, [pc, #260]	@ (8001a68 <HAL_UART_MspInit+0x164>)
 8001962:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001966:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800196a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a68 <HAL_UART_MspInit+0x164>)
 800196c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001970:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001978:	4b3b      	ldr	r3, [pc, #236]	@ (8001a68 <HAL_UART_MspInit+0x164>)
 800197a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800197e:	4a3a      	ldr	r2, [pc, #232]	@ (8001a68 <HAL_UART_MspInit+0x164>)
 8001980:	f043 0320 	orr.w	r3, r3, #32
 8001984:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001988:	4b37      	ldr	r3, [pc, #220]	@ (8001a68 <HAL_UART_MspInit+0x164>)
 800198a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800198e:	f003 0320 	and.w	r3, r3, #32
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001996:	23c0      	movs	r3, #192	@ 0xc0
 8001998:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80019ae:	2307      	movs	r3, #7
 80019b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019b8:	4619      	mov	r1, r3
 80019ba:	482c      	ldr	r0, [pc, #176]	@ (8001a6c <HAL_UART_MspInit+0x168>)
 80019bc:	f004 fe7a 	bl	80066b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019c0:	e04b      	b.n	8001a5a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a2a      	ldr	r2, [pc, #168]	@ (8001a70 <HAL_UART_MspInit+0x16c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d146      	bne.n	8001a5a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019cc:	f04f 0202 	mov.w	r2, #2
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80019d8:	2300      	movs	r3, #0
 80019da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019de:	f107 0318 	add.w	r3, r7, #24
 80019e2:	4618      	mov	r0, r3
 80019e4:	f006 f83c 	bl	8007a60 <HAL_RCCEx_PeriphCLKConfig>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_UART_MspInit+0xee>
      Error_Handler();
 80019ee:	f7ff fca9 	bl	8001344 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <HAL_UART_MspInit+0x164>)
 80019f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a68 <HAL_UART_MspInit+0x164>)
 80019fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a02:	4b19      	ldr	r3, [pc, #100]	@ (8001a68 <HAL_UART_MspInit+0x164>)
 8001a04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a10:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <HAL_UART_MspInit+0x164>)
 8001a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a16:	4a14      	ldr	r2, [pc, #80]	@ (8001a68 <HAL_UART_MspInit+0x164>)
 8001a18:	f043 0308 	orr.w	r3, r3, #8
 8001a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a20:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <HAL_UART_MspInit+0x164>)
 8001a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001a2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a48:	2307      	movs	r3, #7
 8001a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a4e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a52:	4619      	mov	r1, r3
 8001a54:	4807      	ldr	r0, [pc, #28]	@ (8001a74 <HAL_UART_MspInit+0x170>)
 8001a56:	f004 fe2d 	bl	80066b4 <HAL_GPIO_Init>
}
 8001a5a:	bf00      	nop
 8001a5c:	37e8      	adds	r7, #232	@ 0xe8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40007800 	.word	0x40007800
 8001a68:	58024400 	.word	0x58024400
 8001a6c:	58021400 	.word	0x58021400
 8001a70:	40004800 	.word	0x40004800
 8001a74:	58020c00 	.word	0x58020c00

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <NMI_Handler+0x4>

08001a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <MemManage_Handler+0x4>

08001a90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <BusFault_Handler+0x4>

08001a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <UsageFault_Handler+0x4>

08001aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ace:	f000 f973 	bl	8001db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001adc:	4802      	ldr	r0, [pc, #8]	@ (8001ae8 <DMA1_Stream0_IRQHandler+0x10>)
 8001ade:	f003 fad7 	bl	8005090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	24006988 	.word	0x24006988

08001aec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_hash_in);
 8001af0:	4802      	ldr	r0, [pc, #8]	@ (8001afc <DMA1_Stream1_IRQHandler+0x10>)
 8001af2:	f003 facd 	bl	8005090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	24006b48 	.word	0x24006b48

08001b00 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001b04:	4802      	ldr	r0, [pc, #8]	@ (8001b10 <DMA1_Stream2_IRQHandler+0x10>)
 8001b06:	f003 fac3 	bl	8005090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	24006a78 	.word	0x24006a78

08001b14 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001b18:	4802      	ldr	r0, [pc, #8]	@ (8001b24 <DMA1_Stream3_IRQHandler+0x10>)
 8001b1a:	f003 fab9 	bl	8005090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	24006a00 	.word	0x24006a00

08001b28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b2c:	4802      	ldr	r0, [pc, #8]	@ (8001b38 <TIM2_IRQHandler+0x10>)
 8001b2e:	f008 fe3f 	bl	800a7b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	24006c48 	.word	0x24006c48

08001b3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b40:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <TIM3_IRQHandler+0x10>)
 8001b42:	f008 fe35 	bl	800a7b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	24006c94 	.word	0x24006c94

08001b50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b54:	4b32      	ldr	r3, [pc, #200]	@ (8001c20 <SystemInit+0xd0>)
 8001b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b5a:	4a31      	ldr	r2, [pc, #196]	@ (8001c20 <SystemInit+0xd0>)
 8001b5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b64:	4b2f      	ldr	r3, [pc, #188]	@ (8001c24 <SystemInit+0xd4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	2b06      	cmp	r3, #6
 8001b6e:	d807      	bhi.n	8001b80 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b70:	4b2c      	ldr	r3, [pc, #176]	@ (8001c24 <SystemInit+0xd4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f023 030f 	bic.w	r3, r3, #15
 8001b78:	4a2a      	ldr	r2, [pc, #168]	@ (8001c24 <SystemInit+0xd4>)
 8001b7a:	f043 0307 	orr.w	r3, r3, #7
 8001b7e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b80:	4b29      	ldr	r3, [pc, #164]	@ (8001c28 <SystemInit+0xd8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a28      	ldr	r2, [pc, #160]	@ (8001c28 <SystemInit+0xd8>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b8c:	4b26      	ldr	r3, [pc, #152]	@ (8001c28 <SystemInit+0xd8>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b92:	4b25      	ldr	r3, [pc, #148]	@ (8001c28 <SystemInit+0xd8>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4924      	ldr	r1, [pc, #144]	@ (8001c28 <SystemInit+0xd8>)
 8001b98:	4b24      	ldr	r3, [pc, #144]	@ (8001c2c <SystemInit+0xdc>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b9e:	4b21      	ldr	r3, [pc, #132]	@ (8001c24 <SystemInit+0xd4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001baa:	4b1e      	ldr	r3, [pc, #120]	@ (8001c24 <SystemInit+0xd4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 030f 	bic.w	r3, r3, #15
 8001bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c24 <SystemInit+0xd4>)
 8001bb4:	f043 0307 	orr.w	r3, r3, #7
 8001bb8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001bba:	4b1b      	ldr	r3, [pc, #108]	@ (8001c28 <SystemInit+0xd8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001bc0:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <SystemInit+0xd8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001bc6:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <SystemInit+0xd8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bcc:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <SystemInit+0xd8>)
 8001bce:	4a18      	ldr	r2, [pc, #96]	@ (8001c30 <SystemInit+0xe0>)
 8001bd0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001bd2:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <SystemInit+0xd8>)
 8001bd4:	4a17      	ldr	r2, [pc, #92]	@ (8001c34 <SystemInit+0xe4>)
 8001bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001bd8:	4b13      	ldr	r3, [pc, #76]	@ (8001c28 <SystemInit+0xd8>)
 8001bda:	4a17      	ldr	r2, [pc, #92]	@ (8001c38 <SystemInit+0xe8>)
 8001bdc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bde:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <SystemInit+0xd8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001be4:	4b10      	ldr	r3, [pc, #64]	@ (8001c28 <SystemInit+0xd8>)
 8001be6:	4a14      	ldr	r2, [pc, #80]	@ (8001c38 <SystemInit+0xe8>)
 8001be8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bea:	4b0f      	ldr	r3, [pc, #60]	@ (8001c28 <SystemInit+0xd8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c28 <SystemInit+0xd8>)
 8001bf2:	4a11      	ldr	r2, [pc, #68]	@ (8001c38 <SystemInit+0xe8>)
 8001bf4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <SystemInit+0xd8>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <SystemInit+0xd8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a09      	ldr	r2, [pc, #36]	@ (8001c28 <SystemInit+0xd8>)
 8001c02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c08:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <SystemInit+0xd8>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <SystemInit+0xec>)
 8001c10:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001c14:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00
 8001c24:	52002000 	.word	0x52002000
 8001c28:	58024400 	.word	0x58024400
 8001c2c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c30:	02020200 	.word	0x02020200
 8001c34:	01ff0000 	.word	0x01ff0000
 8001c38:	01010280 	.word	0x01010280
 8001c3c:	52004000 	.word	0x52004000

08001c40 <buffer_copy>:
		  USART1 -> TDR = uart_byte;

}


void buffer_copy(uint8_t* destination,uint8_t* source, uint16_t size ){
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	80fb      	strh	r3, [r7, #6]


	for (int i = 0; i < size; i++) {
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e00a      	b.n	8001c6a <buffer_copy+0x2a>

		destination[i]= source[i];
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	441a      	add	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	68f9      	ldr	r1, [r7, #12]
 8001c5e:	440b      	add	r3, r1
 8001c60:	7812      	ldrb	r2, [r2, #0]
 8001c62:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++) {
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	3301      	adds	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	dbf0      	blt.n	8001c54 <buffer_copy+0x14>

	}
}
 8001c72:	bf00      	nop
 8001c74:	bf00      	nop
 8001c76:	371c      	adds	r7, #28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c84:	f7ff ff64 	bl	8001b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c88:	480c      	ldr	r0, [pc, #48]	@ (8001cbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c8a:	490d      	ldr	r1, [pc, #52]	@ (8001cc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c90:	e002      	b.n	8001c98 <LoopCopyDataInit>

08001c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c96:	3304      	adds	r3, #4

08001c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c9c:	d3f9      	bcc.n	8001c92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ca0:	4c0a      	ldr	r4, [pc, #40]	@ (8001ccc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca4:	e001      	b.n	8001caa <LoopFillZerobss>

08001ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca8:	3204      	adds	r2, #4

08001caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cac:	d3fb      	bcc.n	8001ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cae:	f00a fc27 	bl	800c500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cb2:	f7fe fca3 	bl	80005fc <main>
  bx  lr
 8001cb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cb8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001cbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001cc0:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001cc4:	0800c5b0 	.word	0x0800c5b0
  ldr r2, =_sbss
 8001cc8:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8001ccc:	24007e64 	.word	0x24007e64

08001cd0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd0:	e7fe      	b.n	8001cd0 <ADC3_IRQHandler>
	...

08001cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cda:	2003      	movs	r0, #3
 8001cdc:	f002 f9f2 	bl	80040c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ce0:	f005 fce8 	bl	80076b4 <HAL_RCC_GetSysClockFreq>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <HAL_Init+0x68>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	4913      	ldr	r1, [pc, #76]	@ (8001d40 <HAL_Init+0x6c>)
 8001cf2:	5ccb      	ldrb	r3, [r1, r3]
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001d3c <HAL_Init+0x68>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	4a0e      	ldr	r2, [pc, #56]	@ (8001d40 <HAL_Init+0x6c>)
 8001d08:	5cd3      	ldrb	r3, [r2, r3]
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
 8001d14:	4a0b      	ldr	r2, [pc, #44]	@ (8001d44 <HAL_Init+0x70>)
 8001d16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d18:	4a0b      	ldr	r2, [pc, #44]	@ (8001d48 <HAL_Init+0x74>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f000 f814 	bl	8001d4c <HAL_InitTick>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e002      	b.n	8001d34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d2e:	f7ff fb0f 	bl	8001350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	58024400 	.word	0x58024400
 8001d40:	0800c560 	.word	0x0800c560
 8001d44:	24000008 	.word	0x24000008
 8001d48:	24000004 	.word	0x24000004

08001d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d54:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <HAL_InitTick+0x60>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e021      	b.n	8001da4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d60:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <HAL_InitTick+0x64>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b11      	ldr	r3, [pc, #68]	@ (8001dac <HAL_InitTick+0x60>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 f9d7 	bl	800412a <HAL_SYSTICK_Config>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00e      	b.n	8001da4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b0f      	cmp	r3, #15
 8001d8a:	d80a      	bhi.n	8001da2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f002 f9a1 	bl	80040da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d98:	4a06      	ldr	r2, [pc, #24]	@ (8001db4 <HAL_InitTick+0x68>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	24000010 	.word	0x24000010
 8001db0:	24000004 	.word	0x24000004
 8001db4:	2400000c 	.word	0x2400000c

08001db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <HAL_IncTick+0x20>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <HAL_IncTick+0x24>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a04      	ldr	r2, [pc, #16]	@ (8001ddc <HAL_IncTick+0x24>)
 8001dca:	6013      	str	r3, [r2, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	24000010 	.word	0x24000010
 8001ddc:	24007e60 	.word	0x24007e60

08001de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return uwTick;
 8001de4:	4b03      	ldr	r3, [pc, #12]	@ (8001df4 <HAL_GetTick+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	24007e60 	.word	0x24007e60

08001df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e00:	f7ff ffee 	bl	8001de0 <HAL_GetTick>
 8001e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e10:	d005      	beq.n	8001e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e12:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <HAL_Delay+0x44>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e1e:	bf00      	nop
 8001e20:	f7ff ffde 	bl	8001de0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d8f7      	bhi.n	8001e20 <HAL_Delay+0x28>
  {
  }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	24000010 	.word	0x24000010

08001e40 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001e48:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e50:	4904      	ldr	r1, [pc, #16]	@ (8001e64 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	58003c00 	.word	0x58003c00

08001e68 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f023 0202 	bic.w	r2, r3, #2
 8001e78:	4904      	ldr	r1, [pc, #16]	@ (8001e8c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	600b      	str	r3, [r1, #0]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	58003c00 	.word	0x58003c00

08001e90 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001e96:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ed4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001ea2:	f7ff ff9d 	bl	8001de0 <HAL_GetTick>
 8001ea6:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001ea8:	e008      	b.n	8001ebc <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001eaa:	f7ff ff99 	bl	8001de0 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b0a      	cmp	r3, #10
 8001eb6:	d901      	bls.n	8001ebc <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e006      	b.n	8001eca <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001ebc:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	58003c00 	.word	0x58003c00

08001ed8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001ee2:	4b07      	ldr	r3, [pc, #28]	@ (8001f00 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	401a      	ands	r2, r3
 8001eec:	4904      	ldr	r1, [pc, #16]	@ (8001f00 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	58000400 	.word	0x58000400

08001f04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	609a      	str	r2, [r3, #8]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	3360      	adds	r3, #96	@ 0x60
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4a10      	ldr	r2, [pc, #64]	@ (8001fcc <LL_ADC_SetOffset+0x60>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d10b      	bne.n	8001fa8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001fa6:	e00b      	b.n	8001fc0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	601a      	str	r2, [r3, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	371c      	adds	r7, #28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	58026000 	.word	0x58026000

08001fd0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3360      	adds	r3, #96	@ 0x60
 8001fde:	461a      	mov	r2, r3
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	431a      	orrs	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	611a      	str	r2, [r3, #16]
}
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4a0c      	ldr	r2, [pc, #48]	@ (8002070 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d00e      	beq.n	8002062 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	3360      	adds	r3, #96	@ 0x60
 8002048:	461a      	mov	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	431a      	orrs	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	601a      	str	r2, [r3, #0]
  }
}
 8002062:	bf00      	nop
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	58026000 	.word	0x58026000

08002074 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002074:	b480      	push	{r7}
 8002076:	b087      	sub	sp, #28
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4a0c      	ldr	r2, [pc, #48]	@ (80020b4 <LL_ADC_SetOffsetSaturation+0x40>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d10e      	bne.n	80020a6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3360      	adds	r3, #96	@ 0x60
 800208c:	461a      	mov	r2, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	431a      	orrs	r2, r3
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80020a6:	bf00      	nop
 80020a8:	371c      	adds	r7, #28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	58026000 	.word	0x58026000

080020b8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4a0c      	ldr	r2, [pc, #48]	@ (80020f8 <LL_ADC_SetOffsetSign+0x40>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d10e      	bne.n	80020ea <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	3360      	adds	r3, #96	@ 0x60
 80020d0:	461a      	mov	r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	431a      	orrs	r2, r3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80020ea:	bf00      	nop
 80020ec:	371c      	adds	r7, #28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	58026000 	.word	0x58026000

080020fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3360      	adds	r3, #96	@ 0x60
 800210c:	461a      	mov	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4a0c      	ldr	r2, [pc, #48]	@ (800214c <LL_ADC_SetOffsetState+0x50>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d108      	bne.n	8002130 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	431a      	orrs	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800212e:	e007      	b.n	8002140 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	431a      	orrs	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	601a      	str	r2, [r3, #0]
}
 8002140:	bf00      	nop
 8002142:	371c      	adds	r7, #28
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	58026000 	.word	0x58026000

08002150 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002176:	b480      	push	{r7}
 8002178:	b087      	sub	sp, #28
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	3330      	adds	r3, #48	@ 0x30
 8002186:	461a      	mov	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	4413      	add	r3, r2
 8002194:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	211f      	movs	r1, #31
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	401a      	ands	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	0e9b      	lsrs	r3, r3, #26
 80021ae:	f003 011f 	and.w	r1, r3, #31
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	431a      	orrs	r2, r3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021c2:	bf00      	nop
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f023 0203 	bic.w	r2, r3, #3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	60da      	str	r2, [r3, #12]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f043 0201 	orr.w	r2, r3, #1
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	60da      	str	r2, [r3, #12]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a08      	ldr	r2, [pc, #32]	@ (8002244 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d107      	bne.n	8002236 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f023 0203 	bic.w	r2, r3, #3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	60da      	str	r2, [r3, #12]
  }
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	58026000 	.word	0x58026000

08002248 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3314      	adds	r3, #20
 8002258:	461a      	mov	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	0e5b      	lsrs	r3, r3, #25
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	4413      	add	r3, r2
 8002266:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	0d1b      	lsrs	r3, r3, #20
 8002270:	f003 031f 	and.w	r3, r3, #31
 8002274:	2107      	movs	r1, #7
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	401a      	ands	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	0d1b      	lsrs	r3, r3, #20
 8002282:	f003 031f 	and.w	r3, r3, #31
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	fa01 f303 	lsl.w	r3, r1, r3
 800228c:	431a      	orrs	r2, r3
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002292:	bf00      	nop
 8002294:	371c      	adds	r7, #28
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002318 <LL_ADC_SetChannelSingleDiff+0x78>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d115      	bne.n	80022e0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022c0:	43db      	mvns	r3, r3
 80022c2:	401a      	ands	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f003 0318 	and.w	r3, r3, #24
 80022ca:	4914      	ldr	r1, [pc, #80]	@ (800231c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80022cc:	40d9      	lsrs	r1, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	400b      	ands	r3, r1
 80022d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022d6:	431a      	orrs	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80022de:	e014      	b.n	800230a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022ec:	43db      	mvns	r3, r3
 80022ee:	401a      	ands	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f003 0318 	and.w	r3, r3, #24
 80022f6:	4909      	ldr	r1, [pc, #36]	@ (800231c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80022f8:	40d9      	lsrs	r1, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	400b      	ands	r3, r1
 80022fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002302:	431a      	orrs	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	58026000 	.word	0x58026000
 800231c:	000fffff 	.word	0x000fffff

08002320 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 031f 	and.w	r3, r3, #31
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	4b04      	ldr	r3, [pc, #16]	@ (800235c <LL_ADC_DisableDeepPowerDown+0x20>)
 800234a:	4013      	ands	r3, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6093      	str	r3, [r2, #8]
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	5fffffc0 	.word	0x5fffffc0

08002360 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002370:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002374:	d101      	bne.n	800237a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <LL_ADC_EnableInternalRegulator+0x24>)
 8002396:	4013      	ands	r3, r2
 8002398:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	6fffffc0 	.word	0x6fffffc0

080023b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023c4:	d101      	bne.n	80023ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <LL_ADC_Enable+0x24>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	f043 0201 	orr.w	r2, r3, #1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	7fffffc0 	.word	0x7fffffc0

08002400 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	4b05      	ldr	r3, [pc, #20]	@ (8002424 <LL_ADC_Disable+0x24>)
 800240e:	4013      	ands	r3, r2
 8002410:	f043 0202 	orr.w	r2, r3, #2
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	7fffffc0 	.word	0x7fffffc0

08002428 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <LL_ADC_IsEnabled+0x18>
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <LL_ADC_IsEnabled+0x1a>
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b02      	cmp	r3, #2
 8002460:	d101      	bne.n	8002466 <LL_ADC_IsDisableOngoing+0x18>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <LL_ADC_IsDisableOngoing+0x1a>
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <LL_ADC_REG_StartConversion+0x24>)
 8002482:	4013      	ands	r3, r2
 8002484:	f043 0204 	orr.w	r2, r3, #4
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	7fffffc0 	.word	0x7fffffc0

0800249c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d101      	bne.n	80024b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d101      	bne.n	80024da <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	b089      	sub	sp, #36	@ 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e1ee      	b.n	80028e0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800250c:	2b00      	cmp	r3, #0
 800250e:	d109      	bne.n	8002524 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7fe ff4d 	bl	80013b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff19 	bl	8002360 <LL_ADC_IsDeepPowerDownEnabled>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d004      	beq.n	800253e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff feff 	bl	800233c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff ff34 	bl	80023b0 <LL_ADC_IsInternalRegulatorEnabled>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d114      	bne.n	8002578 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff ff18 	bl	8002388 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002558:	4b8e      	ldr	r3, [pc, #568]	@ (8002794 <HAL_ADC_Init+0x2ac>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	099b      	lsrs	r3, r3, #6
 800255e:	4a8e      	ldr	r2, [pc, #568]	@ (8002798 <HAL_ADC_Init+0x2b0>)
 8002560:	fba2 2303 	umull	r2, r3, r2, r3
 8002564:	099b      	lsrs	r3, r3, #6
 8002566:	3301      	adds	r3, #1
 8002568:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800256a:	e002      	b.n	8002572 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	3b01      	subs	r3, #1
 8002570:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f9      	bne.n	800256c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff17 	bl	80023b0 <LL_ADC_IsInternalRegulatorEnabled>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10d      	bne.n	80025a4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800258c:	f043 0210 	orr.w	r2, r3, #16
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002598:	f043 0201 	orr.w	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff77 	bl	800249c <LL_ADC_REG_IsConversionOngoing>
 80025ae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b4:	f003 0310 	and.w	r3, r3, #16
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f040 8188 	bne.w	80028ce <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f040 8184 	bne.w	80028ce <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ca:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80025ce:	f043 0202 	orr.w	r2, r3, #2
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff ff24 	bl	8002428 <LL_ADC_IsEnabled>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d136      	bne.n	8002654 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a6c      	ldr	r2, [pc, #432]	@ (800279c <HAL_ADC_Init+0x2b4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d004      	beq.n	80025fa <HAL_ADC_Init+0x112>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a6a      	ldr	r2, [pc, #424]	@ (80027a0 <HAL_ADC_Init+0x2b8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d10e      	bne.n	8002618 <HAL_ADC_Init+0x130>
 80025fa:	4868      	ldr	r0, [pc, #416]	@ (800279c <HAL_ADC_Init+0x2b4>)
 80025fc:	f7ff ff14 	bl	8002428 <LL_ADC_IsEnabled>
 8002600:	4604      	mov	r4, r0
 8002602:	4867      	ldr	r0, [pc, #412]	@ (80027a0 <HAL_ADC_Init+0x2b8>)
 8002604:	f7ff ff10 	bl	8002428 <LL_ADC_IsEnabled>
 8002608:	4603      	mov	r3, r0
 800260a:	4323      	orrs	r3, r4
 800260c:	2b00      	cmp	r3, #0
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	e008      	b.n	800262a <HAL_ADC_Init+0x142>
 8002618:	4862      	ldr	r0, [pc, #392]	@ (80027a4 <HAL_ADC_Init+0x2bc>)
 800261a:	f7ff ff05 	bl	8002428 <LL_ADC_IsEnabled>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf0c      	ite	eq
 8002624:	2301      	moveq	r3, #1
 8002626:	2300      	movne	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d012      	beq.n	8002654 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a5a      	ldr	r2, [pc, #360]	@ (800279c <HAL_ADC_Init+0x2b4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d004      	beq.n	8002642 <HAL_ADC_Init+0x15a>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a58      	ldr	r2, [pc, #352]	@ (80027a0 <HAL_ADC_Init+0x2b8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d101      	bne.n	8002646 <HAL_ADC_Init+0x15e>
 8002642:	4a59      	ldr	r2, [pc, #356]	@ (80027a8 <HAL_ADC_Init+0x2c0>)
 8002644:	e000      	b.n	8002648 <HAL_ADC_Init+0x160>
 8002646:	4a59      	ldr	r2, [pc, #356]	@ (80027ac <HAL_ADC_Init+0x2c4>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4619      	mov	r1, r3
 800264e:	4610      	mov	r0, r2
 8002650:	f7ff fc58 	bl	8001f04 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a52      	ldr	r2, [pc, #328]	@ (80027a4 <HAL_ADC_Init+0x2bc>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d129      	bne.n	80026b2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	7e5b      	ldrb	r3, [r3, #25]
 8002662:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002668:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800266e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b08      	cmp	r3, #8
 8002676:	d013      	beq.n	80026a0 <HAL_ADC_Init+0x1b8>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b0c      	cmp	r3, #12
 800267e:	d00d      	beq.n	800269c <HAL_ADC_Init+0x1b4>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b1c      	cmp	r3, #28
 8002686:	d007      	beq.n	8002698 <HAL_ADC_Init+0x1b0>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b18      	cmp	r3, #24
 800268e:	d101      	bne.n	8002694 <HAL_ADC_Init+0x1ac>
 8002690:	2318      	movs	r3, #24
 8002692:	e006      	b.n	80026a2 <HAL_ADC_Init+0x1ba>
 8002694:	2300      	movs	r3, #0
 8002696:	e004      	b.n	80026a2 <HAL_ADC_Init+0x1ba>
 8002698:	2310      	movs	r3, #16
 800269a:	e002      	b.n	80026a2 <HAL_ADC_Init+0x1ba>
 800269c:	2308      	movs	r3, #8
 800269e:	e000      	b.n	80026a2 <HAL_ADC_Init+0x1ba>
 80026a0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80026a2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026aa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	e00e      	b.n	80026d0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	7e5b      	ldrb	r3, [r3, #25]
 80026b6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026bc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80026c2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d106      	bne.n	80026e8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026de:	3b01      	subs	r3, #1
 80026e0:	045b      	lsls	r3, r3, #17
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d009      	beq.n	8002704 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a26      	ldr	r2, [pc, #152]	@ (80027a4 <HAL_ADC_Init+0x2bc>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d115      	bne.n	800273a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	4b26      	ldr	r3, [pc, #152]	@ (80027b0 <HAL_ADC_Init+0x2c8>)
 8002716:	4013      	ands	r3, r2
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	69b9      	ldr	r1, [r7, #24]
 800271e:	430b      	orrs	r3, r1
 8002720:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	611a      	str	r2, [r3, #16]
 8002738:	e009      	b.n	800274e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	4b1c      	ldr	r3, [pc, #112]	@ (80027b4 <HAL_ADC_Init+0x2cc>)
 8002742:	4013      	ands	r3, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	69b9      	ldr	r1, [r7, #24]
 800274a:	430b      	orrs	r3, r1
 800274c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fea2 	bl	800249c <LL_ADC_REG_IsConversionOngoing>
 8002758:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff feaf 	bl	80024c2 <LL_ADC_INJ_IsConversionOngoing>
 8002764:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	2b00      	cmp	r3, #0
 800276a:	f040 808e 	bne.w	800288a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	f040 808a 	bne.w	800288a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a0a      	ldr	r2, [pc, #40]	@ (80027a4 <HAL_ADC_Init+0x2bc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d11b      	bne.n	80027b8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	7e1b      	ldrb	r3, [r3, #24]
 8002784:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800278c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
 8002792:	e018      	b.n	80027c6 <HAL_ADC_Init+0x2de>
 8002794:	24000004 	.word	0x24000004
 8002798:	053e2d63 	.word	0x053e2d63
 800279c:	40022000 	.word	0x40022000
 80027a0:	40022100 	.word	0x40022100
 80027a4:	58026000 	.word	0x58026000
 80027a8:	40022300 	.word	0x40022300
 80027ac:	58026300 	.word	0x58026300
 80027b0:	fff04007 	.word	0xfff04007
 80027b4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	7e1b      	ldrb	r3, [r3, #24]
 80027bc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	4b46      	ldr	r3, [pc, #280]	@ (80028e8 <HAL_ADC_Init+0x400>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	69b9      	ldr	r1, [r7, #24]
 80027d6:	430b      	orrs	r3, r1
 80027d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d137      	bne.n	8002854 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a3f      	ldr	r2, [pc, #252]	@ (80028ec <HAL_ADC_Init+0x404>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d116      	bne.n	8002822 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	4b3d      	ldr	r3, [pc, #244]	@ (80028f0 <HAL_ADC_Init+0x408>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002806:	4311      	orrs	r1, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800280c:	4311      	orrs	r1, r2
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002812:	430a      	orrs	r2, r1
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	611a      	str	r2, [r3, #16]
 8002820:	e020      	b.n	8002864 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	4b32      	ldr	r3, [pc, #200]	@ (80028f4 <HAL_ADC_Init+0x40c>)
 800282a:	4013      	ands	r3, r2
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002830:	3a01      	subs	r2, #1
 8002832:	0411      	lsls	r1, r2, #16
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002838:	4311      	orrs	r1, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800283e:	4311      	orrs	r1, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002844:	430a      	orrs	r2, r1
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	611a      	str	r2, [r3, #16]
 8002852:	e007      	b.n	8002864 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a1b      	ldr	r2, [pc, #108]	@ (80028ec <HAL_ADC_Init+0x404>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d002      	beq.n	800288a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 ffcb 	bl	8003820 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d10c      	bne.n	80028ac <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002898:	f023 010f 	bic.w	r1, r3, #15
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	1e5a      	subs	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80028aa:	e007      	b.n	80028bc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 020f 	bic.w	r2, r2, #15
 80028ba:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028c0:	f023 0303 	bic.w	r3, r3, #3
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	661a      	str	r2, [r3, #96]	@ 0x60
 80028cc:	e007      	b.n	80028de <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d2:	f043 0210 	orr.w	r2, r3, #16
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028de:	7ffb      	ldrb	r3, [r7, #31]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3724      	adds	r7, #36	@ 0x24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd90      	pop	{r4, r7, pc}
 80028e8:	ffffbffc 	.word	0xffffbffc
 80028ec:	58026000 	.word	0x58026000
 80028f0:	fc00f81f 	.word	0xfc00f81f
 80028f4:	fc00f81e 	.word	0xfc00f81e

080028f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a60      	ldr	r2, [pc, #384]	@ (8002a8c <HAL_ADC_Start_DMA+0x194>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d004      	beq.n	8002918 <HAL_ADC_Start_DMA+0x20>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a5f      	ldr	r2, [pc, #380]	@ (8002a90 <HAL_ADC_Start_DMA+0x198>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d101      	bne.n	800291c <HAL_ADC_Start_DMA+0x24>
 8002918:	4b5e      	ldr	r3, [pc, #376]	@ (8002a94 <HAL_ADC_Start_DMA+0x19c>)
 800291a:	e000      	b.n	800291e <HAL_ADC_Start_DMA+0x26>
 800291c:	4b5e      	ldr	r3, [pc, #376]	@ (8002a98 <HAL_ADC_Start_DMA+0x1a0>)
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fcfe 	bl	8002320 <LL_ADC_GetMultimode>
 8002924:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fdb6 	bl	800249c <LL_ADC_REG_IsConversionOngoing>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	f040 80a2 	bne.w	8002a7c <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_ADC_Start_DMA+0x4e>
 8002942:	2302      	movs	r3, #2
 8002944:	e09d      	b.n	8002a82 <HAL_ADC_Start_DMA+0x18a>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d006      	beq.n	8002962 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	2b05      	cmp	r3, #5
 8002958:	d003      	beq.n	8002962 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	2b09      	cmp	r3, #9
 800295e:	f040 8086 	bne.w	8002a6e <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 fdde 	bl	8003524 <ADC_Enable>
 8002968:	4603      	mov	r3, r0
 800296a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d178      	bne.n	8002a64 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002976:	4b49      	ldr	r3, [pc, #292]	@ (8002a9c <HAL_ADC_Start_DMA+0x1a4>)
 8002978:	4013      	ands	r3, r2
 800297a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a42      	ldr	r2, [pc, #264]	@ (8002a90 <HAL_ADC_Start_DMA+0x198>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d002      	beq.n	8002992 <HAL_ADC_Start_DMA+0x9a>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	e000      	b.n	8002994 <HAL_ADC_Start_DMA+0x9c>
 8002992:	4b3e      	ldr	r3, [pc, #248]	@ (8002a8c <HAL_ADC_Start_DMA+0x194>)
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	4293      	cmp	r3, r2
 800299a:	d002      	beq.n	80029a2 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d105      	bne.n	80029ae <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d006      	beq.n	80029c8 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029be:	f023 0206 	bic.w	r2, r3, #6
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	665a      	str	r2, [r3, #100]	@ 0x64
 80029c6:	e002      	b.n	80029ce <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d2:	4a33      	ldr	r2, [pc, #204]	@ (8002aa0 <HAL_ADC_Start_DMA+0x1a8>)
 80029d4:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029da:	4a32      	ldr	r2, [pc, #200]	@ (8002aa4 <HAL_ADC_Start_DMA+0x1ac>)
 80029dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e2:	4a31      	ldr	r2, [pc, #196]	@ (8002aa8 <HAL_ADC_Start_DMA+0x1b0>)
 80029e4:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	221c      	movs	r2, #28
 80029ec:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0210 	orr.w	r2, r2, #16
 8002a04:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a28      	ldr	r2, [pc, #160]	@ (8002aac <HAL_ADC_Start_DMA+0x1b4>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d10f      	bne.n	8002a30 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	f7ff fbf8 	bl	8002214 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fbe3 	bl	80021f4 <LL_ADC_EnableDMAReq>
 8002a2e:	e007      	b.n	8002a40 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	f7ff fbc7 	bl	80021ce <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	3340      	adds	r3, #64	@ 0x40
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f002 f8b4 	bl	8004bbc <HAL_DMA_Start_IT>
 8002a54:	4603      	mov	r3, r0
 8002a56:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fd09 	bl	8002474 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002a62:	e00d      	b.n	8002a80 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8002a6c:	e008      	b.n	8002a80 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8002a7a:	e001      	b.n	8002a80 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40022000 	.word	0x40022000
 8002a90:	40022100 	.word	0x40022100
 8002a94:	40022300 	.word	0x40022300
 8002a98:	58026300 	.word	0x58026300
 8002a9c:	fffff0fe 	.word	0xfffff0fe
 8002aa0:	080036f7 	.word	0x080036f7
 8002aa4:	080037cf 	.word	0x080037cf
 8002aa8:	080037eb 	.word	0x080037eb
 8002aac:	58026000 	.word	0x58026000

08002ab0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ac4:	b590      	push	{r4, r7, lr}
 8002ac6:	b0b9      	sub	sp, #228	@ 0xe4
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ade:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4aab      	ldr	r2, [pc, #684]	@ (8002d94 <HAL_ADC_ConfigChannel+0x2d0>)
 8002ae6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d102      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x34>
 8002af2:	2302      	movs	r3, #2
 8002af4:	f000 bcfe 	b.w	80034f4 <HAL_ADC_ConfigChannel+0xa30>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fcc9 	bl	800249c <LL_ADC_REG_IsConversionOngoing>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f040 84e2 	bne.w	80034d6 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	db38      	blt.n	8002b8c <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a9e      	ldr	r2, [pc, #632]	@ (8002d98 <HAL_ADC_ConfigChannel+0x2d4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d033      	beq.n	8002b8c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d108      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x7e>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	0e9b      	lsrs	r3, r3, #26
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	e01d      	b.n	8002b7e <HAL_ADC_ConfigChannel+0xba>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8002b66:	2320      	movs	r3, #32
 8002b68:	e004      	b.n	8002b74 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8002b6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	f003 031f 	and.w	r3, r3, #31
 8002b78:	2201      	movs	r2, #1
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	69d1      	ldr	r1, [r2, #28]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f7ff faec 	bl	8002176 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fc7a 	bl	800249c <LL_ADC_REG_IsConversionOngoing>
 8002ba8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff fc86 	bl	80024c2 <LL_ADC_INJ_IsConversionOngoing>
 8002bb6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f040 8270 	bne.w	80030a4 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bc4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f040 826b 	bne.w	80030a4 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6819      	ldr	r1, [r3, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f7ff fb34 	bl	8002248 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a6c      	ldr	r2, [pc, #432]	@ (8002d98 <HAL_ADC_ConfigChannel+0x2d4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10d      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	695a      	ldr	r2, [r3, #20]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	08db      	lsrs	r3, r3, #3
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c04:	e032      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c06:	4b65      	ldr	r3, [pc, #404]	@ (8002d9c <HAL_ADC_ConfigChannel+0x2d8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002c0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c12:	d10b      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x168>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	695a      	ldr	r2, [r3, #20]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	089b      	lsrs	r3, r3, #2
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	e01d      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x1a4>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10b      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x18e>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	695a      	ldr	r2, [r3, #20]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	089b      	lsrs	r3, r3, #2
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	e00a      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x1a4>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	089b      	lsrs	r3, r3, #2
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d048      	beq.n	8002d06 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	6919      	ldr	r1, [r3, #16]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c84:	f7ff f972 	bl	8001f6c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a42      	ldr	r2, [pc, #264]	@ (8002d98 <HAL_ADC_ConfigChannel+0x2d4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d119      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	6919      	ldr	r1, [r3, #16]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f7ff fa0a 	bl	80020b8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	6919      	ldr	r1, [r3, #16]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d102      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x1f8>
 8002cb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cba:	e000      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x1fa>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f7ff f9d8 	bl	8002074 <LL_ADC_SetOffsetSaturation>
 8002cc4:	e1ee      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6919      	ldr	r1, [r3, #16]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d102      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x21a>
 8002cd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002cdc:	e000      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x21c>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	f7ff f9a5 	bl	8002030 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	6919      	ldr	r1, [r3, #16]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	7e1b      	ldrb	r3, [r3, #24]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d102      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x238>
 8002cf6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002cfa:	e000      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x23a>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f7ff f97c 	bl	8001ffc <LL_ADC_SetDataRightShift>
 8002d04:	e1ce      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a23      	ldr	r2, [pc, #140]	@ (8002d98 <HAL_ADC_ConfigChannel+0x2d4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	f040 8181 	bne.w	8003014 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2100      	movs	r1, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff f959 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x27a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff f94e 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 8002d34:	4603      	mov	r3, r0
 8002d36:	0e9b      	lsrs	r3, r3, #26
 8002d38:	f003 021f 	and.w	r2, r3, #31
 8002d3c:	e01e      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x2b8>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2100      	movs	r1, #0
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff f943 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8002d5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002d64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8002d6c:	2320      	movs	r3, #32
 8002d6e:	e004      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8002d70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d74:	fab3 f383 	clz	r3, r3
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10b      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x2dc>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	0e9b      	lsrs	r3, r3, #26
 8002d8e:	f003 031f 	and.w	r3, r3, #31
 8002d92:	e01e      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x30e>
 8002d94:	47ff0000 	.word	0x47ff0000
 8002d98:	58026000 	.word	0x58026000
 8002d9c:	5c001000 	.word	0x5c001000
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002db4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002db8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002dbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8002dc4:	2320      	movs	r3, #32
 8002dc6:	e004      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8002dc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002dcc:	fab3 f383 	clz	r3, r3
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d106      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff f98c 	bl	80020fc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2101      	movs	r1, #1
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff f8f0 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10a      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x34c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2101      	movs	r1, #1
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff f8e5 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 8002e06:	4603      	mov	r3, r0
 8002e08:	0e9b      	lsrs	r3, r3, #26
 8002e0a:	f003 021f 	and.w	r2, r3, #31
 8002e0e:	e01e      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x38a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2101      	movs	r1, #1
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff f8da 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002e2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002e36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002e3e:	2320      	movs	r3, #32
 8002e40:	e004      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8002e42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e46:	fab3 f383 	clz	r3, r3
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d105      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x3a2>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	0e9b      	lsrs	r3, r3, #26
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	e018      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x3d4>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002e7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e7e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002e82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8002e8a:	2320      	movs	r3, #32
 8002e8c:	e004      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8002e8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d106      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff f929 	bl	80020fc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2102      	movs	r1, #2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff f88d 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x412>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff f882 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	0e9b      	lsrs	r3, r3, #26
 8002ed0:	f003 021f 	and.w	r2, r3, #31
 8002ed4:	e01e      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x450>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2102      	movs	r1, #2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff f877 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ef8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8002f04:	2320      	movs	r3, #32
 8002f06:	e004      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8002f08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f0c:	fab3 f383 	clz	r3, r3
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	461a      	mov	r2, r3
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d105      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x468>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	0e9b      	lsrs	r3, r3, #26
 8002f26:	f003 031f 	and.w	r3, r3, #31
 8002f2a:	e014      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x492>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002f3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002f40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002f48:	2320      	movs	r3, #32
 8002f4a:	e004      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002f4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f50:	fab3 f383 	clz	r3, r3
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d106      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2102      	movs	r1, #2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff f8ca 	bl	80020fc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2103      	movs	r1, #3
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff f82e 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10a      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x4d0>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2103      	movs	r1, #3
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff f823 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	0e9b      	lsrs	r3, r3, #26
 8002f8e:	f003 021f 	and.w	r2, r3, #31
 8002f92:	e017      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x500>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2103      	movs	r1, #3
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff f818 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002fac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fae:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002fb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8002fb6:	2320      	movs	r3, #32
 8002fb8:	e003      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8002fba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fbc:	fab3 f383 	clz	r3, r3
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d105      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x518>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	0e9b      	lsrs	r3, r3, #26
 8002fd6:	f003 031f 	and.w	r3, r3, #31
 8002fda:	e011      	b.n	8003000 <HAL_ADC_ConfigChannel+0x53c>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002fea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fec:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002fee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8002ff4:	2320      	movs	r3, #32
 8002ff6:	e003      	b.n	8003000 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8002ff8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	429a      	cmp	r2, r3
 8003002:	d14f      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2200      	movs	r2, #0
 800300a:	2103      	movs	r1, #3
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff f875 	bl	80020fc <LL_ADC_SetOffsetState>
 8003012:	e047      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800301a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	069b      	lsls	r3, r3, #26
 8003024:	429a      	cmp	r2, r3
 8003026:	d107      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003036:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800303e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	069b      	lsls	r3, r3, #26
 8003048:	429a      	cmp	r2, r3
 800304a:	d107      	bne.n	800305c <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800305a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003062:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	069b      	lsls	r3, r3, #26
 800306c:	429a      	cmp	r2, r3
 800306e:	d107      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800307e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003086:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	069b      	lsls	r3, r3, #26
 8003090:	429a      	cmp	r2, r3
 8003092:	d107      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030a2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f9bd 	bl	8002428 <LL_ADC_IsEnabled>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f040 8219 	bne.w	80034e8 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6819      	ldr	r1, [r3, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	461a      	mov	r2, r3
 80030c4:	f7ff f8ec 	bl	80022a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4aa1      	ldr	r2, [pc, #644]	@ (8003354 <HAL_ADC_ConfigChannel+0x890>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	f040 812e 	bne.w	8003330 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10b      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x638>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	0e9b      	lsrs	r3, r3, #26
 80030ea:	3301      	adds	r3, #1
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	2b09      	cmp	r3, #9
 80030f2:	bf94      	ite	ls
 80030f4:	2301      	movls	r3, #1
 80030f6:	2300      	movhi	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	e019      	b.n	8003130 <HAL_ADC_ConfigChannel+0x66c>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003104:	fa93 f3a3 	rbit	r3, r3
 8003108:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800310a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800310c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800310e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003114:	2320      	movs	r3, #32
 8003116:	e003      	b.n	8003120 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003118:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800311a:	fab3 f383 	clz	r3, r3
 800311e:	b2db      	uxtb	r3, r3
 8003120:	3301      	adds	r3, #1
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	2b09      	cmp	r3, #9
 8003128:	bf94      	ite	ls
 800312a:	2301      	movls	r3, #1
 800312c:	2300      	movhi	r3, #0
 800312e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003130:	2b00      	cmp	r3, #0
 8003132:	d079      	beq.n	8003228 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800313c:	2b00      	cmp	r3, #0
 800313e:	d107      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x68c>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	0e9b      	lsrs	r3, r3, #26
 8003146:	3301      	adds	r3, #1
 8003148:	069b      	lsls	r3, r3, #26
 800314a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800314e:	e015      	b.n	800317c <HAL_ADC_ConfigChannel+0x6b8>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003158:	fa93 f3a3 	rbit	r3, r3
 800315c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800315e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003160:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8003168:	2320      	movs	r3, #32
 800316a:	e003      	b.n	8003174 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 800316c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800316e:	fab3 f383 	clz	r3, r3
 8003172:	b2db      	uxtb	r3, r3
 8003174:	3301      	adds	r3, #1
 8003176:	069b      	lsls	r3, r3, #26
 8003178:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003184:	2b00      	cmp	r3, #0
 8003186:	d109      	bne.n	800319c <HAL_ADC_ConfigChannel+0x6d8>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	0e9b      	lsrs	r3, r3, #26
 800318e:	3301      	adds	r3, #1
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	2101      	movs	r1, #1
 8003196:	fa01 f303 	lsl.w	r3, r1, r3
 800319a:	e017      	b.n	80031cc <HAL_ADC_ConfigChannel+0x708>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031a4:	fa93 f3a3 	rbit	r3, r3
 80031a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80031aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ac:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80031ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80031b4:	2320      	movs	r3, #32
 80031b6:	e003      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80031b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ba:	fab3 f383 	clz	r3, r3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	3301      	adds	r3, #1
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	2101      	movs	r1, #1
 80031c8:	fa01 f303 	lsl.w	r3, r1, r3
 80031cc:	ea42 0103 	orr.w	r1, r2, r3
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10a      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x72e>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	0e9b      	lsrs	r3, r3, #26
 80031e2:	3301      	adds	r3, #1
 80031e4:	f003 021f 	and.w	r2, r3, #31
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	051b      	lsls	r3, r3, #20
 80031f0:	e018      	b.n	8003224 <HAL_ADC_ConfigChannel+0x760>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003202:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800320a:	2320      	movs	r3, #32
 800320c:	e003      	b.n	8003216 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800320e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003210:	fab3 f383 	clz	r3, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	3301      	adds	r3, #1
 8003218:	f003 021f 	and.w	r2, r3, #31
 800321c:	4613      	mov	r3, r2
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	4413      	add	r3, r2
 8003222:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003224:	430b      	orrs	r3, r1
 8003226:	e07e      	b.n	8003326 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003230:	2b00      	cmp	r3, #0
 8003232:	d107      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x780>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	0e9b      	lsrs	r3, r3, #26
 800323a:	3301      	adds	r3, #1
 800323c:	069b      	lsls	r3, r3, #26
 800323e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003242:	e015      	b.n	8003270 <HAL_ADC_ConfigChannel+0x7ac>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324c:	fa93 f3a3 	rbit	r3, r3
 8003250:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 800325c:	2320      	movs	r3, #32
 800325e:	e003      	b.n	8003268 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8003260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003262:	fab3 f383 	clz	r3, r3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	3301      	adds	r3, #1
 800326a:	069b      	lsls	r3, r3, #26
 800326c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003278:	2b00      	cmp	r3, #0
 800327a:	d109      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x7cc>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	0e9b      	lsrs	r3, r3, #26
 8003282:	3301      	adds	r3, #1
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	2101      	movs	r1, #1
 800328a:	fa01 f303 	lsl.w	r3, r1, r3
 800328e:	e017      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x7fc>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	fa93 f3a3 	rbit	r3, r3
 800329c:	61bb      	str	r3, [r7, #24]
  return result;
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80032a8:	2320      	movs	r3, #32
 80032aa:	e003      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	3301      	adds	r3, #1
 80032b6:	f003 031f 	and.w	r3, r3, #31
 80032ba:	2101      	movs	r1, #1
 80032bc:	fa01 f303 	lsl.w	r3, r1, r3
 80032c0:	ea42 0103 	orr.w	r1, r2, r3
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10d      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x828>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	0e9b      	lsrs	r3, r3, #26
 80032d6:	3301      	adds	r3, #1
 80032d8:	f003 021f 	and.w	r2, r3, #31
 80032dc:	4613      	mov	r3, r2
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	4413      	add	r3, r2
 80032e2:	3b1e      	subs	r3, #30
 80032e4:	051b      	lsls	r3, r3, #20
 80032e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032ea:	e01b      	b.n	8003324 <HAL_ADC_ConfigChannel+0x860>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	fa93 f3a3 	rbit	r3, r3
 80032f8:	60fb      	str	r3, [r7, #12]
  return result;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8003304:	2320      	movs	r3, #32
 8003306:	e003      	b.n	8003310 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	fab3 f383 	clz	r3, r3
 800330e:	b2db      	uxtb	r3, r3
 8003310:	3301      	adds	r3, #1
 8003312:	f003 021f 	and.w	r2, r3, #31
 8003316:	4613      	mov	r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	4413      	add	r3, r2
 800331c:	3b1e      	subs	r3, #30
 800331e:	051b      	lsls	r3, r3, #20
 8003320:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003324:	430b      	orrs	r3, r1
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	6892      	ldr	r2, [r2, #8]
 800332a:	4619      	mov	r1, r3
 800332c:	f7fe ff8c 	bl	8002248 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	f280 80d7 	bge.w	80034e8 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a06      	ldr	r2, [pc, #24]	@ (8003358 <HAL_ADC_ConfigChannel+0x894>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d004      	beq.n	800334e <HAL_ADC_ConfigChannel+0x88a>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a04      	ldr	r2, [pc, #16]	@ (800335c <HAL_ADC_ConfigChannel+0x898>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d10a      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x8a0>
 800334e:	4b04      	ldr	r3, [pc, #16]	@ (8003360 <HAL_ADC_ConfigChannel+0x89c>)
 8003350:	e009      	b.n	8003366 <HAL_ADC_ConfigChannel+0x8a2>
 8003352:	bf00      	nop
 8003354:	47ff0000 	.word	0x47ff0000
 8003358:	40022000 	.word	0x40022000
 800335c:	40022100 	.word	0x40022100
 8003360:	40022300 	.word	0x40022300
 8003364:	4b65      	ldr	r3, [pc, #404]	@ (80034fc <HAL_ADC_ConfigChannel+0xa38>)
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe fdf2 	bl	8001f50 <LL_ADC_GetCommonPathInternalCh>
 800336c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a62      	ldr	r2, [pc, #392]	@ (8003500 <HAL_ADC_ConfigChannel+0xa3c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d004      	beq.n	8003384 <HAL_ADC_ConfigChannel+0x8c0>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a61      	ldr	r2, [pc, #388]	@ (8003504 <HAL_ADC_ConfigChannel+0xa40>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d10e      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x8de>
 8003384:	485e      	ldr	r0, [pc, #376]	@ (8003500 <HAL_ADC_ConfigChannel+0xa3c>)
 8003386:	f7ff f84f 	bl	8002428 <LL_ADC_IsEnabled>
 800338a:	4604      	mov	r4, r0
 800338c:	485d      	ldr	r0, [pc, #372]	@ (8003504 <HAL_ADC_ConfigChannel+0xa40>)
 800338e:	f7ff f84b 	bl	8002428 <LL_ADC_IsEnabled>
 8003392:	4603      	mov	r3, r0
 8003394:	4323      	orrs	r3, r4
 8003396:	2b00      	cmp	r3, #0
 8003398:	bf0c      	ite	eq
 800339a:	2301      	moveq	r3, #1
 800339c:	2300      	movne	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	e008      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x8f0>
 80033a2:	4859      	ldr	r0, [pc, #356]	@ (8003508 <HAL_ADC_ConfigChannel+0xa44>)
 80033a4:	f7ff f840 	bl	8002428 <LL_ADC_IsEnabled>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	bf0c      	ite	eq
 80033ae:	2301      	moveq	r3, #1
 80033b0:	2300      	movne	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 8084 	beq.w	80034c2 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a53      	ldr	r2, [pc, #332]	@ (800350c <HAL_ADC_ConfigChannel+0xa48>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d132      	bne.n	800342a <HAL_ADC_ConfigChannel+0x966>
 80033c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d12c      	bne.n	800342a <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a4c      	ldr	r2, [pc, #304]	@ (8003508 <HAL_ADC_ConfigChannel+0xa44>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	f040 8086 	bne.w	80034e8 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a47      	ldr	r2, [pc, #284]	@ (8003500 <HAL_ADC_ConfigChannel+0xa3c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d004      	beq.n	80033f0 <HAL_ADC_ConfigChannel+0x92c>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a46      	ldr	r2, [pc, #280]	@ (8003504 <HAL_ADC_ConfigChannel+0xa40>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d101      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x930>
 80033f0:	4a47      	ldr	r2, [pc, #284]	@ (8003510 <HAL_ADC_ConfigChannel+0xa4c>)
 80033f2:	e000      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x932>
 80033f4:	4a41      	ldr	r2, [pc, #260]	@ (80034fc <HAL_ADC_ConfigChannel+0xa38>)
 80033f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033fe:	4619      	mov	r1, r3
 8003400:	4610      	mov	r0, r2
 8003402:	f7fe fd92 	bl	8001f2a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003406:	4b43      	ldr	r3, [pc, #268]	@ (8003514 <HAL_ADC_ConfigChannel+0xa50>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	099b      	lsrs	r3, r3, #6
 800340c:	4a42      	ldr	r2, [pc, #264]	@ (8003518 <HAL_ADC_ConfigChannel+0xa54>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	099b      	lsrs	r3, r3, #6
 8003414:	3301      	adds	r3, #1
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800341a:	e002      	b.n	8003422 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	3b01      	subs	r3, #1
 8003420:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f9      	bne.n	800341c <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003428:	e05e      	b.n	80034e8 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a3b      	ldr	r2, [pc, #236]	@ (800351c <HAL_ADC_ConfigChannel+0xa58>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d120      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x9b2>
 8003434:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003438:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d11a      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a30      	ldr	r2, [pc, #192]	@ (8003508 <HAL_ADC_ConfigChannel+0xa44>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d14e      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a2c      	ldr	r2, [pc, #176]	@ (8003500 <HAL_ADC_ConfigChannel+0xa3c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d004      	beq.n	800345e <HAL_ADC_ConfigChannel+0x99a>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a2a      	ldr	r2, [pc, #168]	@ (8003504 <HAL_ADC_ConfigChannel+0xa40>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x99e>
 800345e:	4a2c      	ldr	r2, [pc, #176]	@ (8003510 <HAL_ADC_ConfigChannel+0xa4c>)
 8003460:	e000      	b.n	8003464 <HAL_ADC_ConfigChannel+0x9a0>
 8003462:	4a26      	ldr	r2, [pc, #152]	@ (80034fc <HAL_ADC_ConfigChannel+0xa38>)
 8003464:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003468:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800346c:	4619      	mov	r1, r3
 800346e:	4610      	mov	r0, r2
 8003470:	f7fe fd5b 	bl	8001f2a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003474:	e038      	b.n	80034e8 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a29      	ldr	r2, [pc, #164]	@ (8003520 <HAL_ADC_ConfigChannel+0xa5c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d133      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0xa24>
 8003480:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003484:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d12d      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1d      	ldr	r2, [pc, #116]	@ (8003508 <HAL_ADC_ConfigChannel+0xa44>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d128      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a19      	ldr	r2, [pc, #100]	@ (8003500 <HAL_ADC_ConfigChannel+0xa3c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d004      	beq.n	80034aa <HAL_ADC_ConfigChannel+0x9e6>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a17      	ldr	r2, [pc, #92]	@ (8003504 <HAL_ADC_ConfigChannel+0xa40>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x9ea>
 80034aa:	4a19      	ldr	r2, [pc, #100]	@ (8003510 <HAL_ADC_ConfigChannel+0xa4c>)
 80034ac:	e000      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x9ec>
 80034ae:	4a13      	ldr	r2, [pc, #76]	@ (80034fc <HAL_ADC_ConfigChannel+0xa38>)
 80034b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034b8:	4619      	mov	r1, r3
 80034ba:	4610      	mov	r0, r2
 80034bc:	f7fe fd35 	bl	8001f2a <LL_ADC_SetCommonPathInternalCh>
 80034c0:	e012      	b.n	80034e8 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034c6:	f043 0220 	orr.w	r2, r3, #32
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80034d4:	e008      	b.n	80034e8 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034da:	f043 0220 	orr.w	r2, r3, #32
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80034f0:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	37e4      	adds	r7, #228	@ 0xe4
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd90      	pop	{r4, r7, pc}
 80034fc:	58026300 	.word	0x58026300
 8003500:	40022000 	.word	0x40022000
 8003504:	40022100 	.word	0x40022100
 8003508:	58026000 	.word	0x58026000
 800350c:	c7520000 	.word	0xc7520000
 8003510:	40022300 	.word	0x40022300
 8003514:	24000004 	.word	0x24000004
 8003518:	053e2d63 	.word	0x053e2d63
 800351c:	c3210000 	.word	0xc3210000
 8003520:	cb840000 	.word	0xcb840000

08003524 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f7fe ff79 	bl	8002428 <LL_ADC_IsEnabled>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d16e      	bne.n	800361a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	4b38      	ldr	r3, [pc, #224]	@ (8003624 <ADC_Enable+0x100>)
 8003544:	4013      	ands	r3, r2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00d      	beq.n	8003566 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354e:	f043 0210 	orr.w	r2, r3, #16
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800355a:	f043 0201 	orr.w	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e05a      	b.n	800361c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe ff34 	bl	80023d8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003570:	f7fe fc36 	bl	8001de0 <HAL_GetTick>
 8003574:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2b      	ldr	r2, [pc, #172]	@ (8003628 <ADC_Enable+0x104>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d004      	beq.n	800358a <ADC_Enable+0x66>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a29      	ldr	r2, [pc, #164]	@ (800362c <ADC_Enable+0x108>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d101      	bne.n	800358e <ADC_Enable+0x6a>
 800358a:	4b29      	ldr	r3, [pc, #164]	@ (8003630 <ADC_Enable+0x10c>)
 800358c:	e000      	b.n	8003590 <ADC_Enable+0x6c>
 800358e:	4b29      	ldr	r3, [pc, #164]	@ (8003634 <ADC_Enable+0x110>)
 8003590:	4618      	mov	r0, r3
 8003592:	f7fe fec5 	bl	8002320 <LL_ADC_GetMultimode>
 8003596:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a23      	ldr	r2, [pc, #140]	@ (800362c <ADC_Enable+0x108>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d002      	beq.n	80035a8 <ADC_Enable+0x84>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	e000      	b.n	80035aa <ADC_Enable+0x86>
 80035a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003628 <ADC_Enable+0x104>)
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6812      	ldr	r2, [r2, #0]
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d02c      	beq.n	800360c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d130      	bne.n	800361a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035b8:	e028      	b.n	800360c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe ff32 	bl	8002428 <LL_ADC_IsEnabled>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d104      	bne.n	80035d4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe ff02 	bl	80023d8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035d4:	f7fe fc04 	bl	8001de0 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d914      	bls.n	800360c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d00d      	beq.n	800360c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f4:	f043 0210 	orr.w	r2, r3, #16
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003600:	f043 0201 	orr.w	r2, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e007      	b.n	800361c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b01      	cmp	r3, #1
 8003618:	d1cf      	bne.n	80035ba <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	8000003f 	.word	0x8000003f
 8003628:	40022000 	.word	0x40022000
 800362c:	40022100 	.word	0x40022100
 8003630:	40022300 	.word	0x40022300
 8003634:	58026300 	.word	0x58026300

08003638 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f7fe ff02 	bl	800244e <LL_ADC_IsDisableOngoing>
 800364a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe fee9 	bl	8002428 <LL_ADC_IsEnabled>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d047      	beq.n	80036ec <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d144      	bne.n	80036ec <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 030d 	and.w	r3, r3, #13
 800366c:	2b01      	cmp	r3, #1
 800366e:	d10c      	bne.n	800368a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7fe fec3 	bl	8002400 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2203      	movs	r2, #3
 8003680:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003682:	f7fe fbad 	bl	8001de0 <HAL_GetTick>
 8003686:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003688:	e029      	b.n	80036de <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800368e:	f043 0210 	orr.w	r2, r3, #16
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800369a:	f043 0201 	orr.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e023      	b.n	80036ee <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036a6:	f7fe fb9b 	bl	8001de0 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d914      	bls.n	80036de <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00d      	beq.n	80036de <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c6:	f043 0210 	orr.w	r2, r3, #16
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036d2:	f043 0201 	orr.w	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e007      	b.n	80036ee <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1dc      	bne.n	80036a6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b084      	sub	sp, #16
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003702:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003708:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800370c:	2b00      	cmp	r3, #0
 800370e:	d14b      	bne.n	80037a8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003714:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d021      	beq.n	800376e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe fd0e 	bl	8002150 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d032      	beq.n	80037a0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d12b      	bne.n	80037a0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800374c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003758:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d11f      	bne.n	80037a0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003764:	f043 0201 	orr.w	r2, r3, #1
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	661a      	str	r2, [r3, #96]	@ 0x60
 800376c:	e018      	b.n	80037a0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d111      	bne.n	80037a0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003780:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d105      	bne.n	80037a0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003798:	f043 0201 	orr.w	r2, r3, #1
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f7fd fd17 	bl	80011d4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037a6:	e00e      	b.n	80037c6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f7ff f97b 	bl	8002ab0 <HAL_ADC_ErrorCallback>
}
 80037ba:	e004      	b.n	80037c6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	4798      	blx	r3
}
 80037c6:	bf00      	nop
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037da:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f7fd fcad 	bl	800113c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003808:	f043 0204 	orr.w	r2, r3, #4
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f7ff f94d 	bl	8002ab0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a6c      	ldr	r2, [pc, #432]	@ (80039e0 <ADC_ConfigureBoostMode+0x1c0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d004      	beq.n	800383c <ADC_ConfigureBoostMode+0x1c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a6b      	ldr	r2, [pc, #428]	@ (80039e4 <ADC_ConfigureBoostMode+0x1c4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d109      	bne.n	8003850 <ADC_ConfigureBoostMode+0x30>
 800383c:	4b6a      	ldr	r3, [pc, #424]	@ (80039e8 <ADC_ConfigureBoostMode+0x1c8>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf14      	ite	ne
 8003848:	2301      	movne	r3, #1
 800384a:	2300      	moveq	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	e008      	b.n	8003862 <ADC_ConfigureBoostMode+0x42>
 8003850:	4b66      	ldr	r3, [pc, #408]	@ (80039ec <ADC_ConfigureBoostMode+0x1cc>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003858:	2b00      	cmp	r3, #0
 800385a:	bf14      	ite	ne
 800385c:	2301      	movne	r3, #1
 800385e:	2300      	moveq	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d01c      	beq.n	80038a0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003866:	f004 f89f 	bl	80079a8 <HAL_RCC_GetHCLKFreq>
 800386a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003874:	d010      	beq.n	8003898 <ADC_ConfigureBoostMode+0x78>
 8003876:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800387a:	d873      	bhi.n	8003964 <ADC_ConfigureBoostMode+0x144>
 800387c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003880:	d002      	beq.n	8003888 <ADC_ConfigureBoostMode+0x68>
 8003882:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003886:	d16d      	bne.n	8003964 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	0c1b      	lsrs	r3, r3, #16
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	fbb2 f3f3 	udiv	r3, r2, r3
 8003894:	60fb      	str	r3, [r7, #12]
        break;
 8003896:	e068      	b.n	800396a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	089b      	lsrs	r3, r3, #2
 800389c:	60fb      	str	r3, [r7, #12]
        break;
 800389e:	e064      	b.n	800396a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80038a0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80038a4:	f04f 0100 	mov.w	r1, #0
 80038a8:	f005 fa7a 	bl	8008da0 <HAL_RCCEx_GetPeriphCLKFreq>
 80038ac:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80038b6:	d051      	beq.n	800395c <ADC_ConfigureBoostMode+0x13c>
 80038b8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80038bc:	d854      	bhi.n	8003968 <ADC_ConfigureBoostMode+0x148>
 80038be:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80038c2:	d047      	beq.n	8003954 <ADC_ConfigureBoostMode+0x134>
 80038c4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80038c8:	d84e      	bhi.n	8003968 <ADC_ConfigureBoostMode+0x148>
 80038ca:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80038ce:	d03d      	beq.n	800394c <ADC_ConfigureBoostMode+0x12c>
 80038d0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80038d4:	d848      	bhi.n	8003968 <ADC_ConfigureBoostMode+0x148>
 80038d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038da:	d033      	beq.n	8003944 <ADC_ConfigureBoostMode+0x124>
 80038dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038e0:	d842      	bhi.n	8003968 <ADC_ConfigureBoostMode+0x148>
 80038e2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80038e6:	d029      	beq.n	800393c <ADC_ConfigureBoostMode+0x11c>
 80038e8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80038ec:	d83c      	bhi.n	8003968 <ADC_ConfigureBoostMode+0x148>
 80038ee:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80038f2:	d01a      	beq.n	800392a <ADC_ConfigureBoostMode+0x10a>
 80038f4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80038f8:	d836      	bhi.n	8003968 <ADC_ConfigureBoostMode+0x148>
 80038fa:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80038fe:	d014      	beq.n	800392a <ADC_ConfigureBoostMode+0x10a>
 8003900:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003904:	d830      	bhi.n	8003968 <ADC_ConfigureBoostMode+0x148>
 8003906:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800390a:	d00e      	beq.n	800392a <ADC_ConfigureBoostMode+0x10a>
 800390c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003910:	d82a      	bhi.n	8003968 <ADC_ConfigureBoostMode+0x148>
 8003912:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003916:	d008      	beq.n	800392a <ADC_ConfigureBoostMode+0x10a>
 8003918:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800391c:	d824      	bhi.n	8003968 <ADC_ConfigureBoostMode+0x148>
 800391e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003922:	d002      	beq.n	800392a <ADC_ConfigureBoostMode+0x10a>
 8003924:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003928:	d11e      	bne.n	8003968 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	0c9b      	lsrs	r3, r3, #18
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	fbb2 f3f3 	udiv	r3, r2, r3
 8003938:	60fb      	str	r3, [r7, #12]
        break;
 800393a:	e016      	b.n	800396a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	60fb      	str	r3, [r7, #12]
        break;
 8003942:	e012      	b.n	800396a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	60fb      	str	r3, [r7, #12]
        break;
 800394a:	e00e      	b.n	800396a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	099b      	lsrs	r3, r3, #6
 8003950:	60fb      	str	r3, [r7, #12]
        break;
 8003952:	e00a      	b.n	800396a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	09db      	lsrs	r3, r3, #7
 8003958:	60fb      	str	r3, [r7, #12]
        break;
 800395a:	e006      	b.n	800396a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	0a1b      	lsrs	r3, r3, #8
 8003960:	60fb      	str	r3, [r7, #12]
        break;
 8003962:	e002      	b.n	800396a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003964:	bf00      	nop
 8003966:	e000      	b.n	800396a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003968:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	085b      	lsrs	r3, r3, #1
 800396e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4a1f      	ldr	r2, [pc, #124]	@ (80039f0 <ADC_ConfigureBoostMode+0x1d0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d808      	bhi.n	800398a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003986:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003988:	e025      	b.n	80039d6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4a19      	ldr	r2, [pc, #100]	@ (80039f4 <ADC_ConfigureBoostMode+0x1d4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d80a      	bhi.n	80039a8 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039a4:	609a      	str	r2, [r3, #8]
}
 80039a6:	e016      	b.n	80039d6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4a13      	ldr	r2, [pc, #76]	@ (80039f8 <ADC_ConfigureBoostMode+0x1d8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d80a      	bhi.n	80039c6 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c2:	609a      	str	r2, [r3, #8]
}
 80039c4:	e007      	b.n	80039d6 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80039d4:	609a      	str	r2, [r3, #8]
}
 80039d6:	bf00      	nop
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40022000 	.word	0x40022000
 80039e4:	40022100 	.word	0x40022100
 80039e8:	40022300 	.word	0x40022300
 80039ec:	58026300 	.word	0x58026300
 80039f0:	005f5e10 	.word	0x005f5e10
 80039f4:	00bebc20 	.word	0x00bebc20
 80039f8:	017d7840 	.word	0x017d7840

080039fc <LL_ADC_IsEnabled>:
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <LL_ADC_IsEnabled+0x18>
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <LL_ADC_IsEnabled+0x1a>
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
	...

08003a24 <LL_ADC_StartCalibration>:
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	4b09      	ldr	r3, [pc, #36]	@ (8003a5c <LL_ADC_StartCalibration+0x38>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003a44:	430a      	orrs	r2, r1
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	609a      	str	r2, [r3, #8]
}
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	3ffeffc0 	.word	0x3ffeffc0

08003a60 <LL_ADC_IsCalibrationOnGoing>:
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a74:	d101      	bne.n	8003a7a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003a76:	2301      	movs	r3, #1
 8003a78:	e000      	b.n	8003a7c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <LL_ADC_REG_StartConversion>:
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	4b05      	ldr	r3, [pc, #20]	@ (8003aac <LL_ADC_REG_StartConversion+0x24>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	f043 0204 	orr.w	r2, r3, #4
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	609a      	str	r2, [r3, #8]
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	7fffffc0 	.word	0x7fffffc0

08003ab0 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d101      	bne.n	8003ac8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e000      	b.n	8003aca <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
	...

08003ad8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <HAL_ADCEx_Calibration_Start+0x1e>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e04c      	b.n	8003b90 <HAL_ADCEx_Calibration_Start+0xb8>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f7ff fd9a 	bl	8003638 <ADC_Disable>
 8003b04:	4603      	mov	r3, r0
 8003b06:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d135      	bne.n	8003b7a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b12:	4b21      	ldr	r3, [pc, #132]	@ (8003b98 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	f043 0202 	orr.w	r2, r3, #2
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff ff7c 	bl	8003a24 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b2c:	e014      	b.n	8003b58 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	3301      	adds	r3, #1
 8003b32:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4a19      	ldr	r2, [pc, #100]	@ (8003b9c <HAL_ADCEx_Calibration_Start+0xc4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d30d      	bcc.n	8003b58 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b40:	f023 0312 	bic.w	r3, r3, #18
 8003b44:	f043 0210 	orr.w	r2, r3, #16
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e01b      	b.n	8003b90 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff ff7f 	bl	8003a60 <LL_ADC_IsCalibrationOnGoing>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e2      	bne.n	8003b2e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6c:	f023 0303 	bic.w	r3, r3, #3
 8003b70:	f043 0201 	orr.w	r2, r3, #1
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	661a      	str	r2, [r3, #96]	@ 0x60
 8003b78:	e005      	b.n	8003b86 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b7e:	f043 0210 	orr.w	r2, r3, #16
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	ffffeefd 	.word	0xffffeefd
 8003b9c:	25c3f800 	.word	0x25c3f800

08003ba0 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b0a2      	sub	sp, #136	@ 0x88
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff ff7d 	bl	8003ab0 <LL_ADC_REG_IsConversionOngoing>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	e0bb      	b.n	8003d38 <HAL_ADCEx_MultiModeStart_DMA+0x198>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e0b4      	b.n	8003d38 <HAL_ADCEx_MultiModeStart_DMA+0x198>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Case of ADC slave using its own DMA channel: check whether handle selected
       corresponds to ADC master or slave instance */
    if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a59      	ldr	r2, [pc, #356]	@ (8003d40 <HAL_ADCEx_MultiModeStart_DMA+0x1a0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d002      	beq.n	8003be6 <HAL_ADCEx_MultiModeStart_DMA+0x46>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	e000      	b.n	8003be8 <HAL_ADCEx_MultiModeStart_DMA+0x48>
 8003be6:	4b57      	ldr	r3, [pc, #348]	@ (8003d44 <HAL_ADCEx_MultiModeStart_DMA+0x1a4>)
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	6812      	ldr	r2, [r2, #0]
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d006      	beq.n	8003bfe <HAL_ADCEx_MultiModeStart_DMA+0x5e>
    {
      /* Case of ADC slave selected: enable ADC instance */
      tmp_hal_status = ADC_Enable(hadc);
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f7ff fc97 	bl	8003524 <ADC_Enable>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003bfc:	e02e      	b.n	8003c5c <HAL_ADCEx_MultiModeStart_DMA+0xbc>
    }
    else
    {
      tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	673b      	str	r3, [r7, #112]	@ 0x70
      tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003c02:	2300      	movs	r3, #0
 8003c04:	677b      	str	r3, [r7, #116]	@ 0x74
      /* Set a temporary handle of the ADC slave associated to the ADC master   */
      ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a4e      	ldr	r2, [pc, #312]	@ (8003d44 <HAL_ADCEx_MultiModeStart_DMA+0x1a4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d102      	bne.n	8003c16 <HAL_ADCEx_MultiModeStart_DMA+0x76>
 8003c10:	4b4b      	ldr	r3, [pc, #300]	@ (8003d40 <HAL_ADCEx_MultiModeStart_DMA+0x1a0>)
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	e001      	b.n	8003c1a <HAL_ADCEx_MultiModeStart_DMA+0x7a>
 8003c16:	2300      	movs	r3, #0
 8003c18:	613b      	str	r3, [r7, #16]

      if (tmphadcSlave.Instance == NULL)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10b      	bne.n	8003c38 <HAL_ADCEx_MultiModeStart_DMA+0x98>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c24:	f043 0220 	orr.w	r2, r3, #32
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e07f      	b.n	8003d38 <HAL_ADCEx_MultiModeStart_DMA+0x198>
      }

      /* Enable the ADC peripherals: master and slave (in case if not already   */
      /* enabled previously)                                                    */
      tmp_hal_status = ADC_Enable(hadc);
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f7ff fc73 	bl	8003524 <ADC_Enable>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      if (tmp_hal_status == HAL_OK)
 8003c44:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d107      	bne.n	8003c5c <HAL_ADCEx_MultiModeStart_DMA+0xbc>
      {
        tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8003c4c:	f107 0310 	add.w	r3, r7, #16
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff fc67 	bl	8003524 <ADC_Enable>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      }
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8003c5c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d163      	bne.n	8003d2c <HAL_ADCEx_MultiModeStart_DMA+0x18c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c68:	4b37      	ldr	r3, [pc, #220]	@ (8003d48 <HAL_ADCEx_MultiModeStart_DMA+0x1a8>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	661a      	str	r2, [r3, #96]	@ 0x60
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7e:	4a33      	ldr	r2, [pc, #204]	@ (8003d4c <HAL_ADCEx_MultiModeStart_DMA+0x1ac>)
 8003c80:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c86:	4a32      	ldr	r2, [pc, #200]	@ (8003d50 <HAL_ADCEx_MultiModeStart_DMA+0x1b0>)
 8003c88:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8e:	4a31      	ldr	r2, [pc, #196]	@ (8003d54 <HAL_ADCEx_MultiModeStart_DMA+0x1b4>)
 8003c90:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	221c      	movs	r2, #28
 8003c98:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 0210 	orr.w	r2, r2, #16
 8003cb0:	605a      	str	r2, [r3, #4]

      /* Case of ADC slave using its own DMA channel: check whether handle selected
         corresponds to ADC master or slave instance */
      if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a22      	ldr	r2, [pc, #136]	@ (8003d40 <HAL_ADCEx_MultiModeStart_DMA+0x1a0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d002      	beq.n	8003cc2 <HAL_ADCEx_MultiModeStart_DMA+0x122>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	e000      	b.n	8003cc4 <HAL_ADCEx_MultiModeStart_DMA+0x124>
 8003cc2:	4b20      	ldr	r3, [pc, #128]	@ (8003d44 <HAL_ADCEx_MultiModeStart_DMA+0x1a4>)
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d00d      	beq.n	8003ce8 <HAL_ADCEx_MultiModeStart_DMA+0x148>
      {
        /* Case of ADC slave selected: Start the DMA channel. */
        /* Note: Data transfer will start upon next call of this function using handle of ADC master */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3340      	adds	r3, #64	@ 0x40
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f000 ff6e 	bl	8004bbc <HAL_DMA_Start_IT>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003ce6:	e025      	b.n	8003d34 <HAL_ADCEx_MultiModeStart_DMA+0x194>
      }
      else
      {
        /* Pointer to the common control register  */
        tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a15      	ldr	r2, [pc, #84]	@ (8003d44 <HAL_ADCEx_MultiModeStart_DMA+0x1a4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d004      	beq.n	8003cfc <HAL_ADCEx_MultiModeStart_DMA+0x15c>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a12      	ldr	r2, [pc, #72]	@ (8003d40 <HAL_ADCEx_MultiModeStart_DMA+0x1a0>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d101      	bne.n	8003d00 <HAL_ADCEx_MultiModeStart_DMA+0x160>
 8003cfc:	4b16      	ldr	r3, [pc, #88]	@ (8003d58 <HAL_ADCEx_MultiModeStart_DMA+0x1b8>)
 8003cfe:	e000      	b.n	8003d02 <HAL_ADCEx_MultiModeStart_DMA+0x162>
 8003d00:	4b16      	ldr	r3, [pc, #88]	@ (8003d5c <HAL_ADCEx_MultiModeStart_DMA+0x1bc>)
 8003d02:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003d0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d0e:	330c      	adds	r3, #12
 8003d10:	4619      	mov	r1, r3
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f000 ff51 	bl	8004bbc <HAL_DMA_Start_IT>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                    */
        /* If software start has been selected, conversion starts immediately.    */
        /* If external trigger has been selected, conversion will start at next   */
        /* trigger event.                                                         */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff feaf 	bl	8003a88 <LL_ADC_REG_StartConversion>
 8003d2a:	e003      	b.n	8003d34 <HAL_ADCEx_MultiModeStart_DMA+0x194>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    }

    /* Return function status */
    return tmp_hal_status;
 8003d34:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
  }
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3788      	adds	r7, #136	@ 0x88
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40022100 	.word	0x40022100
 8003d44:	40022000 	.word	0x40022000
 8003d48:	fffff0fe 	.word	0xfffff0fe
 8003d4c:	080036f7 	.word	0x080036f7
 8003d50:	080037cf 	.word	0x080037cf
 8003d54:	080037eb 	.word	0x080037eb
 8003d58:	40022300 	.word	0x40022300
 8003d5c:	58026300 	.word	0x58026300

08003d60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003d60:	b590      	push	{r4, r7, lr}
 8003d62:	b0a3      	sub	sp, #140	@ 0x8c
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e0c1      	b.n	8003f02 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003d86:	2300      	movs	r3, #0
 8003d88:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a5e      	ldr	r2, [pc, #376]	@ (8003f0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d102      	bne.n	8003d9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d98:	4b5d      	ldr	r3, [pc, #372]	@ (8003f10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	e001      	b.n	8003da2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10b      	bne.n	8003dc0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dac:	f043 0220 	orr.w	r2, r3, #32
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0a0      	b.n	8003f02 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff fe74 	bl	8003ab0 <LL_ADC_REG_IsConversionOngoing>
 8003dc8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff fe6d 	bl	8003ab0 <LL_ADC_REG_IsConversionOngoing>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f040 8081 	bne.w	8003ee0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003dde:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d17c      	bne.n	8003ee0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a48      	ldr	r2, [pc, #288]	@ (8003f0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d004      	beq.n	8003dfa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a46      	ldr	r2, [pc, #280]	@ (8003f10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d101      	bne.n	8003dfe <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003dfa:	4b46      	ldr	r3, [pc, #280]	@ (8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003dfc:	e000      	b.n	8003e00 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003dfe:	4b46      	ldr	r3, [pc, #280]	@ (8003f18 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e00:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d039      	beq.n	8003e7e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003e0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e1a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a3a      	ldr	r2, [pc, #232]	@ (8003f0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d004      	beq.n	8003e30 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a39      	ldr	r2, [pc, #228]	@ (8003f10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d10e      	bne.n	8003e4e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003e30:	4836      	ldr	r0, [pc, #216]	@ (8003f0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003e32:	f7ff fde3 	bl	80039fc <LL_ADC_IsEnabled>
 8003e36:	4604      	mov	r4, r0
 8003e38:	4835      	ldr	r0, [pc, #212]	@ (8003f10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003e3a:	f7ff fddf 	bl	80039fc <LL_ADC_IsEnabled>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4323      	orrs	r3, r4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	bf0c      	ite	eq
 8003e46:	2301      	moveq	r3, #1
 8003e48:	2300      	movne	r3, #0
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	e008      	b.n	8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003e4e:	4833      	ldr	r0, [pc, #204]	@ (8003f1c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003e50:	f7ff fdd4 	bl	80039fc <LL_ADC_IsEnabled>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	bf0c      	ite	eq
 8003e5a:	2301      	moveq	r3, #1
 8003e5c:	2300      	movne	r3, #0
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d047      	beq.n	8003ef4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	4b2d      	ldr	r3, [pc, #180]	@ (8003f20 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	6811      	ldr	r1, [r2, #0]
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	6892      	ldr	r2, [r2, #8]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	431a      	orrs	r2, r3
 8003e78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e7a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e7c:	e03a      	b.n	8003ef4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003e7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e88:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8003f0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d004      	beq.n	8003e9e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1d      	ldr	r2, [pc, #116]	@ (8003f10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d10e      	bne.n	8003ebc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003e9e:	481b      	ldr	r0, [pc, #108]	@ (8003f0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003ea0:	f7ff fdac 	bl	80039fc <LL_ADC_IsEnabled>
 8003ea4:	4604      	mov	r4, r0
 8003ea6:	481a      	ldr	r0, [pc, #104]	@ (8003f10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003ea8:	f7ff fda8 	bl	80039fc <LL_ADC_IsEnabled>
 8003eac:	4603      	mov	r3, r0
 8003eae:	4323      	orrs	r3, r4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2301      	moveq	r3, #1
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	e008      	b.n	8003ece <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003ebc:	4817      	ldr	r0, [pc, #92]	@ (8003f1c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003ebe:	f7ff fd9d 	bl	80039fc <LL_ADC_IsEnabled>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bf0c      	ite	eq
 8003ec8:	2301      	moveq	r3, #1
 8003eca:	2300      	movne	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d010      	beq.n	8003ef4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ed2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	4b12      	ldr	r3, [pc, #72]	@ (8003f20 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003edc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ede:	e009      	b.n	8003ef4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ee4:	f043 0220 	orr.w	r2, r3, #32
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003ef2:	e000      	b.n	8003ef6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ef4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003efe:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	378c      	adds	r7, #140	@ 0x8c
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd90      	pop	{r4, r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40022000 	.word	0x40022000
 8003f10:	40022100 	.word	0x40022100
 8003f14:	40022300 	.word	0x40022300
 8003f18:	58026300 	.word	0x58026300
 8003f1c:	58026000 	.word	0x58026000
 8003f20:	fffff0e0 	.word	0xfffff0e0

08003f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f34:	4b0b      	ldr	r3, [pc, #44]	@ (8003f64 <__NVIC_SetPriorityGrouping+0x40>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f40:	4013      	ands	r3, r2
 8003f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f4c:	4b06      	ldr	r3, [pc, #24]	@ (8003f68 <__NVIC_SetPriorityGrouping+0x44>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f52:	4a04      	ldr	r2, [pc, #16]	@ (8003f64 <__NVIC_SetPriorityGrouping+0x40>)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	60d3      	str	r3, [r2, #12]
}
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	e000ed00 	.word	0xe000ed00
 8003f68:	05fa0000 	.word	0x05fa0000

08003f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f70:	4b04      	ldr	r3, [pc, #16]	@ (8003f84 <__NVIC_GetPriorityGrouping+0x18>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	0a1b      	lsrs	r3, r3, #8
 8003f76:	f003 0307 	and.w	r3, r3, #7
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	e000ed00 	.word	0xe000ed00

08003f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	db0b      	blt.n	8003fb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	f003 021f 	and.w	r2, r3, #31
 8003fa0:	4907      	ldr	r1, [pc, #28]	@ (8003fc0 <__NVIC_EnableIRQ+0x38>)
 8003fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	2001      	movs	r0, #1
 8003faa:	fa00 f202 	lsl.w	r2, r0, r2
 8003fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	e000e100 	.word	0xe000e100

08003fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	6039      	str	r1, [r7, #0]
 8003fce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003fd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	db0a      	blt.n	8003fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	490c      	ldr	r1, [pc, #48]	@ (8004010 <__NVIC_SetPriority+0x4c>)
 8003fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fe2:	0112      	lsls	r2, r2, #4
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fec:	e00a      	b.n	8004004 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	4908      	ldr	r1, [pc, #32]	@ (8004014 <__NVIC_SetPriority+0x50>)
 8003ff4:	88fb      	ldrh	r3, [r7, #6]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	3b04      	subs	r3, #4
 8003ffc:	0112      	lsls	r2, r2, #4
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	440b      	add	r3, r1
 8004002:	761a      	strb	r2, [r3, #24]
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	e000e100 	.word	0xe000e100
 8004014:	e000ed00 	.word	0xe000ed00

08004018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004018:	b480      	push	{r7}
 800401a:	b089      	sub	sp, #36	@ 0x24
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f1c3 0307 	rsb	r3, r3, #7
 8004032:	2b04      	cmp	r3, #4
 8004034:	bf28      	it	cs
 8004036:	2304      	movcs	r3, #4
 8004038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	3304      	adds	r3, #4
 800403e:	2b06      	cmp	r3, #6
 8004040:	d902      	bls.n	8004048 <NVIC_EncodePriority+0x30>
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	3b03      	subs	r3, #3
 8004046:	e000      	b.n	800404a <NVIC_EncodePriority+0x32>
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800404c:	f04f 32ff 	mov.w	r2, #4294967295
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43da      	mvns	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	401a      	ands	r2, r3
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004060:	f04f 31ff 	mov.w	r1, #4294967295
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	fa01 f303 	lsl.w	r3, r1, r3
 800406a:	43d9      	mvns	r1, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004070:	4313      	orrs	r3, r2
         );
}
 8004072:	4618      	mov	r0, r3
 8004074:	3724      	adds	r7, #36	@ 0x24
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3b01      	subs	r3, #1
 800408c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004090:	d301      	bcc.n	8004096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004092:	2301      	movs	r3, #1
 8004094:	e00f      	b.n	80040b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004096:	4a0a      	ldr	r2, [pc, #40]	@ (80040c0 <SysTick_Config+0x40>)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3b01      	subs	r3, #1
 800409c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800409e:	210f      	movs	r1, #15
 80040a0:	f04f 30ff 	mov.w	r0, #4294967295
 80040a4:	f7ff ff8e 	bl	8003fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040a8:	4b05      	ldr	r3, [pc, #20]	@ (80040c0 <SysTick_Config+0x40>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040ae:	4b04      	ldr	r3, [pc, #16]	@ (80040c0 <SysTick_Config+0x40>)
 80040b0:	2207      	movs	r2, #7
 80040b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	e000e010 	.word	0xe000e010

080040c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff ff29 	bl	8003f24 <__NVIC_SetPriorityGrouping>
}
 80040d2:	bf00      	nop
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b086      	sub	sp, #24
 80040de:	af00      	add	r7, sp, #0
 80040e0:	4603      	mov	r3, r0
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	607a      	str	r2, [r7, #4]
 80040e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040e8:	f7ff ff40 	bl	8003f6c <__NVIC_GetPriorityGrouping>
 80040ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	68b9      	ldr	r1, [r7, #8]
 80040f2:	6978      	ldr	r0, [r7, #20]
 80040f4:	f7ff ff90 	bl	8004018 <NVIC_EncodePriority>
 80040f8:	4602      	mov	r2, r0
 80040fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040fe:	4611      	mov	r1, r2
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff ff5f 	bl	8003fc4 <__NVIC_SetPriority>
}
 8004106:	bf00      	nop
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b082      	sub	sp, #8
 8004112:	af00      	add	r7, sp, #0
 8004114:	4603      	mov	r3, r0
 8004116:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004118:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff ff33 	bl	8003f88 <__NVIC_EnableIRQ>
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff ffa4 	bl	8004080 <SysTick_Config>
 8004138:	4603      	mov	r3, r0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b082      	sub	sp, #8
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e014      	b.n	800417e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	791b      	ldrb	r3, [r3, #4]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d105      	bne.n	800416a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7fd fa65 	bl	8001634 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2202      	movs	r2, #2
 800416e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e046      	b.n	8004228 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	795b      	ldrb	r3, [r3, #5]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_DAC_Start+0x20>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e040      	b.n	8004228 <HAL_DAC_Start+0xa2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6819      	ldr	r1, [r3, #0]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	f003 0310 	and.w	r3, r3, #16
 80041be:	2201      	movs	r2, #1
 80041c0:	409a      	lsls	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10f      	bne.n	80041f0 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d11d      	bne.n	800421a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0201 	orr.w	r2, r2, #1
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	e014      	b.n	800421a <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2102      	movs	r1, #2
 8004202:	fa01 f303 	lsl.w	r3, r1, r3
 8004206:	429a      	cmp	r2, r3
 8004208:	d107      	bne.n	800421a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0202 	orr.w	r2, r2, #2
 8004218:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e015      	b.n	800427c <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d105      	bne.n	8004268 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4413      	add	r3, r2
 8004262:	3308      	adds	r3, #8
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	e004      	b.n	8004272 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	3314      	adds	r3, #20
 8004270:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	461a      	mov	r2, r3
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	@ 0x28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <HAL_DAC_ConfigChannel+0x1e>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e12a      	b.n	8004500 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	795b      	ldrb	r3, [r3, #5]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <HAL_DAC_ConfigChannel+0x2e>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e124      	b.n	8004500 <HAL_DAC_ConfigChannel+0x278>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2202      	movs	r2, #2
 80042c0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d17a      	bne.n	80043c0 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80042ca:	f7fd fd89 	bl	8001de0 <HAL_GetTick>
 80042ce:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d13d      	bne.n	8004352 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80042d6:	e018      	b.n	800430a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80042d8:	f7fd fd82 	bl	8001de0 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d911      	bls.n	800430a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042ec:	4b86      	ldr	r3, [pc, #536]	@ (8004508 <HAL_DAC_ConfigChannel+0x280>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	f043 0208 	orr.w	r2, r3, #8
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2203      	movs	r2, #3
 8004304:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e0fa      	b.n	8004500 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004310:	4b7d      	ldr	r3, [pc, #500]	@ (8004508 <HAL_DAC_ConfigChannel+0x280>)
 8004312:	4013      	ands	r3, r2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1df      	bne.n	80042d8 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	6992      	ldr	r2, [r2, #24]
 8004320:	641a      	str	r2, [r3, #64]	@ 0x40
 8004322:	e020      	b.n	8004366 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004324:	f7fd fd5c 	bl	8001de0 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b01      	cmp	r3, #1
 8004330:	d90f      	bls.n	8004352 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004338:	2b00      	cmp	r3, #0
 800433a:	da0a      	bge.n	8004352 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	f043 0208 	orr.w	r2, r3, #8
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2203      	movs	r2, #3
 800434c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e0d6      	b.n	8004500 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004358:	2b00      	cmp	r3, #0
 800435a:	dbe3      	blt.n	8004324 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	6992      	ldr	r2, [r2, #24]
 8004364:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004376:	fa01 f303 	lsl.w	r3, r1, r3
 800437a:	43db      	mvns	r3, r3
 800437c:	ea02 0103 	and.w	r1, r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	69da      	ldr	r2, [r3, #28]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	409a      	lsls	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	21ff      	movs	r1, #255	@ 0xff
 80043a2:	fa01 f303 	lsl.w	r3, r1, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	ea02 0103 	and.w	r1, r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	6a1a      	ldr	r2, [r3, #32]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	409a      	lsls	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d11d      	bne.n	8004404 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ce:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	221f      	movs	r2, #31
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4013      	ands	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f003 0310 	and.w	r3, r3, #16
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800440a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f003 0310 	and.w	r3, r3, #16
 8004412:	2207      	movs	r2, #7
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	43db      	mvns	r3, r3
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	4013      	ands	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d102      	bne.n	800442e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8004428:	2300      	movs	r3, #0
 800442a:	627b      	str	r3, [r7, #36]	@ 0x24
 800442c:	e00f      	b.n	800444e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d102      	bne.n	800443c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004436:	2301      	movs	r3, #1
 8004438:	627b      	str	r3, [r7, #36]	@ 0x24
 800443a:	e008      	b.n	800444e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d102      	bne.n	800444a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004444:	2301      	movs	r3, #1
 8004446:	627b      	str	r3, [r7, #36]	@ 0x24
 8004448:	e001      	b.n	800444e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800444a:	2300      	movs	r3, #0
 800444c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	4313      	orrs	r3, r2
 8004458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4313      	orrs	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6819      	ldr	r1, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	43da      	mvns	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	400a      	ands	r2, r1
 8004494:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	43db      	mvns	r3, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4013      	ands	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6819      	ldr	r1, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f003 0310 	and.w	r3, r3, #16
 80044e0:	22c0      	movs	r2, #192	@ 0xc0
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	43da      	mvns	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	400a      	ands	r2, r1
 80044ee:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2201      	movs	r2, #1
 80044f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80044fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004500:	4618      	mov	r0, r3
 8004502:	3728      	adds	r7, #40	@ 0x28
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20008000 	.word	0x20008000

0800450c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004514:	f7fd fc64 	bl	8001de0 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e312      	b.n	8004b4a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a66      	ldr	r2, [pc, #408]	@ (80046c4 <HAL_DMA_Init+0x1b8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d04a      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a65      	ldr	r2, [pc, #404]	@ (80046c8 <HAL_DMA_Init+0x1bc>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d045      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a63      	ldr	r2, [pc, #396]	@ (80046cc <HAL_DMA_Init+0x1c0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d040      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a62      	ldr	r2, [pc, #392]	@ (80046d0 <HAL_DMA_Init+0x1c4>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d03b      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a60      	ldr	r2, [pc, #384]	@ (80046d4 <HAL_DMA_Init+0x1c8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d036      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a5f      	ldr	r2, [pc, #380]	@ (80046d8 <HAL_DMA_Init+0x1cc>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d031      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a5d      	ldr	r2, [pc, #372]	@ (80046dc <HAL_DMA_Init+0x1d0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d02c      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a5c      	ldr	r2, [pc, #368]	@ (80046e0 <HAL_DMA_Init+0x1d4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d027      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a5a      	ldr	r2, [pc, #360]	@ (80046e4 <HAL_DMA_Init+0x1d8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d022      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a59      	ldr	r2, [pc, #356]	@ (80046e8 <HAL_DMA_Init+0x1dc>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d01d      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a57      	ldr	r2, [pc, #348]	@ (80046ec <HAL_DMA_Init+0x1e0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d018      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a56      	ldr	r2, [pc, #344]	@ (80046f0 <HAL_DMA_Init+0x1e4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d013      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a54      	ldr	r2, [pc, #336]	@ (80046f4 <HAL_DMA_Init+0x1e8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00e      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a53      	ldr	r2, [pc, #332]	@ (80046f8 <HAL_DMA_Init+0x1ec>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d009      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a51      	ldr	r2, [pc, #324]	@ (80046fc <HAL_DMA_Init+0x1f0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d004      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a50      	ldr	r2, [pc, #320]	@ (8004700 <HAL_DMA_Init+0x1f4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d101      	bne.n	80045c8 <HAL_DMA_Init+0xbc>
 80045c4:	2301      	movs	r3, #1
 80045c6:	e000      	b.n	80045ca <HAL_DMA_Init+0xbe>
 80045c8:	2300      	movs	r3, #0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 813c 	beq.w	8004848 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a37      	ldr	r2, [pc, #220]	@ (80046c4 <HAL_DMA_Init+0x1b8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d04a      	beq.n	8004680 <HAL_DMA_Init+0x174>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a36      	ldr	r2, [pc, #216]	@ (80046c8 <HAL_DMA_Init+0x1bc>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d045      	beq.n	8004680 <HAL_DMA_Init+0x174>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a34      	ldr	r2, [pc, #208]	@ (80046cc <HAL_DMA_Init+0x1c0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d040      	beq.n	8004680 <HAL_DMA_Init+0x174>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a33      	ldr	r2, [pc, #204]	@ (80046d0 <HAL_DMA_Init+0x1c4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d03b      	beq.n	8004680 <HAL_DMA_Init+0x174>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a31      	ldr	r2, [pc, #196]	@ (80046d4 <HAL_DMA_Init+0x1c8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d036      	beq.n	8004680 <HAL_DMA_Init+0x174>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a30      	ldr	r2, [pc, #192]	@ (80046d8 <HAL_DMA_Init+0x1cc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d031      	beq.n	8004680 <HAL_DMA_Init+0x174>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a2e      	ldr	r2, [pc, #184]	@ (80046dc <HAL_DMA_Init+0x1d0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d02c      	beq.n	8004680 <HAL_DMA_Init+0x174>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a2d      	ldr	r2, [pc, #180]	@ (80046e0 <HAL_DMA_Init+0x1d4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d027      	beq.n	8004680 <HAL_DMA_Init+0x174>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a2b      	ldr	r2, [pc, #172]	@ (80046e4 <HAL_DMA_Init+0x1d8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d022      	beq.n	8004680 <HAL_DMA_Init+0x174>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a2a      	ldr	r2, [pc, #168]	@ (80046e8 <HAL_DMA_Init+0x1dc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d01d      	beq.n	8004680 <HAL_DMA_Init+0x174>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a28      	ldr	r2, [pc, #160]	@ (80046ec <HAL_DMA_Init+0x1e0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d018      	beq.n	8004680 <HAL_DMA_Init+0x174>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a27      	ldr	r2, [pc, #156]	@ (80046f0 <HAL_DMA_Init+0x1e4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d013      	beq.n	8004680 <HAL_DMA_Init+0x174>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a25      	ldr	r2, [pc, #148]	@ (80046f4 <HAL_DMA_Init+0x1e8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00e      	beq.n	8004680 <HAL_DMA_Init+0x174>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a24      	ldr	r2, [pc, #144]	@ (80046f8 <HAL_DMA_Init+0x1ec>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d009      	beq.n	8004680 <HAL_DMA_Init+0x174>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a22      	ldr	r2, [pc, #136]	@ (80046fc <HAL_DMA_Init+0x1f0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d004      	beq.n	8004680 <HAL_DMA_Init+0x174>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a21      	ldr	r2, [pc, #132]	@ (8004700 <HAL_DMA_Init+0x1f4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d108      	bne.n	8004692 <HAL_DMA_Init+0x186>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0201 	bic.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	e007      	b.n	80046a2 <HAL_DMA_Init+0x196>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0201 	bic.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80046a2:	e02f      	b.n	8004704 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046a4:	f7fd fb9c 	bl	8001de0 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b05      	cmp	r3, #5
 80046b0:	d928      	bls.n	8004704 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2203      	movs	r2, #3
 80046bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e242      	b.n	8004b4a <HAL_DMA_Init+0x63e>
 80046c4:	40020010 	.word	0x40020010
 80046c8:	40020028 	.word	0x40020028
 80046cc:	40020040 	.word	0x40020040
 80046d0:	40020058 	.word	0x40020058
 80046d4:	40020070 	.word	0x40020070
 80046d8:	40020088 	.word	0x40020088
 80046dc:	400200a0 	.word	0x400200a0
 80046e0:	400200b8 	.word	0x400200b8
 80046e4:	40020410 	.word	0x40020410
 80046e8:	40020428 	.word	0x40020428
 80046ec:	40020440 	.word	0x40020440
 80046f0:	40020458 	.word	0x40020458
 80046f4:	40020470 	.word	0x40020470
 80046f8:	40020488 	.word	0x40020488
 80046fc:	400204a0 	.word	0x400204a0
 8004700:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1c8      	bne.n	80046a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	4b83      	ldr	r3, [pc, #524]	@ (800492c <HAL_DMA_Init+0x420>)
 800471e:	4013      	ands	r3, r2
 8004720:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800472a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004736:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004742:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004754:	2b04      	cmp	r3, #4
 8004756:	d107      	bne.n	8004768 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004760:	4313      	orrs	r3, r2
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b28      	cmp	r3, #40	@ 0x28
 800476e:	d903      	bls.n	8004778 <HAL_DMA_Init+0x26c>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b2e      	cmp	r3, #46	@ 0x2e
 8004776:	d91f      	bls.n	80047b8 <HAL_DMA_Init+0x2ac>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b3e      	cmp	r3, #62	@ 0x3e
 800477e:	d903      	bls.n	8004788 <HAL_DMA_Init+0x27c>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b42      	cmp	r3, #66	@ 0x42
 8004786:	d917      	bls.n	80047b8 <HAL_DMA_Init+0x2ac>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b46      	cmp	r3, #70	@ 0x46
 800478e:	d903      	bls.n	8004798 <HAL_DMA_Init+0x28c>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b48      	cmp	r3, #72	@ 0x48
 8004796:	d90f      	bls.n	80047b8 <HAL_DMA_Init+0x2ac>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b4e      	cmp	r3, #78	@ 0x4e
 800479e:	d903      	bls.n	80047a8 <HAL_DMA_Init+0x29c>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b52      	cmp	r3, #82	@ 0x52
 80047a6:	d907      	bls.n	80047b8 <HAL_DMA_Init+0x2ac>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b73      	cmp	r3, #115	@ 0x73
 80047ae:	d905      	bls.n	80047bc <HAL_DMA_Init+0x2b0>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b77      	cmp	r3, #119	@ 0x77
 80047b6:	d801      	bhi.n	80047bc <HAL_DMA_Init+0x2b0>
 80047b8:	2301      	movs	r3, #1
 80047ba:	e000      	b.n	80047be <HAL_DMA_Init+0x2b2>
 80047bc:	2300      	movs	r3, #0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047c8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f023 0307 	bic.w	r3, r3, #7
 80047e0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d117      	bne.n	8004824 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00e      	beq.n	8004824 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f001 fdca 	bl	80063a0 <DMA_CheckFifoParam>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d008      	beq.n	8004824 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2240      	movs	r2, #64	@ 0x40
 8004816:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e192      	b.n	8004b4a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f001 fd05 	bl	800623c <DMA_CalcBaseAndBitshift>
 8004832:	4603      	mov	r3, r0
 8004834:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483a:	f003 031f 	and.w	r3, r3, #31
 800483e:	223f      	movs	r2, #63	@ 0x3f
 8004840:	409a      	lsls	r2, r3
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	609a      	str	r2, [r3, #8]
 8004846:	e0c8      	b.n	80049da <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a38      	ldr	r2, [pc, #224]	@ (8004930 <HAL_DMA_Init+0x424>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d022      	beq.n	8004898 <HAL_DMA_Init+0x38c>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a37      	ldr	r2, [pc, #220]	@ (8004934 <HAL_DMA_Init+0x428>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d01d      	beq.n	8004898 <HAL_DMA_Init+0x38c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a35      	ldr	r2, [pc, #212]	@ (8004938 <HAL_DMA_Init+0x42c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d018      	beq.n	8004898 <HAL_DMA_Init+0x38c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a34      	ldr	r2, [pc, #208]	@ (800493c <HAL_DMA_Init+0x430>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d013      	beq.n	8004898 <HAL_DMA_Init+0x38c>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a32      	ldr	r2, [pc, #200]	@ (8004940 <HAL_DMA_Init+0x434>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00e      	beq.n	8004898 <HAL_DMA_Init+0x38c>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a31      	ldr	r2, [pc, #196]	@ (8004944 <HAL_DMA_Init+0x438>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d009      	beq.n	8004898 <HAL_DMA_Init+0x38c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a2f      	ldr	r2, [pc, #188]	@ (8004948 <HAL_DMA_Init+0x43c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d004      	beq.n	8004898 <HAL_DMA_Init+0x38c>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a2e      	ldr	r2, [pc, #184]	@ (800494c <HAL_DMA_Init+0x440>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d101      	bne.n	800489c <HAL_DMA_Init+0x390>
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <HAL_DMA_Init+0x392>
 800489c:	2300      	movs	r3, #0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 8092 	beq.w	80049c8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a21      	ldr	r2, [pc, #132]	@ (8004930 <HAL_DMA_Init+0x424>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d021      	beq.n	80048f2 <HAL_DMA_Init+0x3e6>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a20      	ldr	r2, [pc, #128]	@ (8004934 <HAL_DMA_Init+0x428>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d01c      	beq.n	80048f2 <HAL_DMA_Init+0x3e6>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a1e      	ldr	r2, [pc, #120]	@ (8004938 <HAL_DMA_Init+0x42c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d017      	beq.n	80048f2 <HAL_DMA_Init+0x3e6>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a1d      	ldr	r2, [pc, #116]	@ (800493c <HAL_DMA_Init+0x430>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d012      	beq.n	80048f2 <HAL_DMA_Init+0x3e6>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004940 <HAL_DMA_Init+0x434>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d00d      	beq.n	80048f2 <HAL_DMA_Init+0x3e6>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a1a      	ldr	r2, [pc, #104]	@ (8004944 <HAL_DMA_Init+0x438>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d008      	beq.n	80048f2 <HAL_DMA_Init+0x3e6>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a18      	ldr	r2, [pc, #96]	@ (8004948 <HAL_DMA_Init+0x43c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d003      	beq.n	80048f2 <HAL_DMA_Init+0x3e6>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a17      	ldr	r2, [pc, #92]	@ (800494c <HAL_DMA_Init+0x440>)
 80048f0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2202      	movs	r2, #2
 80048f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4b10      	ldr	r3, [pc, #64]	@ (8004950 <HAL_DMA_Init+0x444>)
 800490e:	4013      	ands	r3, r2
 8004910:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	2b40      	cmp	r3, #64	@ 0x40
 8004918:	d01c      	beq.n	8004954 <HAL_DMA_Init+0x448>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b80      	cmp	r3, #128	@ 0x80
 8004920:	d102      	bne.n	8004928 <HAL_DMA_Init+0x41c>
 8004922:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004926:	e016      	b.n	8004956 <HAL_DMA_Init+0x44a>
 8004928:	2300      	movs	r3, #0
 800492a:	e014      	b.n	8004956 <HAL_DMA_Init+0x44a>
 800492c:	fe10803f 	.word	0xfe10803f
 8004930:	58025408 	.word	0x58025408
 8004934:	5802541c 	.word	0x5802541c
 8004938:	58025430 	.word	0x58025430
 800493c:	58025444 	.word	0x58025444
 8004940:	58025458 	.word	0x58025458
 8004944:	5802546c 	.word	0x5802546c
 8004948:	58025480 	.word	0x58025480
 800494c:	58025494 	.word	0x58025494
 8004950:	fffe000f 	.word	0xfffe000f
 8004954:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	68d2      	ldr	r2, [r2, #12]
 800495a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800495c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004964:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800496c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004974:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800497c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004984:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	4b6e      	ldr	r3, [pc, #440]	@ (8004b54 <HAL_DMA_Init+0x648>)
 800499c:	4413      	add	r3, r2
 800499e:	4a6e      	ldr	r2, [pc, #440]	@ (8004b58 <HAL_DMA_Init+0x64c>)
 80049a0:	fba2 2303 	umull	r2, r3, r2, r3
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	009a      	lsls	r2, r3, #2
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f001 fc45 	bl	800623c <DMA_CalcBaseAndBitshift>
 80049b2:	4603      	mov	r3, r0
 80049b4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	2201      	movs	r2, #1
 80049c0:	409a      	lsls	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	605a      	str	r2, [r3, #4]
 80049c6:	e008      	b.n	80049da <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2240      	movs	r2, #64	@ 0x40
 80049cc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2203      	movs	r2, #3
 80049d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e0b7      	b.n	8004b4a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a5f      	ldr	r2, [pc, #380]	@ (8004b5c <HAL_DMA_Init+0x650>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d072      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a5d      	ldr	r2, [pc, #372]	@ (8004b60 <HAL_DMA_Init+0x654>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d06d      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a5c      	ldr	r2, [pc, #368]	@ (8004b64 <HAL_DMA_Init+0x658>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d068      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a5a      	ldr	r2, [pc, #360]	@ (8004b68 <HAL_DMA_Init+0x65c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d063      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a59      	ldr	r2, [pc, #356]	@ (8004b6c <HAL_DMA_Init+0x660>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d05e      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a57      	ldr	r2, [pc, #348]	@ (8004b70 <HAL_DMA_Init+0x664>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d059      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a56      	ldr	r2, [pc, #344]	@ (8004b74 <HAL_DMA_Init+0x668>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d054      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a54      	ldr	r2, [pc, #336]	@ (8004b78 <HAL_DMA_Init+0x66c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d04f      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a53      	ldr	r2, [pc, #332]	@ (8004b7c <HAL_DMA_Init+0x670>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d04a      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a51      	ldr	r2, [pc, #324]	@ (8004b80 <HAL_DMA_Init+0x674>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d045      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a50      	ldr	r2, [pc, #320]	@ (8004b84 <HAL_DMA_Init+0x678>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d040      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a4e      	ldr	r2, [pc, #312]	@ (8004b88 <HAL_DMA_Init+0x67c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d03b      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a4d      	ldr	r2, [pc, #308]	@ (8004b8c <HAL_DMA_Init+0x680>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d036      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a4b      	ldr	r2, [pc, #300]	@ (8004b90 <HAL_DMA_Init+0x684>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d031      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a4a      	ldr	r2, [pc, #296]	@ (8004b94 <HAL_DMA_Init+0x688>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d02c      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a48      	ldr	r2, [pc, #288]	@ (8004b98 <HAL_DMA_Init+0x68c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d027      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a47      	ldr	r2, [pc, #284]	@ (8004b9c <HAL_DMA_Init+0x690>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d022      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a45      	ldr	r2, [pc, #276]	@ (8004ba0 <HAL_DMA_Init+0x694>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d01d      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a44      	ldr	r2, [pc, #272]	@ (8004ba4 <HAL_DMA_Init+0x698>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d018      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a42      	ldr	r2, [pc, #264]	@ (8004ba8 <HAL_DMA_Init+0x69c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a41      	ldr	r2, [pc, #260]	@ (8004bac <HAL_DMA_Init+0x6a0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00e      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a3f      	ldr	r2, [pc, #252]	@ (8004bb0 <HAL_DMA_Init+0x6a4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d009      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a3e      	ldr	r2, [pc, #248]	@ (8004bb4 <HAL_DMA_Init+0x6a8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d004      	beq.n	8004aca <HAL_DMA_Init+0x5be>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a3c      	ldr	r2, [pc, #240]	@ (8004bb8 <HAL_DMA_Init+0x6ac>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d101      	bne.n	8004ace <HAL_DMA_Init+0x5c2>
 8004aca:	2301      	movs	r3, #1
 8004acc:	e000      	b.n	8004ad0 <HAL_DMA_Init+0x5c4>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d032      	beq.n	8004b3a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f001 fcdf 	bl	8006498 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2b80      	cmp	r3, #128	@ 0x80
 8004ae0:	d102      	bne.n	8004ae8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004afc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d010      	beq.n	8004b28 <HAL_DMA_Init+0x61c>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d80c      	bhi.n	8004b28 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f001 fd5c 	bl	80065cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b24:	605a      	str	r2, [r3, #4]
 8004b26:	e008      	b.n	8004b3a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	a7fdabf8 	.word	0xa7fdabf8
 8004b58:	cccccccd 	.word	0xcccccccd
 8004b5c:	40020010 	.word	0x40020010
 8004b60:	40020028 	.word	0x40020028
 8004b64:	40020040 	.word	0x40020040
 8004b68:	40020058 	.word	0x40020058
 8004b6c:	40020070 	.word	0x40020070
 8004b70:	40020088 	.word	0x40020088
 8004b74:	400200a0 	.word	0x400200a0
 8004b78:	400200b8 	.word	0x400200b8
 8004b7c:	40020410 	.word	0x40020410
 8004b80:	40020428 	.word	0x40020428
 8004b84:	40020440 	.word	0x40020440
 8004b88:	40020458 	.word	0x40020458
 8004b8c:	40020470 	.word	0x40020470
 8004b90:	40020488 	.word	0x40020488
 8004b94:	400204a0 	.word	0x400204a0
 8004b98:	400204b8 	.word	0x400204b8
 8004b9c:	58025408 	.word	0x58025408
 8004ba0:	5802541c 	.word	0x5802541c
 8004ba4:	58025430 	.word	0x58025430
 8004ba8:	58025444 	.word	0x58025444
 8004bac:	58025458 	.word	0x58025458
 8004bb0:	5802546c 	.word	0x5802546c
 8004bb4:	58025480 	.word	0x58025480
 8004bb8:	58025494 	.word	0x58025494

08004bbc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e226      	b.n	8005026 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_DMA_Start_IT+0x2a>
 8004be2:	2302      	movs	r3, #2
 8004be4:	e21f      	b.n	8005026 <HAL_DMA_Start_IT+0x46a>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	f040 820a 	bne.w	8005010 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a68      	ldr	r2, [pc, #416]	@ (8004db0 <HAL_DMA_Start_IT+0x1f4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d04a      	beq.n	8004caa <HAL_DMA_Start_IT+0xee>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a66      	ldr	r2, [pc, #408]	@ (8004db4 <HAL_DMA_Start_IT+0x1f8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d045      	beq.n	8004caa <HAL_DMA_Start_IT+0xee>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a65      	ldr	r2, [pc, #404]	@ (8004db8 <HAL_DMA_Start_IT+0x1fc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d040      	beq.n	8004caa <HAL_DMA_Start_IT+0xee>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a63      	ldr	r2, [pc, #396]	@ (8004dbc <HAL_DMA_Start_IT+0x200>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d03b      	beq.n	8004caa <HAL_DMA_Start_IT+0xee>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a62      	ldr	r2, [pc, #392]	@ (8004dc0 <HAL_DMA_Start_IT+0x204>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d036      	beq.n	8004caa <HAL_DMA_Start_IT+0xee>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a60      	ldr	r2, [pc, #384]	@ (8004dc4 <HAL_DMA_Start_IT+0x208>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d031      	beq.n	8004caa <HAL_DMA_Start_IT+0xee>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a5f      	ldr	r2, [pc, #380]	@ (8004dc8 <HAL_DMA_Start_IT+0x20c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d02c      	beq.n	8004caa <HAL_DMA_Start_IT+0xee>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a5d      	ldr	r2, [pc, #372]	@ (8004dcc <HAL_DMA_Start_IT+0x210>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d027      	beq.n	8004caa <HAL_DMA_Start_IT+0xee>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a5c      	ldr	r2, [pc, #368]	@ (8004dd0 <HAL_DMA_Start_IT+0x214>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d022      	beq.n	8004caa <HAL_DMA_Start_IT+0xee>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a5a      	ldr	r2, [pc, #360]	@ (8004dd4 <HAL_DMA_Start_IT+0x218>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d01d      	beq.n	8004caa <HAL_DMA_Start_IT+0xee>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a59      	ldr	r2, [pc, #356]	@ (8004dd8 <HAL_DMA_Start_IT+0x21c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d018      	beq.n	8004caa <HAL_DMA_Start_IT+0xee>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a57      	ldr	r2, [pc, #348]	@ (8004ddc <HAL_DMA_Start_IT+0x220>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d013      	beq.n	8004caa <HAL_DMA_Start_IT+0xee>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a56      	ldr	r2, [pc, #344]	@ (8004de0 <HAL_DMA_Start_IT+0x224>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00e      	beq.n	8004caa <HAL_DMA_Start_IT+0xee>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a54      	ldr	r2, [pc, #336]	@ (8004de4 <HAL_DMA_Start_IT+0x228>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d009      	beq.n	8004caa <HAL_DMA_Start_IT+0xee>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a53      	ldr	r2, [pc, #332]	@ (8004de8 <HAL_DMA_Start_IT+0x22c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d004      	beq.n	8004caa <HAL_DMA_Start_IT+0xee>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a51      	ldr	r2, [pc, #324]	@ (8004dec <HAL_DMA_Start_IT+0x230>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d108      	bne.n	8004cbc <HAL_DMA_Start_IT+0x100>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0201 	bic.w	r2, r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	e007      	b.n	8004ccc <HAL_DMA_Start_IT+0x110>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0201 	bic.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	68b9      	ldr	r1, [r7, #8]
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f001 f906 	bl	8005ee4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a34      	ldr	r2, [pc, #208]	@ (8004db0 <HAL_DMA_Start_IT+0x1f4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d04a      	beq.n	8004d78 <HAL_DMA_Start_IT+0x1bc>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a33      	ldr	r2, [pc, #204]	@ (8004db4 <HAL_DMA_Start_IT+0x1f8>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d045      	beq.n	8004d78 <HAL_DMA_Start_IT+0x1bc>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a31      	ldr	r2, [pc, #196]	@ (8004db8 <HAL_DMA_Start_IT+0x1fc>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d040      	beq.n	8004d78 <HAL_DMA_Start_IT+0x1bc>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a30      	ldr	r2, [pc, #192]	@ (8004dbc <HAL_DMA_Start_IT+0x200>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d03b      	beq.n	8004d78 <HAL_DMA_Start_IT+0x1bc>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a2e      	ldr	r2, [pc, #184]	@ (8004dc0 <HAL_DMA_Start_IT+0x204>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d036      	beq.n	8004d78 <HAL_DMA_Start_IT+0x1bc>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a2d      	ldr	r2, [pc, #180]	@ (8004dc4 <HAL_DMA_Start_IT+0x208>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d031      	beq.n	8004d78 <HAL_DMA_Start_IT+0x1bc>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a2b      	ldr	r2, [pc, #172]	@ (8004dc8 <HAL_DMA_Start_IT+0x20c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d02c      	beq.n	8004d78 <HAL_DMA_Start_IT+0x1bc>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a2a      	ldr	r2, [pc, #168]	@ (8004dcc <HAL_DMA_Start_IT+0x210>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d027      	beq.n	8004d78 <HAL_DMA_Start_IT+0x1bc>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a28      	ldr	r2, [pc, #160]	@ (8004dd0 <HAL_DMA_Start_IT+0x214>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d022      	beq.n	8004d78 <HAL_DMA_Start_IT+0x1bc>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a27      	ldr	r2, [pc, #156]	@ (8004dd4 <HAL_DMA_Start_IT+0x218>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d01d      	beq.n	8004d78 <HAL_DMA_Start_IT+0x1bc>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a25      	ldr	r2, [pc, #148]	@ (8004dd8 <HAL_DMA_Start_IT+0x21c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d018      	beq.n	8004d78 <HAL_DMA_Start_IT+0x1bc>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a24      	ldr	r2, [pc, #144]	@ (8004ddc <HAL_DMA_Start_IT+0x220>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d013      	beq.n	8004d78 <HAL_DMA_Start_IT+0x1bc>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a22      	ldr	r2, [pc, #136]	@ (8004de0 <HAL_DMA_Start_IT+0x224>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00e      	beq.n	8004d78 <HAL_DMA_Start_IT+0x1bc>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a21      	ldr	r2, [pc, #132]	@ (8004de4 <HAL_DMA_Start_IT+0x228>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d009      	beq.n	8004d78 <HAL_DMA_Start_IT+0x1bc>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1f      	ldr	r2, [pc, #124]	@ (8004de8 <HAL_DMA_Start_IT+0x22c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <HAL_DMA_Start_IT+0x1bc>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1e      	ldr	r2, [pc, #120]	@ (8004dec <HAL_DMA_Start_IT+0x230>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d101      	bne.n	8004d7c <HAL_DMA_Start_IT+0x1c0>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <HAL_DMA_Start_IT+0x1c2>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d036      	beq.n	8004df0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f023 021e 	bic.w	r2, r3, #30
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0216 	orr.w	r2, r2, #22
 8004d94:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d03e      	beq.n	8004e1c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f042 0208 	orr.w	r2, r2, #8
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	e035      	b.n	8004e1c <HAL_DMA_Start_IT+0x260>
 8004db0:	40020010 	.word	0x40020010
 8004db4:	40020028 	.word	0x40020028
 8004db8:	40020040 	.word	0x40020040
 8004dbc:	40020058 	.word	0x40020058
 8004dc0:	40020070 	.word	0x40020070
 8004dc4:	40020088 	.word	0x40020088
 8004dc8:	400200a0 	.word	0x400200a0
 8004dcc:	400200b8 	.word	0x400200b8
 8004dd0:	40020410 	.word	0x40020410
 8004dd4:	40020428 	.word	0x40020428
 8004dd8:	40020440 	.word	0x40020440
 8004ddc:	40020458 	.word	0x40020458
 8004de0:	40020470 	.word	0x40020470
 8004de4:	40020488 	.word	0x40020488
 8004de8:	400204a0 	.word	0x400204a0
 8004dec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f023 020e 	bic.w	r2, r3, #14
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 020a 	orr.w	r2, r2, #10
 8004e02:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d007      	beq.n	8004e1c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0204 	orr.w	r2, r2, #4
 8004e1a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a83      	ldr	r2, [pc, #524]	@ (8005030 <HAL_DMA_Start_IT+0x474>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d072      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a82      	ldr	r2, [pc, #520]	@ (8005034 <HAL_DMA_Start_IT+0x478>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d06d      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a80      	ldr	r2, [pc, #512]	@ (8005038 <HAL_DMA_Start_IT+0x47c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d068      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a7f      	ldr	r2, [pc, #508]	@ (800503c <HAL_DMA_Start_IT+0x480>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d063      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a7d      	ldr	r2, [pc, #500]	@ (8005040 <HAL_DMA_Start_IT+0x484>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d05e      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a7c      	ldr	r2, [pc, #496]	@ (8005044 <HAL_DMA_Start_IT+0x488>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d059      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a7a      	ldr	r2, [pc, #488]	@ (8005048 <HAL_DMA_Start_IT+0x48c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d054      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a79      	ldr	r2, [pc, #484]	@ (800504c <HAL_DMA_Start_IT+0x490>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d04f      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a77      	ldr	r2, [pc, #476]	@ (8005050 <HAL_DMA_Start_IT+0x494>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d04a      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a76      	ldr	r2, [pc, #472]	@ (8005054 <HAL_DMA_Start_IT+0x498>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d045      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a74      	ldr	r2, [pc, #464]	@ (8005058 <HAL_DMA_Start_IT+0x49c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d040      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a73      	ldr	r2, [pc, #460]	@ (800505c <HAL_DMA_Start_IT+0x4a0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d03b      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a71      	ldr	r2, [pc, #452]	@ (8005060 <HAL_DMA_Start_IT+0x4a4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d036      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a70      	ldr	r2, [pc, #448]	@ (8005064 <HAL_DMA_Start_IT+0x4a8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d031      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a6e      	ldr	r2, [pc, #440]	@ (8005068 <HAL_DMA_Start_IT+0x4ac>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d02c      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a6d      	ldr	r2, [pc, #436]	@ (800506c <HAL_DMA_Start_IT+0x4b0>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d027      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a6b      	ldr	r2, [pc, #428]	@ (8005070 <HAL_DMA_Start_IT+0x4b4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d022      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a6a      	ldr	r2, [pc, #424]	@ (8005074 <HAL_DMA_Start_IT+0x4b8>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d01d      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a68      	ldr	r2, [pc, #416]	@ (8005078 <HAL_DMA_Start_IT+0x4bc>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d018      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a67      	ldr	r2, [pc, #412]	@ (800507c <HAL_DMA_Start_IT+0x4c0>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d013      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a65      	ldr	r2, [pc, #404]	@ (8005080 <HAL_DMA_Start_IT+0x4c4>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00e      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a64      	ldr	r2, [pc, #400]	@ (8005084 <HAL_DMA_Start_IT+0x4c8>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d009      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a62      	ldr	r2, [pc, #392]	@ (8005088 <HAL_DMA_Start_IT+0x4cc>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d004      	beq.n	8004f0c <HAL_DMA_Start_IT+0x350>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a61      	ldr	r2, [pc, #388]	@ (800508c <HAL_DMA_Start_IT+0x4d0>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d101      	bne.n	8004f10 <HAL_DMA_Start_IT+0x354>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e000      	b.n	8004f12 <HAL_DMA_Start_IT+0x356>
 8004f10:	2300      	movs	r3, #0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d01a      	beq.n	8004f4c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d007      	beq.n	8004f34 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f32:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d007      	beq.n	8004f4c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f4a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a37      	ldr	r2, [pc, #220]	@ (8005030 <HAL_DMA_Start_IT+0x474>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d04a      	beq.n	8004fec <HAL_DMA_Start_IT+0x430>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a36      	ldr	r2, [pc, #216]	@ (8005034 <HAL_DMA_Start_IT+0x478>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d045      	beq.n	8004fec <HAL_DMA_Start_IT+0x430>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a34      	ldr	r2, [pc, #208]	@ (8005038 <HAL_DMA_Start_IT+0x47c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d040      	beq.n	8004fec <HAL_DMA_Start_IT+0x430>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a33      	ldr	r2, [pc, #204]	@ (800503c <HAL_DMA_Start_IT+0x480>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d03b      	beq.n	8004fec <HAL_DMA_Start_IT+0x430>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a31      	ldr	r2, [pc, #196]	@ (8005040 <HAL_DMA_Start_IT+0x484>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d036      	beq.n	8004fec <HAL_DMA_Start_IT+0x430>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a30      	ldr	r2, [pc, #192]	@ (8005044 <HAL_DMA_Start_IT+0x488>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d031      	beq.n	8004fec <HAL_DMA_Start_IT+0x430>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a2e      	ldr	r2, [pc, #184]	@ (8005048 <HAL_DMA_Start_IT+0x48c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d02c      	beq.n	8004fec <HAL_DMA_Start_IT+0x430>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a2d      	ldr	r2, [pc, #180]	@ (800504c <HAL_DMA_Start_IT+0x490>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d027      	beq.n	8004fec <HAL_DMA_Start_IT+0x430>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a2b      	ldr	r2, [pc, #172]	@ (8005050 <HAL_DMA_Start_IT+0x494>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d022      	beq.n	8004fec <HAL_DMA_Start_IT+0x430>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a2a      	ldr	r2, [pc, #168]	@ (8005054 <HAL_DMA_Start_IT+0x498>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d01d      	beq.n	8004fec <HAL_DMA_Start_IT+0x430>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a28      	ldr	r2, [pc, #160]	@ (8005058 <HAL_DMA_Start_IT+0x49c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d018      	beq.n	8004fec <HAL_DMA_Start_IT+0x430>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a27      	ldr	r2, [pc, #156]	@ (800505c <HAL_DMA_Start_IT+0x4a0>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d013      	beq.n	8004fec <HAL_DMA_Start_IT+0x430>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a25      	ldr	r2, [pc, #148]	@ (8005060 <HAL_DMA_Start_IT+0x4a4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00e      	beq.n	8004fec <HAL_DMA_Start_IT+0x430>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a24      	ldr	r2, [pc, #144]	@ (8005064 <HAL_DMA_Start_IT+0x4a8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d009      	beq.n	8004fec <HAL_DMA_Start_IT+0x430>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a22      	ldr	r2, [pc, #136]	@ (8005068 <HAL_DMA_Start_IT+0x4ac>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d004      	beq.n	8004fec <HAL_DMA_Start_IT+0x430>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a21      	ldr	r2, [pc, #132]	@ (800506c <HAL_DMA_Start_IT+0x4b0>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d108      	bne.n	8004ffe <HAL_DMA_Start_IT+0x442>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	e012      	b.n	8005024 <HAL_DMA_Start_IT+0x468>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f042 0201 	orr.w	r2, r2, #1
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e009      	b.n	8005024 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005016:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005024:	7dfb      	ldrb	r3, [r7, #23]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	40020010 	.word	0x40020010
 8005034:	40020028 	.word	0x40020028
 8005038:	40020040 	.word	0x40020040
 800503c:	40020058 	.word	0x40020058
 8005040:	40020070 	.word	0x40020070
 8005044:	40020088 	.word	0x40020088
 8005048:	400200a0 	.word	0x400200a0
 800504c:	400200b8 	.word	0x400200b8
 8005050:	40020410 	.word	0x40020410
 8005054:	40020428 	.word	0x40020428
 8005058:	40020440 	.word	0x40020440
 800505c:	40020458 	.word	0x40020458
 8005060:	40020470 	.word	0x40020470
 8005064:	40020488 	.word	0x40020488
 8005068:	400204a0 	.word	0x400204a0
 800506c:	400204b8 	.word	0x400204b8
 8005070:	58025408 	.word	0x58025408
 8005074:	5802541c 	.word	0x5802541c
 8005078:	58025430 	.word	0x58025430
 800507c:	58025444 	.word	0x58025444
 8005080:	58025458 	.word	0x58025458
 8005084:	5802546c 	.word	0x5802546c
 8005088:	58025480 	.word	0x58025480
 800508c:	58025494 	.word	0x58025494

08005090 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08a      	sub	sp, #40	@ 0x28
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800509c:	4b67      	ldr	r3, [pc, #412]	@ (800523c <HAL_DMA_IRQHandler+0x1ac>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a67      	ldr	r2, [pc, #412]	@ (8005240 <HAL_DMA_IRQHandler+0x1b0>)
 80050a2:	fba2 2303 	umull	r2, r3, r2, r3
 80050a6:	0a9b      	lsrs	r3, r3, #10
 80050a8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ae:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a5f      	ldr	r2, [pc, #380]	@ (8005244 <HAL_DMA_IRQHandler+0x1b4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d04a      	beq.n	8005162 <HAL_DMA_IRQHandler+0xd2>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a5d      	ldr	r2, [pc, #372]	@ (8005248 <HAL_DMA_IRQHandler+0x1b8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d045      	beq.n	8005162 <HAL_DMA_IRQHandler+0xd2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a5c      	ldr	r2, [pc, #368]	@ (800524c <HAL_DMA_IRQHandler+0x1bc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d040      	beq.n	8005162 <HAL_DMA_IRQHandler+0xd2>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a5a      	ldr	r2, [pc, #360]	@ (8005250 <HAL_DMA_IRQHandler+0x1c0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d03b      	beq.n	8005162 <HAL_DMA_IRQHandler+0xd2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a59      	ldr	r2, [pc, #356]	@ (8005254 <HAL_DMA_IRQHandler+0x1c4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d036      	beq.n	8005162 <HAL_DMA_IRQHandler+0xd2>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a57      	ldr	r2, [pc, #348]	@ (8005258 <HAL_DMA_IRQHandler+0x1c8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d031      	beq.n	8005162 <HAL_DMA_IRQHandler+0xd2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a56      	ldr	r2, [pc, #344]	@ (800525c <HAL_DMA_IRQHandler+0x1cc>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d02c      	beq.n	8005162 <HAL_DMA_IRQHandler+0xd2>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a54      	ldr	r2, [pc, #336]	@ (8005260 <HAL_DMA_IRQHandler+0x1d0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d027      	beq.n	8005162 <HAL_DMA_IRQHandler+0xd2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a53      	ldr	r2, [pc, #332]	@ (8005264 <HAL_DMA_IRQHandler+0x1d4>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d022      	beq.n	8005162 <HAL_DMA_IRQHandler+0xd2>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a51      	ldr	r2, [pc, #324]	@ (8005268 <HAL_DMA_IRQHandler+0x1d8>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d01d      	beq.n	8005162 <HAL_DMA_IRQHandler+0xd2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a50      	ldr	r2, [pc, #320]	@ (800526c <HAL_DMA_IRQHandler+0x1dc>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d018      	beq.n	8005162 <HAL_DMA_IRQHandler+0xd2>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a4e      	ldr	r2, [pc, #312]	@ (8005270 <HAL_DMA_IRQHandler+0x1e0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d013      	beq.n	8005162 <HAL_DMA_IRQHandler+0xd2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a4d      	ldr	r2, [pc, #308]	@ (8005274 <HAL_DMA_IRQHandler+0x1e4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d00e      	beq.n	8005162 <HAL_DMA_IRQHandler+0xd2>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a4b      	ldr	r2, [pc, #300]	@ (8005278 <HAL_DMA_IRQHandler+0x1e8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d009      	beq.n	8005162 <HAL_DMA_IRQHandler+0xd2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a4a      	ldr	r2, [pc, #296]	@ (800527c <HAL_DMA_IRQHandler+0x1ec>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d004      	beq.n	8005162 <HAL_DMA_IRQHandler+0xd2>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a48      	ldr	r2, [pc, #288]	@ (8005280 <HAL_DMA_IRQHandler+0x1f0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d101      	bne.n	8005166 <HAL_DMA_IRQHandler+0xd6>
 8005162:	2301      	movs	r3, #1
 8005164:	e000      	b.n	8005168 <HAL_DMA_IRQHandler+0xd8>
 8005166:	2300      	movs	r3, #0
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 842b 	beq.w	80059c4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005172:	f003 031f 	and.w	r3, r3, #31
 8005176:	2208      	movs	r2, #8
 8005178:	409a      	lsls	r2, r3
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	4013      	ands	r3, r2
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 80a2 	beq.w	80052c8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a2e      	ldr	r2, [pc, #184]	@ (8005244 <HAL_DMA_IRQHandler+0x1b4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d04a      	beq.n	8005224 <HAL_DMA_IRQHandler+0x194>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a2d      	ldr	r2, [pc, #180]	@ (8005248 <HAL_DMA_IRQHandler+0x1b8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d045      	beq.n	8005224 <HAL_DMA_IRQHandler+0x194>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a2b      	ldr	r2, [pc, #172]	@ (800524c <HAL_DMA_IRQHandler+0x1bc>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d040      	beq.n	8005224 <HAL_DMA_IRQHandler+0x194>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a2a      	ldr	r2, [pc, #168]	@ (8005250 <HAL_DMA_IRQHandler+0x1c0>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d03b      	beq.n	8005224 <HAL_DMA_IRQHandler+0x194>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a28      	ldr	r2, [pc, #160]	@ (8005254 <HAL_DMA_IRQHandler+0x1c4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d036      	beq.n	8005224 <HAL_DMA_IRQHandler+0x194>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a27      	ldr	r2, [pc, #156]	@ (8005258 <HAL_DMA_IRQHandler+0x1c8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d031      	beq.n	8005224 <HAL_DMA_IRQHandler+0x194>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a25      	ldr	r2, [pc, #148]	@ (800525c <HAL_DMA_IRQHandler+0x1cc>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d02c      	beq.n	8005224 <HAL_DMA_IRQHandler+0x194>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a24      	ldr	r2, [pc, #144]	@ (8005260 <HAL_DMA_IRQHandler+0x1d0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d027      	beq.n	8005224 <HAL_DMA_IRQHandler+0x194>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a22      	ldr	r2, [pc, #136]	@ (8005264 <HAL_DMA_IRQHandler+0x1d4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d022      	beq.n	8005224 <HAL_DMA_IRQHandler+0x194>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a21      	ldr	r2, [pc, #132]	@ (8005268 <HAL_DMA_IRQHandler+0x1d8>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d01d      	beq.n	8005224 <HAL_DMA_IRQHandler+0x194>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a1f      	ldr	r2, [pc, #124]	@ (800526c <HAL_DMA_IRQHandler+0x1dc>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d018      	beq.n	8005224 <HAL_DMA_IRQHandler+0x194>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005270 <HAL_DMA_IRQHandler+0x1e0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d013      	beq.n	8005224 <HAL_DMA_IRQHandler+0x194>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a1c      	ldr	r2, [pc, #112]	@ (8005274 <HAL_DMA_IRQHandler+0x1e4>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00e      	beq.n	8005224 <HAL_DMA_IRQHandler+0x194>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1b      	ldr	r2, [pc, #108]	@ (8005278 <HAL_DMA_IRQHandler+0x1e8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d009      	beq.n	8005224 <HAL_DMA_IRQHandler+0x194>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a19      	ldr	r2, [pc, #100]	@ (800527c <HAL_DMA_IRQHandler+0x1ec>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d004      	beq.n	8005224 <HAL_DMA_IRQHandler+0x194>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a18      	ldr	r2, [pc, #96]	@ (8005280 <HAL_DMA_IRQHandler+0x1f0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d12f      	bne.n	8005284 <HAL_DMA_IRQHandler+0x1f4>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	bf14      	ite	ne
 8005232:	2301      	movne	r3, #1
 8005234:	2300      	moveq	r3, #0
 8005236:	b2db      	uxtb	r3, r3
 8005238:	e02e      	b.n	8005298 <HAL_DMA_IRQHandler+0x208>
 800523a:	bf00      	nop
 800523c:	24000004 	.word	0x24000004
 8005240:	1b4e81b5 	.word	0x1b4e81b5
 8005244:	40020010 	.word	0x40020010
 8005248:	40020028 	.word	0x40020028
 800524c:	40020040 	.word	0x40020040
 8005250:	40020058 	.word	0x40020058
 8005254:	40020070 	.word	0x40020070
 8005258:	40020088 	.word	0x40020088
 800525c:	400200a0 	.word	0x400200a0
 8005260:	400200b8 	.word	0x400200b8
 8005264:	40020410 	.word	0x40020410
 8005268:	40020428 	.word	0x40020428
 800526c:	40020440 	.word	0x40020440
 8005270:	40020458 	.word	0x40020458
 8005274:	40020470 	.word	0x40020470
 8005278:	40020488 	.word	0x40020488
 800527c:	400204a0 	.word	0x400204a0
 8005280:	400204b8 	.word	0x400204b8
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	bf14      	ite	ne
 8005292:	2301      	movne	r3, #1
 8005294:	2300      	moveq	r3, #0
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d015      	beq.n	80052c8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0204 	bic.w	r2, r2, #4
 80052aa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b0:	f003 031f 	and.w	r3, r3, #31
 80052b4:	2208      	movs	r2, #8
 80052b6:	409a      	lsls	r2, r3
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c0:	f043 0201 	orr.w	r2, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052cc:	f003 031f 	and.w	r3, r3, #31
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	fa22 f303 	lsr.w	r3, r2, r3
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d06e      	beq.n	80053bc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a69      	ldr	r2, [pc, #420]	@ (8005488 <HAL_DMA_IRQHandler+0x3f8>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d04a      	beq.n	800537e <HAL_DMA_IRQHandler+0x2ee>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a67      	ldr	r2, [pc, #412]	@ (800548c <HAL_DMA_IRQHandler+0x3fc>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d045      	beq.n	800537e <HAL_DMA_IRQHandler+0x2ee>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a66      	ldr	r2, [pc, #408]	@ (8005490 <HAL_DMA_IRQHandler+0x400>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d040      	beq.n	800537e <HAL_DMA_IRQHandler+0x2ee>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a64      	ldr	r2, [pc, #400]	@ (8005494 <HAL_DMA_IRQHandler+0x404>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d03b      	beq.n	800537e <HAL_DMA_IRQHandler+0x2ee>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a63      	ldr	r2, [pc, #396]	@ (8005498 <HAL_DMA_IRQHandler+0x408>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d036      	beq.n	800537e <HAL_DMA_IRQHandler+0x2ee>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a61      	ldr	r2, [pc, #388]	@ (800549c <HAL_DMA_IRQHandler+0x40c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d031      	beq.n	800537e <HAL_DMA_IRQHandler+0x2ee>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a60      	ldr	r2, [pc, #384]	@ (80054a0 <HAL_DMA_IRQHandler+0x410>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d02c      	beq.n	800537e <HAL_DMA_IRQHandler+0x2ee>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a5e      	ldr	r2, [pc, #376]	@ (80054a4 <HAL_DMA_IRQHandler+0x414>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d027      	beq.n	800537e <HAL_DMA_IRQHandler+0x2ee>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a5d      	ldr	r2, [pc, #372]	@ (80054a8 <HAL_DMA_IRQHandler+0x418>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d022      	beq.n	800537e <HAL_DMA_IRQHandler+0x2ee>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a5b      	ldr	r2, [pc, #364]	@ (80054ac <HAL_DMA_IRQHandler+0x41c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d01d      	beq.n	800537e <HAL_DMA_IRQHandler+0x2ee>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a5a      	ldr	r2, [pc, #360]	@ (80054b0 <HAL_DMA_IRQHandler+0x420>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d018      	beq.n	800537e <HAL_DMA_IRQHandler+0x2ee>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a58      	ldr	r2, [pc, #352]	@ (80054b4 <HAL_DMA_IRQHandler+0x424>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <HAL_DMA_IRQHandler+0x2ee>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a57      	ldr	r2, [pc, #348]	@ (80054b8 <HAL_DMA_IRQHandler+0x428>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00e      	beq.n	800537e <HAL_DMA_IRQHandler+0x2ee>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a55      	ldr	r2, [pc, #340]	@ (80054bc <HAL_DMA_IRQHandler+0x42c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d009      	beq.n	800537e <HAL_DMA_IRQHandler+0x2ee>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a54      	ldr	r2, [pc, #336]	@ (80054c0 <HAL_DMA_IRQHandler+0x430>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d004      	beq.n	800537e <HAL_DMA_IRQHandler+0x2ee>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a52      	ldr	r2, [pc, #328]	@ (80054c4 <HAL_DMA_IRQHandler+0x434>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d10a      	bne.n	8005394 <HAL_DMA_IRQHandler+0x304>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005388:	2b00      	cmp	r3, #0
 800538a:	bf14      	ite	ne
 800538c:	2301      	movne	r3, #1
 800538e:	2300      	moveq	r3, #0
 8005390:	b2db      	uxtb	r3, r3
 8005392:	e003      	b.n	800539c <HAL_DMA_IRQHandler+0x30c>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2300      	movs	r3, #0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00d      	beq.n	80053bc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a4:	f003 031f 	and.w	r3, r3, #31
 80053a8:	2201      	movs	r2, #1
 80053aa:	409a      	lsls	r2, r3
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b4:	f043 0202 	orr.w	r2, r3, #2
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053c0:	f003 031f 	and.w	r3, r3, #31
 80053c4:	2204      	movs	r2, #4
 80053c6:	409a      	lsls	r2, r3
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	4013      	ands	r3, r2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 808f 	beq.w	80054f0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005488 <HAL_DMA_IRQHandler+0x3f8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d04a      	beq.n	8005472 <HAL_DMA_IRQHandler+0x3e2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a2a      	ldr	r2, [pc, #168]	@ (800548c <HAL_DMA_IRQHandler+0x3fc>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d045      	beq.n	8005472 <HAL_DMA_IRQHandler+0x3e2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a29      	ldr	r2, [pc, #164]	@ (8005490 <HAL_DMA_IRQHandler+0x400>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d040      	beq.n	8005472 <HAL_DMA_IRQHandler+0x3e2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a27      	ldr	r2, [pc, #156]	@ (8005494 <HAL_DMA_IRQHandler+0x404>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d03b      	beq.n	8005472 <HAL_DMA_IRQHandler+0x3e2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a26      	ldr	r2, [pc, #152]	@ (8005498 <HAL_DMA_IRQHandler+0x408>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d036      	beq.n	8005472 <HAL_DMA_IRQHandler+0x3e2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a24      	ldr	r2, [pc, #144]	@ (800549c <HAL_DMA_IRQHandler+0x40c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d031      	beq.n	8005472 <HAL_DMA_IRQHandler+0x3e2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a23      	ldr	r2, [pc, #140]	@ (80054a0 <HAL_DMA_IRQHandler+0x410>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d02c      	beq.n	8005472 <HAL_DMA_IRQHandler+0x3e2>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a21      	ldr	r2, [pc, #132]	@ (80054a4 <HAL_DMA_IRQHandler+0x414>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d027      	beq.n	8005472 <HAL_DMA_IRQHandler+0x3e2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a20      	ldr	r2, [pc, #128]	@ (80054a8 <HAL_DMA_IRQHandler+0x418>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d022      	beq.n	8005472 <HAL_DMA_IRQHandler+0x3e2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a1e      	ldr	r2, [pc, #120]	@ (80054ac <HAL_DMA_IRQHandler+0x41c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d01d      	beq.n	8005472 <HAL_DMA_IRQHandler+0x3e2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1d      	ldr	r2, [pc, #116]	@ (80054b0 <HAL_DMA_IRQHandler+0x420>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d018      	beq.n	8005472 <HAL_DMA_IRQHandler+0x3e2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1b      	ldr	r2, [pc, #108]	@ (80054b4 <HAL_DMA_IRQHandler+0x424>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d013      	beq.n	8005472 <HAL_DMA_IRQHandler+0x3e2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1a      	ldr	r2, [pc, #104]	@ (80054b8 <HAL_DMA_IRQHandler+0x428>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00e      	beq.n	8005472 <HAL_DMA_IRQHandler+0x3e2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a18      	ldr	r2, [pc, #96]	@ (80054bc <HAL_DMA_IRQHandler+0x42c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d009      	beq.n	8005472 <HAL_DMA_IRQHandler+0x3e2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a17      	ldr	r2, [pc, #92]	@ (80054c0 <HAL_DMA_IRQHandler+0x430>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d004      	beq.n	8005472 <HAL_DMA_IRQHandler+0x3e2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a15      	ldr	r2, [pc, #84]	@ (80054c4 <HAL_DMA_IRQHandler+0x434>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d12a      	bne.n	80054c8 <HAL_DMA_IRQHandler+0x438>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	bf14      	ite	ne
 8005480:	2301      	movne	r3, #1
 8005482:	2300      	moveq	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	e023      	b.n	80054d0 <HAL_DMA_IRQHandler+0x440>
 8005488:	40020010 	.word	0x40020010
 800548c:	40020028 	.word	0x40020028
 8005490:	40020040 	.word	0x40020040
 8005494:	40020058 	.word	0x40020058
 8005498:	40020070 	.word	0x40020070
 800549c:	40020088 	.word	0x40020088
 80054a0:	400200a0 	.word	0x400200a0
 80054a4:	400200b8 	.word	0x400200b8
 80054a8:	40020410 	.word	0x40020410
 80054ac:	40020428 	.word	0x40020428
 80054b0:	40020440 	.word	0x40020440
 80054b4:	40020458 	.word	0x40020458
 80054b8:	40020470 	.word	0x40020470
 80054bc:	40020488 	.word	0x40020488
 80054c0:	400204a0 	.word	0x400204a0
 80054c4:	400204b8 	.word	0x400204b8
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2300      	movs	r3, #0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00d      	beq.n	80054f0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d8:	f003 031f 	and.w	r3, r3, #31
 80054dc:	2204      	movs	r2, #4
 80054de:	409a      	lsls	r2, r3
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e8:	f043 0204 	orr.w	r2, r3, #4
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054f4:	f003 031f 	and.w	r3, r3, #31
 80054f8:	2210      	movs	r2, #16
 80054fa:	409a      	lsls	r2, r3
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	4013      	ands	r3, r2
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 80a6 	beq.w	8005652 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a85      	ldr	r2, [pc, #532]	@ (8005720 <HAL_DMA_IRQHandler+0x690>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d04a      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x516>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a83      	ldr	r2, [pc, #524]	@ (8005724 <HAL_DMA_IRQHandler+0x694>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d045      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x516>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a82      	ldr	r2, [pc, #520]	@ (8005728 <HAL_DMA_IRQHandler+0x698>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d040      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x516>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a80      	ldr	r2, [pc, #512]	@ (800572c <HAL_DMA_IRQHandler+0x69c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d03b      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x516>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a7f      	ldr	r2, [pc, #508]	@ (8005730 <HAL_DMA_IRQHandler+0x6a0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d036      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x516>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a7d      	ldr	r2, [pc, #500]	@ (8005734 <HAL_DMA_IRQHandler+0x6a4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d031      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x516>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a7c      	ldr	r2, [pc, #496]	@ (8005738 <HAL_DMA_IRQHandler+0x6a8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d02c      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x516>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a7a      	ldr	r2, [pc, #488]	@ (800573c <HAL_DMA_IRQHandler+0x6ac>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d027      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x516>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a79      	ldr	r2, [pc, #484]	@ (8005740 <HAL_DMA_IRQHandler+0x6b0>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d022      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x516>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a77      	ldr	r2, [pc, #476]	@ (8005744 <HAL_DMA_IRQHandler+0x6b4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d01d      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x516>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a76      	ldr	r2, [pc, #472]	@ (8005748 <HAL_DMA_IRQHandler+0x6b8>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d018      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x516>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a74      	ldr	r2, [pc, #464]	@ (800574c <HAL_DMA_IRQHandler+0x6bc>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d013      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x516>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a73      	ldr	r2, [pc, #460]	@ (8005750 <HAL_DMA_IRQHandler+0x6c0>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d00e      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x516>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a71      	ldr	r2, [pc, #452]	@ (8005754 <HAL_DMA_IRQHandler+0x6c4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d009      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x516>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a70      	ldr	r2, [pc, #448]	@ (8005758 <HAL_DMA_IRQHandler+0x6c8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d004      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x516>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a6e      	ldr	r2, [pc, #440]	@ (800575c <HAL_DMA_IRQHandler+0x6cc>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d10a      	bne.n	80055bc <HAL_DMA_IRQHandler+0x52c>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0308 	and.w	r3, r3, #8
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	bf14      	ite	ne
 80055b4:	2301      	movne	r3, #1
 80055b6:	2300      	moveq	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	e009      	b.n	80055d0 <HAL_DMA_IRQHandler+0x540>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	bf14      	ite	ne
 80055ca:	2301      	movne	r3, #1
 80055cc:	2300      	moveq	r3, #0
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d03e      	beq.n	8005652 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055d8:	f003 031f 	and.w	r3, r3, #31
 80055dc:	2210      	movs	r2, #16
 80055de:	409a      	lsls	r2, r3
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d018      	beq.n	8005624 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d108      	bne.n	8005612 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005604:	2b00      	cmp	r3, #0
 8005606:	d024      	beq.n	8005652 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	4798      	blx	r3
 8005610:	e01f      	b.n	8005652 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005616:	2b00      	cmp	r3, #0
 8005618:	d01b      	beq.n	8005652 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	4798      	blx	r3
 8005622:	e016      	b.n	8005652 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800562e:	2b00      	cmp	r3, #0
 8005630:	d107      	bne.n	8005642 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0208 	bic.w	r2, r2, #8
 8005640:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005656:	f003 031f 	and.w	r3, r3, #31
 800565a:	2220      	movs	r2, #32
 800565c:	409a      	lsls	r2, r3
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	4013      	ands	r3, r2
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 8110 	beq.w	8005888 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a2c      	ldr	r2, [pc, #176]	@ (8005720 <HAL_DMA_IRQHandler+0x690>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d04a      	beq.n	8005708 <HAL_DMA_IRQHandler+0x678>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a2b      	ldr	r2, [pc, #172]	@ (8005724 <HAL_DMA_IRQHandler+0x694>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d045      	beq.n	8005708 <HAL_DMA_IRQHandler+0x678>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a29      	ldr	r2, [pc, #164]	@ (8005728 <HAL_DMA_IRQHandler+0x698>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d040      	beq.n	8005708 <HAL_DMA_IRQHandler+0x678>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a28      	ldr	r2, [pc, #160]	@ (800572c <HAL_DMA_IRQHandler+0x69c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d03b      	beq.n	8005708 <HAL_DMA_IRQHandler+0x678>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a26      	ldr	r2, [pc, #152]	@ (8005730 <HAL_DMA_IRQHandler+0x6a0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d036      	beq.n	8005708 <HAL_DMA_IRQHandler+0x678>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a25      	ldr	r2, [pc, #148]	@ (8005734 <HAL_DMA_IRQHandler+0x6a4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d031      	beq.n	8005708 <HAL_DMA_IRQHandler+0x678>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a23      	ldr	r2, [pc, #140]	@ (8005738 <HAL_DMA_IRQHandler+0x6a8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d02c      	beq.n	8005708 <HAL_DMA_IRQHandler+0x678>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a22      	ldr	r2, [pc, #136]	@ (800573c <HAL_DMA_IRQHandler+0x6ac>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d027      	beq.n	8005708 <HAL_DMA_IRQHandler+0x678>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a20      	ldr	r2, [pc, #128]	@ (8005740 <HAL_DMA_IRQHandler+0x6b0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d022      	beq.n	8005708 <HAL_DMA_IRQHandler+0x678>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a1f      	ldr	r2, [pc, #124]	@ (8005744 <HAL_DMA_IRQHandler+0x6b4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d01d      	beq.n	8005708 <HAL_DMA_IRQHandler+0x678>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005748 <HAL_DMA_IRQHandler+0x6b8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d018      	beq.n	8005708 <HAL_DMA_IRQHandler+0x678>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a1c      	ldr	r2, [pc, #112]	@ (800574c <HAL_DMA_IRQHandler+0x6bc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d013      	beq.n	8005708 <HAL_DMA_IRQHandler+0x678>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005750 <HAL_DMA_IRQHandler+0x6c0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d00e      	beq.n	8005708 <HAL_DMA_IRQHandler+0x678>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a19      	ldr	r2, [pc, #100]	@ (8005754 <HAL_DMA_IRQHandler+0x6c4>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d009      	beq.n	8005708 <HAL_DMA_IRQHandler+0x678>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a17      	ldr	r2, [pc, #92]	@ (8005758 <HAL_DMA_IRQHandler+0x6c8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d004      	beq.n	8005708 <HAL_DMA_IRQHandler+0x678>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a16      	ldr	r2, [pc, #88]	@ (800575c <HAL_DMA_IRQHandler+0x6cc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d12b      	bne.n	8005760 <HAL_DMA_IRQHandler+0x6d0>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0310 	and.w	r3, r3, #16
 8005712:	2b00      	cmp	r3, #0
 8005714:	bf14      	ite	ne
 8005716:	2301      	movne	r3, #1
 8005718:	2300      	moveq	r3, #0
 800571a:	b2db      	uxtb	r3, r3
 800571c:	e02a      	b.n	8005774 <HAL_DMA_IRQHandler+0x6e4>
 800571e:	bf00      	nop
 8005720:	40020010 	.word	0x40020010
 8005724:	40020028 	.word	0x40020028
 8005728:	40020040 	.word	0x40020040
 800572c:	40020058 	.word	0x40020058
 8005730:	40020070 	.word	0x40020070
 8005734:	40020088 	.word	0x40020088
 8005738:	400200a0 	.word	0x400200a0
 800573c:	400200b8 	.word	0x400200b8
 8005740:	40020410 	.word	0x40020410
 8005744:	40020428 	.word	0x40020428
 8005748:	40020440 	.word	0x40020440
 800574c:	40020458 	.word	0x40020458
 8005750:	40020470 	.word	0x40020470
 8005754:	40020488 	.word	0x40020488
 8005758:	400204a0 	.word	0x400204a0
 800575c:	400204b8 	.word	0x400204b8
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	bf14      	ite	ne
 800576e:	2301      	movne	r3, #1
 8005770:	2300      	moveq	r3, #0
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 8087 	beq.w	8005888 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800577e:	f003 031f 	and.w	r3, r3, #31
 8005782:	2220      	movs	r2, #32
 8005784:	409a      	lsls	r2, r3
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b04      	cmp	r3, #4
 8005794:	d139      	bne.n	800580a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0216 	bic.w	r2, r2, #22
 80057a4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	695a      	ldr	r2, [r3, #20]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057b4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d103      	bne.n	80057c6 <HAL_DMA_IRQHandler+0x736>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d007      	beq.n	80057d6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 0208 	bic.w	r2, r2, #8
 80057d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	223f      	movs	r2, #63	@ 0x3f
 80057e0:	409a      	lsls	r2, r3
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 834a 	beq.w	8005e94 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	4798      	blx	r3
          }
          return;
 8005808:	e344      	b.n	8005e94 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d018      	beq.n	800584a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d108      	bne.n	8005838 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582a:	2b00      	cmp	r3, #0
 800582c:	d02c      	beq.n	8005888 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	4798      	blx	r3
 8005836:	e027      	b.n	8005888 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800583c:	2b00      	cmp	r3, #0
 800583e:	d023      	beq.n	8005888 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	4798      	blx	r3
 8005848:	e01e      	b.n	8005888 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10f      	bne.n	8005878 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0210 	bic.w	r2, r2, #16
 8005866:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8306 	beq.w	8005e9e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 8088 	beq.w	80059b0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2204      	movs	r2, #4
 80058a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a7a      	ldr	r2, [pc, #488]	@ (8005a98 <HAL_DMA_IRQHandler+0xa08>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d04a      	beq.n	8005948 <HAL_DMA_IRQHandler+0x8b8>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a79      	ldr	r2, [pc, #484]	@ (8005a9c <HAL_DMA_IRQHandler+0xa0c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d045      	beq.n	8005948 <HAL_DMA_IRQHandler+0x8b8>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a77      	ldr	r2, [pc, #476]	@ (8005aa0 <HAL_DMA_IRQHandler+0xa10>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d040      	beq.n	8005948 <HAL_DMA_IRQHandler+0x8b8>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a76      	ldr	r2, [pc, #472]	@ (8005aa4 <HAL_DMA_IRQHandler+0xa14>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d03b      	beq.n	8005948 <HAL_DMA_IRQHandler+0x8b8>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a74      	ldr	r2, [pc, #464]	@ (8005aa8 <HAL_DMA_IRQHandler+0xa18>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d036      	beq.n	8005948 <HAL_DMA_IRQHandler+0x8b8>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a73      	ldr	r2, [pc, #460]	@ (8005aac <HAL_DMA_IRQHandler+0xa1c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d031      	beq.n	8005948 <HAL_DMA_IRQHandler+0x8b8>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a71      	ldr	r2, [pc, #452]	@ (8005ab0 <HAL_DMA_IRQHandler+0xa20>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d02c      	beq.n	8005948 <HAL_DMA_IRQHandler+0x8b8>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a70      	ldr	r2, [pc, #448]	@ (8005ab4 <HAL_DMA_IRQHandler+0xa24>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d027      	beq.n	8005948 <HAL_DMA_IRQHandler+0x8b8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a6e      	ldr	r2, [pc, #440]	@ (8005ab8 <HAL_DMA_IRQHandler+0xa28>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d022      	beq.n	8005948 <HAL_DMA_IRQHandler+0x8b8>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a6d      	ldr	r2, [pc, #436]	@ (8005abc <HAL_DMA_IRQHandler+0xa2c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d01d      	beq.n	8005948 <HAL_DMA_IRQHandler+0x8b8>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a6b      	ldr	r2, [pc, #428]	@ (8005ac0 <HAL_DMA_IRQHandler+0xa30>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d018      	beq.n	8005948 <HAL_DMA_IRQHandler+0x8b8>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a6a      	ldr	r2, [pc, #424]	@ (8005ac4 <HAL_DMA_IRQHandler+0xa34>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d013      	beq.n	8005948 <HAL_DMA_IRQHandler+0x8b8>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a68      	ldr	r2, [pc, #416]	@ (8005ac8 <HAL_DMA_IRQHandler+0xa38>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00e      	beq.n	8005948 <HAL_DMA_IRQHandler+0x8b8>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a67      	ldr	r2, [pc, #412]	@ (8005acc <HAL_DMA_IRQHandler+0xa3c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d009      	beq.n	8005948 <HAL_DMA_IRQHandler+0x8b8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a65      	ldr	r2, [pc, #404]	@ (8005ad0 <HAL_DMA_IRQHandler+0xa40>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d004      	beq.n	8005948 <HAL_DMA_IRQHandler+0x8b8>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a64      	ldr	r2, [pc, #400]	@ (8005ad4 <HAL_DMA_IRQHandler+0xa44>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d108      	bne.n	800595a <HAL_DMA_IRQHandler+0x8ca>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 0201 	bic.w	r2, r2, #1
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	e007      	b.n	800596a <HAL_DMA_IRQHandler+0x8da>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0201 	bic.w	r2, r2, #1
 8005968:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	3301      	adds	r3, #1
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005972:	429a      	cmp	r2, r3
 8005974:	d307      	bcc.n	8005986 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1f2      	bne.n	800596a <HAL_DMA_IRQHandler+0x8da>
 8005984:	e000      	b.n	8005988 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005986:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d004      	beq.n	80059a0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2203      	movs	r2, #3
 800599a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800599e:	e003      	b.n	80059a8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 8272 	beq.w	8005e9e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	4798      	blx	r3
 80059c2:	e26c      	b.n	8005e9e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a43      	ldr	r2, [pc, #268]	@ (8005ad8 <HAL_DMA_IRQHandler+0xa48>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d022      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x984>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a42      	ldr	r2, [pc, #264]	@ (8005adc <HAL_DMA_IRQHandler+0xa4c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d01d      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x984>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a40      	ldr	r2, [pc, #256]	@ (8005ae0 <HAL_DMA_IRQHandler+0xa50>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d018      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x984>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a3f      	ldr	r2, [pc, #252]	@ (8005ae4 <HAL_DMA_IRQHandler+0xa54>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d013      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x984>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a3d      	ldr	r2, [pc, #244]	@ (8005ae8 <HAL_DMA_IRQHandler+0xa58>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00e      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x984>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a3c      	ldr	r2, [pc, #240]	@ (8005aec <HAL_DMA_IRQHandler+0xa5c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d009      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x984>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a3a      	ldr	r2, [pc, #232]	@ (8005af0 <HAL_DMA_IRQHandler+0xa60>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d004      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x984>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a39      	ldr	r2, [pc, #228]	@ (8005af4 <HAL_DMA_IRQHandler+0xa64>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d101      	bne.n	8005a18 <HAL_DMA_IRQHandler+0x988>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <HAL_DMA_IRQHandler+0x98a>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 823f 	beq.w	8005e9e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a2c:	f003 031f 	and.w	r3, r3, #31
 8005a30:	2204      	movs	r2, #4
 8005a32:	409a      	lsls	r2, r3
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	4013      	ands	r3, r2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 80cd 	beq.w	8005bd8 <HAL_DMA_IRQHandler+0xb48>
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f003 0304 	and.w	r3, r3, #4
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 80c7 	beq.w	8005bd8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a4e:	f003 031f 	and.w	r3, r3, #31
 8005a52:	2204      	movs	r2, #4
 8005a54:	409a      	lsls	r2, r3
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d049      	beq.n	8005af8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d109      	bne.n	8005a82 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 8210 	beq.w	8005e98 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a80:	e20a      	b.n	8005e98 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 8206 	beq.w	8005e98 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a94:	e200      	b.n	8005e98 <HAL_DMA_IRQHandler+0xe08>
 8005a96:	bf00      	nop
 8005a98:	40020010 	.word	0x40020010
 8005a9c:	40020028 	.word	0x40020028
 8005aa0:	40020040 	.word	0x40020040
 8005aa4:	40020058 	.word	0x40020058
 8005aa8:	40020070 	.word	0x40020070
 8005aac:	40020088 	.word	0x40020088
 8005ab0:	400200a0 	.word	0x400200a0
 8005ab4:	400200b8 	.word	0x400200b8
 8005ab8:	40020410 	.word	0x40020410
 8005abc:	40020428 	.word	0x40020428
 8005ac0:	40020440 	.word	0x40020440
 8005ac4:	40020458 	.word	0x40020458
 8005ac8:	40020470 	.word	0x40020470
 8005acc:	40020488 	.word	0x40020488
 8005ad0:	400204a0 	.word	0x400204a0
 8005ad4:	400204b8 	.word	0x400204b8
 8005ad8:	58025408 	.word	0x58025408
 8005adc:	5802541c 	.word	0x5802541c
 8005ae0:	58025430 	.word	0x58025430
 8005ae4:	58025444 	.word	0x58025444
 8005ae8:	58025458 	.word	0x58025458
 8005aec:	5802546c 	.word	0x5802546c
 8005af0:	58025480 	.word	0x58025480
 8005af4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d160      	bne.n	8005bc4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a7f      	ldr	r2, [pc, #508]	@ (8005d04 <HAL_DMA_IRQHandler+0xc74>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d04a      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0xb12>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a7d      	ldr	r2, [pc, #500]	@ (8005d08 <HAL_DMA_IRQHandler+0xc78>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d045      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0xb12>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a7c      	ldr	r2, [pc, #496]	@ (8005d0c <HAL_DMA_IRQHandler+0xc7c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d040      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0xb12>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a7a      	ldr	r2, [pc, #488]	@ (8005d10 <HAL_DMA_IRQHandler+0xc80>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d03b      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0xb12>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a79      	ldr	r2, [pc, #484]	@ (8005d14 <HAL_DMA_IRQHandler+0xc84>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d036      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0xb12>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a77      	ldr	r2, [pc, #476]	@ (8005d18 <HAL_DMA_IRQHandler+0xc88>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d031      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0xb12>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a76      	ldr	r2, [pc, #472]	@ (8005d1c <HAL_DMA_IRQHandler+0xc8c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d02c      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0xb12>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a74      	ldr	r2, [pc, #464]	@ (8005d20 <HAL_DMA_IRQHandler+0xc90>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d027      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0xb12>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a73      	ldr	r2, [pc, #460]	@ (8005d24 <HAL_DMA_IRQHandler+0xc94>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d022      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0xb12>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a71      	ldr	r2, [pc, #452]	@ (8005d28 <HAL_DMA_IRQHandler+0xc98>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d01d      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0xb12>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a70      	ldr	r2, [pc, #448]	@ (8005d2c <HAL_DMA_IRQHandler+0xc9c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d018      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0xb12>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a6e      	ldr	r2, [pc, #440]	@ (8005d30 <HAL_DMA_IRQHandler+0xca0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d013      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0xb12>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a6d      	ldr	r2, [pc, #436]	@ (8005d34 <HAL_DMA_IRQHandler+0xca4>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00e      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0xb12>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a6b      	ldr	r2, [pc, #428]	@ (8005d38 <HAL_DMA_IRQHandler+0xca8>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d009      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0xb12>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a6a      	ldr	r2, [pc, #424]	@ (8005d3c <HAL_DMA_IRQHandler+0xcac>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d004      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0xb12>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a68      	ldr	r2, [pc, #416]	@ (8005d40 <HAL_DMA_IRQHandler+0xcb0>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d108      	bne.n	8005bb4 <HAL_DMA_IRQHandler+0xb24>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0208 	bic.w	r2, r2, #8
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	e007      	b.n	8005bc4 <HAL_DMA_IRQHandler+0xb34>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0204 	bic.w	r2, r2, #4
 8005bc2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 8165 	beq.w	8005e98 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bd6:	e15f      	b.n	8005e98 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bdc:	f003 031f 	and.w	r3, r3, #31
 8005be0:	2202      	movs	r2, #2
 8005be2:	409a      	lsls	r2, r3
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	4013      	ands	r3, r2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 80c5 	beq.w	8005d78 <HAL_DMA_IRQHandler+0xce8>
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 80bf 	beq.w	8005d78 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bfe:	f003 031f 	and.w	r3, r3, #31
 8005c02:	2202      	movs	r2, #2
 8005c04:	409a      	lsls	r2, r3
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d018      	beq.n	8005c46 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d109      	bne.n	8005c32 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 813a 	beq.w	8005e9c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c30:	e134      	b.n	8005e9c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f000 8130 	beq.w	8005e9c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c44:	e12a      	b.n	8005e9c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f003 0320 	and.w	r3, r3, #32
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f040 8089 	bne.w	8005d64 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a2b      	ldr	r2, [pc, #172]	@ (8005d04 <HAL_DMA_IRQHandler+0xc74>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d04a      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0xc62>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a29      	ldr	r2, [pc, #164]	@ (8005d08 <HAL_DMA_IRQHandler+0xc78>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d045      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0xc62>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a28      	ldr	r2, [pc, #160]	@ (8005d0c <HAL_DMA_IRQHandler+0xc7c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d040      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0xc62>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a26      	ldr	r2, [pc, #152]	@ (8005d10 <HAL_DMA_IRQHandler+0xc80>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d03b      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0xc62>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a25      	ldr	r2, [pc, #148]	@ (8005d14 <HAL_DMA_IRQHandler+0xc84>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d036      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0xc62>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a23      	ldr	r2, [pc, #140]	@ (8005d18 <HAL_DMA_IRQHandler+0xc88>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d031      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0xc62>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a22      	ldr	r2, [pc, #136]	@ (8005d1c <HAL_DMA_IRQHandler+0xc8c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d02c      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0xc62>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a20      	ldr	r2, [pc, #128]	@ (8005d20 <HAL_DMA_IRQHandler+0xc90>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d027      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0xc62>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8005d24 <HAL_DMA_IRQHandler+0xc94>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d022      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0xc62>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d28 <HAL_DMA_IRQHandler+0xc98>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d01d      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0xc62>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a1c      	ldr	r2, [pc, #112]	@ (8005d2c <HAL_DMA_IRQHandler+0xc9c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d018      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0xc62>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8005d30 <HAL_DMA_IRQHandler+0xca0>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d013      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0xc62>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a19      	ldr	r2, [pc, #100]	@ (8005d34 <HAL_DMA_IRQHandler+0xca4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00e      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0xc62>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a17      	ldr	r2, [pc, #92]	@ (8005d38 <HAL_DMA_IRQHandler+0xca8>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d009      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0xc62>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a16      	ldr	r2, [pc, #88]	@ (8005d3c <HAL_DMA_IRQHandler+0xcac>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d004      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0xc62>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a14      	ldr	r2, [pc, #80]	@ (8005d40 <HAL_DMA_IRQHandler+0xcb0>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d128      	bne.n	8005d44 <HAL_DMA_IRQHandler+0xcb4>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 0214 	bic.w	r2, r2, #20
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	e027      	b.n	8005d54 <HAL_DMA_IRQHandler+0xcc4>
 8005d04:	40020010 	.word	0x40020010
 8005d08:	40020028 	.word	0x40020028
 8005d0c:	40020040 	.word	0x40020040
 8005d10:	40020058 	.word	0x40020058
 8005d14:	40020070 	.word	0x40020070
 8005d18:	40020088 	.word	0x40020088
 8005d1c:	400200a0 	.word	0x400200a0
 8005d20:	400200b8 	.word	0x400200b8
 8005d24:	40020410 	.word	0x40020410
 8005d28:	40020428 	.word	0x40020428
 8005d2c:	40020440 	.word	0x40020440
 8005d30:	40020458 	.word	0x40020458
 8005d34:	40020470 	.word	0x40020470
 8005d38:	40020488 	.word	0x40020488
 8005d3c:	400204a0 	.word	0x400204a0
 8005d40:	400204b8 	.word	0x400204b8
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 020a 	bic.w	r2, r2, #10
 8005d52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 8097 	beq.w	8005e9c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d76:	e091      	b.n	8005e9c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d7c:	f003 031f 	and.w	r3, r3, #31
 8005d80:	2208      	movs	r2, #8
 8005d82:	409a      	lsls	r2, r3
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	4013      	ands	r3, r2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 8088 	beq.w	8005e9e <HAL_DMA_IRQHandler+0xe0e>
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 8082 	beq.w	8005e9e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a41      	ldr	r2, [pc, #260]	@ (8005ea4 <HAL_DMA_IRQHandler+0xe14>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d04a      	beq.n	8005e3a <HAL_DMA_IRQHandler+0xdaa>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a3f      	ldr	r2, [pc, #252]	@ (8005ea8 <HAL_DMA_IRQHandler+0xe18>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d045      	beq.n	8005e3a <HAL_DMA_IRQHandler+0xdaa>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a3e      	ldr	r2, [pc, #248]	@ (8005eac <HAL_DMA_IRQHandler+0xe1c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d040      	beq.n	8005e3a <HAL_DMA_IRQHandler+0xdaa>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a3c      	ldr	r2, [pc, #240]	@ (8005eb0 <HAL_DMA_IRQHandler+0xe20>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d03b      	beq.n	8005e3a <HAL_DMA_IRQHandler+0xdaa>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a3b      	ldr	r2, [pc, #236]	@ (8005eb4 <HAL_DMA_IRQHandler+0xe24>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d036      	beq.n	8005e3a <HAL_DMA_IRQHandler+0xdaa>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a39      	ldr	r2, [pc, #228]	@ (8005eb8 <HAL_DMA_IRQHandler+0xe28>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d031      	beq.n	8005e3a <HAL_DMA_IRQHandler+0xdaa>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a38      	ldr	r2, [pc, #224]	@ (8005ebc <HAL_DMA_IRQHandler+0xe2c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d02c      	beq.n	8005e3a <HAL_DMA_IRQHandler+0xdaa>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a36      	ldr	r2, [pc, #216]	@ (8005ec0 <HAL_DMA_IRQHandler+0xe30>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d027      	beq.n	8005e3a <HAL_DMA_IRQHandler+0xdaa>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a35      	ldr	r2, [pc, #212]	@ (8005ec4 <HAL_DMA_IRQHandler+0xe34>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d022      	beq.n	8005e3a <HAL_DMA_IRQHandler+0xdaa>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a33      	ldr	r2, [pc, #204]	@ (8005ec8 <HAL_DMA_IRQHandler+0xe38>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d01d      	beq.n	8005e3a <HAL_DMA_IRQHandler+0xdaa>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a32      	ldr	r2, [pc, #200]	@ (8005ecc <HAL_DMA_IRQHandler+0xe3c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d018      	beq.n	8005e3a <HAL_DMA_IRQHandler+0xdaa>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a30      	ldr	r2, [pc, #192]	@ (8005ed0 <HAL_DMA_IRQHandler+0xe40>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d013      	beq.n	8005e3a <HAL_DMA_IRQHandler+0xdaa>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a2f      	ldr	r2, [pc, #188]	@ (8005ed4 <HAL_DMA_IRQHandler+0xe44>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d00e      	beq.n	8005e3a <HAL_DMA_IRQHandler+0xdaa>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a2d      	ldr	r2, [pc, #180]	@ (8005ed8 <HAL_DMA_IRQHandler+0xe48>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d009      	beq.n	8005e3a <HAL_DMA_IRQHandler+0xdaa>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8005edc <HAL_DMA_IRQHandler+0xe4c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d004      	beq.n	8005e3a <HAL_DMA_IRQHandler+0xdaa>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a2a      	ldr	r2, [pc, #168]	@ (8005ee0 <HAL_DMA_IRQHandler+0xe50>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d108      	bne.n	8005e4c <HAL_DMA_IRQHandler+0xdbc>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 021c 	bic.w	r2, r2, #28
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	e007      	b.n	8005e5c <HAL_DMA_IRQHandler+0xdcc>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 020e 	bic.w	r2, r2, #14
 8005e5a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e60:	f003 031f 	and.w	r3, r3, #31
 8005e64:	2201      	movs	r2, #1
 8005e66:	409a      	lsls	r2, r3
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d009      	beq.n	8005e9e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	4798      	blx	r3
 8005e92:	e004      	b.n	8005e9e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005e94:	bf00      	nop
 8005e96:	e002      	b.n	8005e9e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e98:	bf00      	nop
 8005e9a:	e000      	b.n	8005e9e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e9c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005e9e:	3728      	adds	r7, #40	@ 0x28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	40020010 	.word	0x40020010
 8005ea8:	40020028 	.word	0x40020028
 8005eac:	40020040 	.word	0x40020040
 8005eb0:	40020058 	.word	0x40020058
 8005eb4:	40020070 	.word	0x40020070
 8005eb8:	40020088 	.word	0x40020088
 8005ebc:	400200a0 	.word	0x400200a0
 8005ec0:	400200b8 	.word	0x400200b8
 8005ec4:	40020410 	.word	0x40020410
 8005ec8:	40020428 	.word	0x40020428
 8005ecc:	40020440 	.word	0x40020440
 8005ed0:	40020458 	.word	0x40020458
 8005ed4:	40020470 	.word	0x40020470
 8005ed8:	40020488 	.word	0x40020488
 8005edc:	400204a0 	.word	0x400204a0
 8005ee0:	400204b8 	.word	0x400204b8

08005ee4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005efc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a7f      	ldr	r2, [pc, #508]	@ (8006100 <DMA_SetConfig+0x21c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d072      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a7d      	ldr	r2, [pc, #500]	@ (8006104 <DMA_SetConfig+0x220>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d06d      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a7c      	ldr	r2, [pc, #496]	@ (8006108 <DMA_SetConfig+0x224>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d068      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a7a      	ldr	r2, [pc, #488]	@ (800610c <DMA_SetConfig+0x228>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d063      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a79      	ldr	r2, [pc, #484]	@ (8006110 <DMA_SetConfig+0x22c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d05e      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a77      	ldr	r2, [pc, #476]	@ (8006114 <DMA_SetConfig+0x230>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d059      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a76      	ldr	r2, [pc, #472]	@ (8006118 <DMA_SetConfig+0x234>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d054      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a74      	ldr	r2, [pc, #464]	@ (800611c <DMA_SetConfig+0x238>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d04f      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a73      	ldr	r2, [pc, #460]	@ (8006120 <DMA_SetConfig+0x23c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d04a      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a71      	ldr	r2, [pc, #452]	@ (8006124 <DMA_SetConfig+0x240>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d045      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a70      	ldr	r2, [pc, #448]	@ (8006128 <DMA_SetConfig+0x244>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d040      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a6e      	ldr	r2, [pc, #440]	@ (800612c <DMA_SetConfig+0x248>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d03b      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a6d      	ldr	r2, [pc, #436]	@ (8006130 <DMA_SetConfig+0x24c>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d036      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a6b      	ldr	r2, [pc, #428]	@ (8006134 <DMA_SetConfig+0x250>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d031      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a6a      	ldr	r2, [pc, #424]	@ (8006138 <DMA_SetConfig+0x254>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d02c      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a68      	ldr	r2, [pc, #416]	@ (800613c <DMA_SetConfig+0x258>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d027      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a67      	ldr	r2, [pc, #412]	@ (8006140 <DMA_SetConfig+0x25c>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d022      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a65      	ldr	r2, [pc, #404]	@ (8006144 <DMA_SetConfig+0x260>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d01d      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a64      	ldr	r2, [pc, #400]	@ (8006148 <DMA_SetConfig+0x264>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d018      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a62      	ldr	r2, [pc, #392]	@ (800614c <DMA_SetConfig+0x268>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d013      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a61      	ldr	r2, [pc, #388]	@ (8006150 <DMA_SetConfig+0x26c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00e      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a5f      	ldr	r2, [pc, #380]	@ (8006154 <DMA_SetConfig+0x270>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d009      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a5e      	ldr	r2, [pc, #376]	@ (8006158 <DMA_SetConfig+0x274>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d004      	beq.n	8005fee <DMA_SetConfig+0x10a>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a5c      	ldr	r2, [pc, #368]	@ (800615c <DMA_SetConfig+0x278>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d101      	bne.n	8005ff2 <DMA_SetConfig+0x10e>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e000      	b.n	8005ff4 <DMA_SetConfig+0x110>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00d      	beq.n	8006014 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006000:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006006:	2b00      	cmp	r3, #0
 8006008:	d004      	beq.n	8006014 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006012:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a39      	ldr	r2, [pc, #228]	@ (8006100 <DMA_SetConfig+0x21c>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d04a      	beq.n	80060b4 <DMA_SetConfig+0x1d0>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a38      	ldr	r2, [pc, #224]	@ (8006104 <DMA_SetConfig+0x220>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d045      	beq.n	80060b4 <DMA_SetConfig+0x1d0>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a36      	ldr	r2, [pc, #216]	@ (8006108 <DMA_SetConfig+0x224>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d040      	beq.n	80060b4 <DMA_SetConfig+0x1d0>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a35      	ldr	r2, [pc, #212]	@ (800610c <DMA_SetConfig+0x228>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d03b      	beq.n	80060b4 <DMA_SetConfig+0x1d0>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a33      	ldr	r2, [pc, #204]	@ (8006110 <DMA_SetConfig+0x22c>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d036      	beq.n	80060b4 <DMA_SetConfig+0x1d0>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a32      	ldr	r2, [pc, #200]	@ (8006114 <DMA_SetConfig+0x230>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d031      	beq.n	80060b4 <DMA_SetConfig+0x1d0>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a30      	ldr	r2, [pc, #192]	@ (8006118 <DMA_SetConfig+0x234>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d02c      	beq.n	80060b4 <DMA_SetConfig+0x1d0>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a2f      	ldr	r2, [pc, #188]	@ (800611c <DMA_SetConfig+0x238>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d027      	beq.n	80060b4 <DMA_SetConfig+0x1d0>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a2d      	ldr	r2, [pc, #180]	@ (8006120 <DMA_SetConfig+0x23c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d022      	beq.n	80060b4 <DMA_SetConfig+0x1d0>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a2c      	ldr	r2, [pc, #176]	@ (8006124 <DMA_SetConfig+0x240>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d01d      	beq.n	80060b4 <DMA_SetConfig+0x1d0>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a2a      	ldr	r2, [pc, #168]	@ (8006128 <DMA_SetConfig+0x244>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d018      	beq.n	80060b4 <DMA_SetConfig+0x1d0>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a29      	ldr	r2, [pc, #164]	@ (800612c <DMA_SetConfig+0x248>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d013      	beq.n	80060b4 <DMA_SetConfig+0x1d0>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a27      	ldr	r2, [pc, #156]	@ (8006130 <DMA_SetConfig+0x24c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00e      	beq.n	80060b4 <DMA_SetConfig+0x1d0>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a26      	ldr	r2, [pc, #152]	@ (8006134 <DMA_SetConfig+0x250>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d009      	beq.n	80060b4 <DMA_SetConfig+0x1d0>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a24      	ldr	r2, [pc, #144]	@ (8006138 <DMA_SetConfig+0x254>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d004      	beq.n	80060b4 <DMA_SetConfig+0x1d0>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a23      	ldr	r2, [pc, #140]	@ (800613c <DMA_SetConfig+0x258>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d101      	bne.n	80060b8 <DMA_SetConfig+0x1d4>
 80060b4:	2301      	movs	r3, #1
 80060b6:	e000      	b.n	80060ba <DMA_SetConfig+0x1d6>
 80060b8:	2300      	movs	r3, #0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d059      	beq.n	8006172 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060c2:	f003 031f 	and.w	r3, r3, #31
 80060c6:	223f      	movs	r2, #63	@ 0x3f
 80060c8:	409a      	lsls	r2, r3
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80060dc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	2b40      	cmp	r3, #64	@ 0x40
 80060ec:	d138      	bne.n	8006160 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80060fe:	e086      	b.n	800620e <DMA_SetConfig+0x32a>
 8006100:	40020010 	.word	0x40020010
 8006104:	40020028 	.word	0x40020028
 8006108:	40020040 	.word	0x40020040
 800610c:	40020058 	.word	0x40020058
 8006110:	40020070 	.word	0x40020070
 8006114:	40020088 	.word	0x40020088
 8006118:	400200a0 	.word	0x400200a0
 800611c:	400200b8 	.word	0x400200b8
 8006120:	40020410 	.word	0x40020410
 8006124:	40020428 	.word	0x40020428
 8006128:	40020440 	.word	0x40020440
 800612c:	40020458 	.word	0x40020458
 8006130:	40020470 	.word	0x40020470
 8006134:	40020488 	.word	0x40020488
 8006138:	400204a0 	.word	0x400204a0
 800613c:	400204b8 	.word	0x400204b8
 8006140:	58025408 	.word	0x58025408
 8006144:	5802541c 	.word	0x5802541c
 8006148:	58025430 	.word	0x58025430
 800614c:	58025444 	.word	0x58025444
 8006150:	58025458 	.word	0x58025458
 8006154:	5802546c 	.word	0x5802546c
 8006158:	58025480 	.word	0x58025480
 800615c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	60da      	str	r2, [r3, #12]
}
 8006170:	e04d      	b.n	800620e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a29      	ldr	r2, [pc, #164]	@ (800621c <DMA_SetConfig+0x338>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d022      	beq.n	80061c2 <DMA_SetConfig+0x2de>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a27      	ldr	r2, [pc, #156]	@ (8006220 <DMA_SetConfig+0x33c>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d01d      	beq.n	80061c2 <DMA_SetConfig+0x2de>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a26      	ldr	r2, [pc, #152]	@ (8006224 <DMA_SetConfig+0x340>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d018      	beq.n	80061c2 <DMA_SetConfig+0x2de>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a24      	ldr	r2, [pc, #144]	@ (8006228 <DMA_SetConfig+0x344>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d013      	beq.n	80061c2 <DMA_SetConfig+0x2de>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a23      	ldr	r2, [pc, #140]	@ (800622c <DMA_SetConfig+0x348>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d00e      	beq.n	80061c2 <DMA_SetConfig+0x2de>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a21      	ldr	r2, [pc, #132]	@ (8006230 <DMA_SetConfig+0x34c>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d009      	beq.n	80061c2 <DMA_SetConfig+0x2de>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a20      	ldr	r2, [pc, #128]	@ (8006234 <DMA_SetConfig+0x350>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d004      	beq.n	80061c2 <DMA_SetConfig+0x2de>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a1e      	ldr	r2, [pc, #120]	@ (8006238 <DMA_SetConfig+0x354>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d101      	bne.n	80061c6 <DMA_SetConfig+0x2e2>
 80061c2:	2301      	movs	r3, #1
 80061c4:	e000      	b.n	80061c8 <DMA_SetConfig+0x2e4>
 80061c6:	2300      	movs	r3, #0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d020      	beq.n	800620e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061d0:	f003 031f 	and.w	r3, r3, #31
 80061d4:	2201      	movs	r2, #1
 80061d6:	409a      	lsls	r2, r3
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	2b40      	cmp	r3, #64	@ 0x40
 80061ea:	d108      	bne.n	80061fe <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	60da      	str	r2, [r3, #12]
}
 80061fc:	e007      	b.n	800620e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	60da      	str	r2, [r3, #12]
}
 800620e:	bf00      	nop
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	58025408 	.word	0x58025408
 8006220:	5802541c 	.word	0x5802541c
 8006224:	58025430 	.word	0x58025430
 8006228:	58025444 	.word	0x58025444
 800622c:	58025458 	.word	0x58025458
 8006230:	5802546c 	.word	0x5802546c
 8006234:	58025480 	.word	0x58025480
 8006238:	58025494 	.word	0x58025494

0800623c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a42      	ldr	r2, [pc, #264]	@ (8006354 <DMA_CalcBaseAndBitshift+0x118>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d04a      	beq.n	80062e4 <DMA_CalcBaseAndBitshift+0xa8>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a41      	ldr	r2, [pc, #260]	@ (8006358 <DMA_CalcBaseAndBitshift+0x11c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d045      	beq.n	80062e4 <DMA_CalcBaseAndBitshift+0xa8>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a3f      	ldr	r2, [pc, #252]	@ (800635c <DMA_CalcBaseAndBitshift+0x120>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d040      	beq.n	80062e4 <DMA_CalcBaseAndBitshift+0xa8>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a3e      	ldr	r2, [pc, #248]	@ (8006360 <DMA_CalcBaseAndBitshift+0x124>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d03b      	beq.n	80062e4 <DMA_CalcBaseAndBitshift+0xa8>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a3c      	ldr	r2, [pc, #240]	@ (8006364 <DMA_CalcBaseAndBitshift+0x128>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d036      	beq.n	80062e4 <DMA_CalcBaseAndBitshift+0xa8>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a3b      	ldr	r2, [pc, #236]	@ (8006368 <DMA_CalcBaseAndBitshift+0x12c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d031      	beq.n	80062e4 <DMA_CalcBaseAndBitshift+0xa8>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a39      	ldr	r2, [pc, #228]	@ (800636c <DMA_CalcBaseAndBitshift+0x130>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d02c      	beq.n	80062e4 <DMA_CalcBaseAndBitshift+0xa8>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a38      	ldr	r2, [pc, #224]	@ (8006370 <DMA_CalcBaseAndBitshift+0x134>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d027      	beq.n	80062e4 <DMA_CalcBaseAndBitshift+0xa8>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a36      	ldr	r2, [pc, #216]	@ (8006374 <DMA_CalcBaseAndBitshift+0x138>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d022      	beq.n	80062e4 <DMA_CalcBaseAndBitshift+0xa8>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a35      	ldr	r2, [pc, #212]	@ (8006378 <DMA_CalcBaseAndBitshift+0x13c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d01d      	beq.n	80062e4 <DMA_CalcBaseAndBitshift+0xa8>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a33      	ldr	r2, [pc, #204]	@ (800637c <DMA_CalcBaseAndBitshift+0x140>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d018      	beq.n	80062e4 <DMA_CalcBaseAndBitshift+0xa8>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a32      	ldr	r2, [pc, #200]	@ (8006380 <DMA_CalcBaseAndBitshift+0x144>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d013      	beq.n	80062e4 <DMA_CalcBaseAndBitshift+0xa8>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a30      	ldr	r2, [pc, #192]	@ (8006384 <DMA_CalcBaseAndBitshift+0x148>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d00e      	beq.n	80062e4 <DMA_CalcBaseAndBitshift+0xa8>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a2f      	ldr	r2, [pc, #188]	@ (8006388 <DMA_CalcBaseAndBitshift+0x14c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d009      	beq.n	80062e4 <DMA_CalcBaseAndBitshift+0xa8>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a2d      	ldr	r2, [pc, #180]	@ (800638c <DMA_CalcBaseAndBitshift+0x150>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d004      	beq.n	80062e4 <DMA_CalcBaseAndBitshift+0xa8>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a2c      	ldr	r2, [pc, #176]	@ (8006390 <DMA_CalcBaseAndBitshift+0x154>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d101      	bne.n	80062e8 <DMA_CalcBaseAndBitshift+0xac>
 80062e4:	2301      	movs	r3, #1
 80062e6:	e000      	b.n	80062ea <DMA_CalcBaseAndBitshift+0xae>
 80062e8:	2300      	movs	r3, #0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d024      	beq.n	8006338 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	3b10      	subs	r3, #16
 80062f6:	4a27      	ldr	r2, [pc, #156]	@ (8006394 <DMA_CalcBaseAndBitshift+0x158>)
 80062f8:	fba2 2303 	umull	r2, r3, r2, r3
 80062fc:	091b      	lsrs	r3, r3, #4
 80062fe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f003 0307 	and.w	r3, r3, #7
 8006306:	4a24      	ldr	r2, [pc, #144]	@ (8006398 <DMA_CalcBaseAndBitshift+0x15c>)
 8006308:	5cd3      	ldrb	r3, [r2, r3]
 800630a:	461a      	mov	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b03      	cmp	r3, #3
 8006314:	d908      	bls.n	8006328 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	4b1f      	ldr	r3, [pc, #124]	@ (800639c <DMA_CalcBaseAndBitshift+0x160>)
 800631e:	4013      	ands	r3, r2
 8006320:	1d1a      	adds	r2, r3, #4
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	659a      	str	r2, [r3, #88]	@ 0x58
 8006326:	e00d      	b.n	8006344 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	461a      	mov	r2, r3
 800632e:	4b1b      	ldr	r3, [pc, #108]	@ (800639c <DMA_CalcBaseAndBitshift+0x160>)
 8006330:	4013      	ands	r3, r2
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6593      	str	r3, [r2, #88]	@ 0x58
 8006336:	e005      	b.n	8006344 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	40020010 	.word	0x40020010
 8006358:	40020028 	.word	0x40020028
 800635c:	40020040 	.word	0x40020040
 8006360:	40020058 	.word	0x40020058
 8006364:	40020070 	.word	0x40020070
 8006368:	40020088 	.word	0x40020088
 800636c:	400200a0 	.word	0x400200a0
 8006370:	400200b8 	.word	0x400200b8
 8006374:	40020410 	.word	0x40020410
 8006378:	40020428 	.word	0x40020428
 800637c:	40020440 	.word	0x40020440
 8006380:	40020458 	.word	0x40020458
 8006384:	40020470 	.word	0x40020470
 8006388:	40020488 	.word	0x40020488
 800638c:	400204a0 	.word	0x400204a0
 8006390:	400204b8 	.word	0x400204b8
 8006394:	aaaaaaab 	.word	0xaaaaaaab
 8006398:	0800c570 	.word	0x0800c570
 800639c:	fffffc00 	.word	0xfffffc00

080063a0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d120      	bne.n	80063f6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d858      	bhi.n	800646e <DMA_CheckFifoParam+0xce>
 80063bc:	a201      	add	r2, pc, #4	@ (adr r2, 80063c4 <DMA_CheckFifoParam+0x24>)
 80063be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c2:	bf00      	nop
 80063c4:	080063d5 	.word	0x080063d5
 80063c8:	080063e7 	.word	0x080063e7
 80063cc:	080063d5 	.word	0x080063d5
 80063d0:	0800646f 	.word	0x0800646f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d048      	beq.n	8006472 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063e4:	e045      	b.n	8006472 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80063ee:	d142      	bne.n	8006476 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063f4:	e03f      	b.n	8006476 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063fe:	d123      	bne.n	8006448 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006404:	2b03      	cmp	r3, #3
 8006406:	d838      	bhi.n	800647a <DMA_CheckFifoParam+0xda>
 8006408:	a201      	add	r2, pc, #4	@ (adr r2, 8006410 <DMA_CheckFifoParam+0x70>)
 800640a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640e:	bf00      	nop
 8006410:	08006421 	.word	0x08006421
 8006414:	08006427 	.word	0x08006427
 8006418:	08006421 	.word	0x08006421
 800641c:	08006439 	.word	0x08006439
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	73fb      	strb	r3, [r7, #15]
        break;
 8006424:	e030      	b.n	8006488 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d025      	beq.n	800647e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006436:	e022      	b.n	800647e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006440:	d11f      	bne.n	8006482 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006446:	e01c      	b.n	8006482 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800644c:	2b02      	cmp	r3, #2
 800644e:	d902      	bls.n	8006456 <DMA_CheckFifoParam+0xb6>
 8006450:	2b03      	cmp	r3, #3
 8006452:	d003      	beq.n	800645c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006454:	e018      	b.n	8006488 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	73fb      	strb	r3, [r7, #15]
        break;
 800645a:	e015      	b.n	8006488 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006460:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00e      	beq.n	8006486 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	73fb      	strb	r3, [r7, #15]
    break;
 800646c:	e00b      	b.n	8006486 <DMA_CheckFifoParam+0xe6>
        break;
 800646e:	bf00      	nop
 8006470:	e00a      	b.n	8006488 <DMA_CheckFifoParam+0xe8>
        break;
 8006472:	bf00      	nop
 8006474:	e008      	b.n	8006488 <DMA_CheckFifoParam+0xe8>
        break;
 8006476:	bf00      	nop
 8006478:	e006      	b.n	8006488 <DMA_CheckFifoParam+0xe8>
        break;
 800647a:	bf00      	nop
 800647c:	e004      	b.n	8006488 <DMA_CheckFifoParam+0xe8>
        break;
 800647e:	bf00      	nop
 8006480:	e002      	b.n	8006488 <DMA_CheckFifoParam+0xe8>
        break;
 8006482:	bf00      	nop
 8006484:	e000      	b.n	8006488 <DMA_CheckFifoParam+0xe8>
    break;
 8006486:	bf00      	nop
    }
  }

  return status;
 8006488:	7bfb      	ldrb	r3, [r7, #15]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop

08006498 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a38      	ldr	r2, [pc, #224]	@ (800658c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d022      	beq.n	80064f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a36      	ldr	r2, [pc, #216]	@ (8006590 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d01d      	beq.n	80064f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a35      	ldr	r2, [pc, #212]	@ (8006594 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d018      	beq.n	80064f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a33      	ldr	r2, [pc, #204]	@ (8006598 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d013      	beq.n	80064f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a32      	ldr	r2, [pc, #200]	@ (800659c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d00e      	beq.n	80064f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a30      	ldr	r2, [pc, #192]	@ (80065a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d009      	beq.n	80064f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a2f      	ldr	r2, [pc, #188]	@ (80065a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d004      	beq.n	80064f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a2d      	ldr	r2, [pc, #180]	@ (80065a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d101      	bne.n	80064fa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80064fa:	2300      	movs	r3, #0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01a      	beq.n	8006536 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	b2db      	uxtb	r3, r3
 8006506:	3b08      	subs	r3, #8
 8006508:	4a28      	ldr	r2, [pc, #160]	@ (80065ac <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800650a:	fba2 2303 	umull	r2, r3, r2, r3
 800650e:	091b      	lsrs	r3, r3, #4
 8006510:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	4b26      	ldr	r3, [pc, #152]	@ (80065b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006516:	4413      	add	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	461a      	mov	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a24      	ldr	r2, [pc, #144]	@ (80065b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006524:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f003 031f 	and.w	r3, r3, #31
 800652c:	2201      	movs	r2, #1
 800652e:	409a      	lsls	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006534:	e024      	b.n	8006580 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	b2db      	uxtb	r3, r3
 800653c:	3b10      	subs	r3, #16
 800653e:	4a1e      	ldr	r2, [pc, #120]	@ (80065b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006540:	fba2 2303 	umull	r2, r3, r2, r3
 8006544:	091b      	lsrs	r3, r3, #4
 8006546:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	4a1c      	ldr	r2, [pc, #112]	@ (80065bc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d806      	bhi.n	800655e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	4a1b      	ldr	r2, [pc, #108]	@ (80065c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d902      	bls.n	800655e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3308      	adds	r3, #8
 800655c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	4b18      	ldr	r3, [pc, #96]	@ (80065c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006562:	4413      	add	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	461a      	mov	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a16      	ldr	r2, [pc, #88]	@ (80065c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006570:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f003 031f 	and.w	r3, r3, #31
 8006578:	2201      	movs	r2, #1
 800657a:	409a      	lsls	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006580:	bf00      	nop
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	58025408 	.word	0x58025408
 8006590:	5802541c 	.word	0x5802541c
 8006594:	58025430 	.word	0x58025430
 8006598:	58025444 	.word	0x58025444
 800659c:	58025458 	.word	0x58025458
 80065a0:	5802546c 	.word	0x5802546c
 80065a4:	58025480 	.word	0x58025480
 80065a8:	58025494 	.word	0x58025494
 80065ac:	cccccccd 	.word	0xcccccccd
 80065b0:	16009600 	.word	0x16009600
 80065b4:	58025880 	.word	0x58025880
 80065b8:	aaaaaaab 	.word	0xaaaaaaab
 80065bc:	400204b8 	.word	0x400204b8
 80065c0:	4002040f 	.word	0x4002040f
 80065c4:	10008200 	.word	0x10008200
 80065c8:	40020880 	.word	0x40020880

080065cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d04a      	beq.n	8006678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d847      	bhi.n	8006678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a25      	ldr	r2, [pc, #148]	@ (8006684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d022      	beq.n	8006638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a24      	ldr	r2, [pc, #144]	@ (8006688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d01d      	beq.n	8006638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a22      	ldr	r2, [pc, #136]	@ (800668c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d018      	beq.n	8006638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a21      	ldr	r2, [pc, #132]	@ (8006690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d013      	beq.n	8006638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a1f      	ldr	r2, [pc, #124]	@ (8006694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d00e      	beq.n	8006638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a1e      	ldr	r2, [pc, #120]	@ (8006698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d009      	beq.n	8006638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a1c      	ldr	r2, [pc, #112]	@ (800669c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d004      	beq.n	8006638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a1b      	ldr	r2, [pc, #108]	@ (80066a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d101      	bne.n	800663c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006638:	2301      	movs	r3, #1
 800663a:	e000      	b.n	800663e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800663c:	2300      	movs	r3, #0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00a      	beq.n	8006658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4b17      	ldr	r3, [pc, #92]	@ (80066a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	461a      	mov	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a15      	ldr	r2, [pc, #84]	@ (80066a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006654:	671a      	str	r2, [r3, #112]	@ 0x70
 8006656:	e009      	b.n	800666c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	4b14      	ldr	r3, [pc, #80]	@ (80066ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800665c:	4413      	add	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	461a      	mov	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a11      	ldr	r2, [pc, #68]	@ (80066b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800666a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	3b01      	subs	r3, #1
 8006670:	2201      	movs	r2, #1
 8006672:	409a      	lsls	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006678:	bf00      	nop
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	58025408 	.word	0x58025408
 8006688:	5802541c 	.word	0x5802541c
 800668c:	58025430 	.word	0x58025430
 8006690:	58025444 	.word	0x58025444
 8006694:	58025458 	.word	0x58025458
 8006698:	5802546c 	.word	0x5802546c
 800669c:	58025480 	.word	0x58025480
 80066a0:	58025494 	.word	0x58025494
 80066a4:	1600963f 	.word	0x1600963f
 80066a8:	58025940 	.word	0x58025940
 80066ac:	1000823f 	.word	0x1000823f
 80066b0:	40020940 	.word	0x40020940

080066b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b089      	sub	sp, #36	@ 0x24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80066be:	2300      	movs	r3, #0
 80066c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80066c2:	4b86      	ldr	r3, [pc, #536]	@ (80068dc <HAL_GPIO_Init+0x228>)
 80066c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80066c6:	e18c      	b.n	80069e2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	2101      	movs	r1, #1
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	fa01 f303 	lsl.w	r3, r1, r3
 80066d4:	4013      	ands	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 817e 	beq.w	80069dc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f003 0303 	and.w	r3, r3, #3
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d005      	beq.n	80066f8 <HAL_GPIO_Init+0x44>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f003 0303 	and.w	r3, r3, #3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d130      	bne.n	800675a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	2203      	movs	r2, #3
 8006704:	fa02 f303 	lsl.w	r3, r2, r3
 8006708:	43db      	mvns	r3, r3
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	4013      	ands	r3, r2
 800670e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	005b      	lsls	r3, r3, #1
 8006718:	fa02 f303 	lsl.w	r3, r2, r3
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	4313      	orrs	r3, r2
 8006720:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800672e:	2201      	movs	r2, #1
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	fa02 f303 	lsl.w	r3, r2, r3
 8006736:	43db      	mvns	r3, r3
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	4013      	ands	r3, r2
 800673c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	091b      	lsrs	r3, r3, #4
 8006744:	f003 0201 	and.w	r2, r3, #1
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	fa02 f303 	lsl.w	r3, r2, r3
 800674e:	69ba      	ldr	r2, [r7, #24]
 8006750:	4313      	orrs	r3, r2
 8006752:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f003 0303 	and.w	r3, r3, #3
 8006762:	2b03      	cmp	r3, #3
 8006764:	d017      	beq.n	8006796 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	2203      	movs	r2, #3
 8006772:	fa02 f303 	lsl.w	r3, r2, r3
 8006776:	43db      	mvns	r3, r3
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	4013      	ands	r3, r2
 800677c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	689a      	ldr	r2, [r3, #8]
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	fa02 f303 	lsl.w	r3, r2, r3
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	4313      	orrs	r3, r2
 800678e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f003 0303 	and.w	r3, r3, #3
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d123      	bne.n	80067ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	08da      	lsrs	r2, r3, #3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3208      	adds	r2, #8
 80067aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	220f      	movs	r2, #15
 80067ba:	fa02 f303 	lsl.w	r3, r2, r3
 80067be:	43db      	mvns	r3, r3
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	4013      	ands	r3, r2
 80067c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	691a      	ldr	r2, [r3, #16]
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	f003 0307 	and.w	r3, r3, #7
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	fa02 f303 	lsl.w	r3, r2, r3
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	4313      	orrs	r3, r2
 80067da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	08da      	lsrs	r2, r3, #3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	3208      	adds	r2, #8
 80067e4:	69b9      	ldr	r1, [r7, #24]
 80067e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	2203      	movs	r2, #3
 80067f6:	fa02 f303 	lsl.w	r3, r2, r3
 80067fa:	43db      	mvns	r3, r3
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	4013      	ands	r3, r2
 8006800:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f003 0203 	and.w	r2, r3, #3
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	fa02 f303 	lsl.w	r3, r2, r3
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	4313      	orrs	r3, r2
 8006816:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 80d8 	beq.w	80069dc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800682c:	4b2c      	ldr	r3, [pc, #176]	@ (80068e0 <HAL_GPIO_Init+0x22c>)
 800682e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006832:	4a2b      	ldr	r2, [pc, #172]	@ (80068e0 <HAL_GPIO_Init+0x22c>)
 8006834:	f043 0302 	orr.w	r3, r3, #2
 8006838:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800683c:	4b28      	ldr	r3, [pc, #160]	@ (80068e0 <HAL_GPIO_Init+0x22c>)
 800683e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800684a:	4a26      	ldr	r2, [pc, #152]	@ (80068e4 <HAL_GPIO_Init+0x230>)
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	089b      	lsrs	r3, r3, #2
 8006850:	3302      	adds	r3, #2
 8006852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	f003 0303 	and.w	r3, r3, #3
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	220f      	movs	r2, #15
 8006862:	fa02 f303 	lsl.w	r3, r2, r3
 8006866:	43db      	mvns	r3, r3
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	4013      	ands	r3, r2
 800686c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a1d      	ldr	r2, [pc, #116]	@ (80068e8 <HAL_GPIO_Init+0x234>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d04a      	beq.n	800690c <HAL_GPIO_Init+0x258>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a1c      	ldr	r2, [pc, #112]	@ (80068ec <HAL_GPIO_Init+0x238>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d02b      	beq.n	80068d6 <HAL_GPIO_Init+0x222>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a1b      	ldr	r2, [pc, #108]	@ (80068f0 <HAL_GPIO_Init+0x23c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d025      	beq.n	80068d2 <HAL_GPIO_Init+0x21e>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a1a      	ldr	r2, [pc, #104]	@ (80068f4 <HAL_GPIO_Init+0x240>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d01f      	beq.n	80068ce <HAL_GPIO_Init+0x21a>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a19      	ldr	r2, [pc, #100]	@ (80068f8 <HAL_GPIO_Init+0x244>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d019      	beq.n	80068ca <HAL_GPIO_Init+0x216>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a18      	ldr	r2, [pc, #96]	@ (80068fc <HAL_GPIO_Init+0x248>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d013      	beq.n	80068c6 <HAL_GPIO_Init+0x212>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a17      	ldr	r2, [pc, #92]	@ (8006900 <HAL_GPIO_Init+0x24c>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d00d      	beq.n	80068c2 <HAL_GPIO_Init+0x20e>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a16      	ldr	r2, [pc, #88]	@ (8006904 <HAL_GPIO_Init+0x250>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d007      	beq.n	80068be <HAL_GPIO_Init+0x20a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a15      	ldr	r2, [pc, #84]	@ (8006908 <HAL_GPIO_Init+0x254>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d101      	bne.n	80068ba <HAL_GPIO_Init+0x206>
 80068b6:	2309      	movs	r3, #9
 80068b8:	e029      	b.n	800690e <HAL_GPIO_Init+0x25a>
 80068ba:	230a      	movs	r3, #10
 80068bc:	e027      	b.n	800690e <HAL_GPIO_Init+0x25a>
 80068be:	2307      	movs	r3, #7
 80068c0:	e025      	b.n	800690e <HAL_GPIO_Init+0x25a>
 80068c2:	2306      	movs	r3, #6
 80068c4:	e023      	b.n	800690e <HAL_GPIO_Init+0x25a>
 80068c6:	2305      	movs	r3, #5
 80068c8:	e021      	b.n	800690e <HAL_GPIO_Init+0x25a>
 80068ca:	2304      	movs	r3, #4
 80068cc:	e01f      	b.n	800690e <HAL_GPIO_Init+0x25a>
 80068ce:	2303      	movs	r3, #3
 80068d0:	e01d      	b.n	800690e <HAL_GPIO_Init+0x25a>
 80068d2:	2302      	movs	r3, #2
 80068d4:	e01b      	b.n	800690e <HAL_GPIO_Init+0x25a>
 80068d6:	2301      	movs	r3, #1
 80068d8:	e019      	b.n	800690e <HAL_GPIO_Init+0x25a>
 80068da:	bf00      	nop
 80068dc:	58000080 	.word	0x58000080
 80068e0:	58024400 	.word	0x58024400
 80068e4:	58000400 	.word	0x58000400
 80068e8:	58020000 	.word	0x58020000
 80068ec:	58020400 	.word	0x58020400
 80068f0:	58020800 	.word	0x58020800
 80068f4:	58020c00 	.word	0x58020c00
 80068f8:	58021000 	.word	0x58021000
 80068fc:	58021400 	.word	0x58021400
 8006900:	58021800 	.word	0x58021800
 8006904:	58021c00 	.word	0x58021c00
 8006908:	58022400 	.word	0x58022400
 800690c:	2300      	movs	r3, #0
 800690e:	69fa      	ldr	r2, [r7, #28]
 8006910:	f002 0203 	and.w	r2, r2, #3
 8006914:	0092      	lsls	r2, r2, #2
 8006916:	4093      	lsls	r3, r2
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	4313      	orrs	r3, r2
 800691c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800691e:	4938      	ldr	r1, [pc, #224]	@ (8006a00 <HAL_GPIO_Init+0x34c>)
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	089b      	lsrs	r3, r3, #2
 8006924:	3302      	adds	r3, #2
 8006926:	69ba      	ldr	r2, [r7, #24]
 8006928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800692c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	43db      	mvns	r3, r3
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	4013      	ands	r3, r2
 800693c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	4313      	orrs	r3, r2
 8006950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006952:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800695a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	43db      	mvns	r3, r3
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	4013      	ands	r3, r2
 800696a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	4313      	orrs	r3, r2
 800697e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006980:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	43db      	mvns	r3, r3
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	4013      	ands	r3, r2
 8006996:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d003      	beq.n	80069ac <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	43db      	mvns	r3, r3
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	4013      	ands	r3, r2
 80069c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	3301      	adds	r3, #1
 80069e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	fa22 f303 	lsr.w	r3, r2, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f47f ae6b 	bne.w	80066c8 <HAL_GPIO_Init+0x14>
  }
}
 80069f2:	bf00      	nop
 80069f4:	bf00      	nop
 80069f6:	3724      	adds	r7, #36	@ 0x24
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	58000400 	.word	0x58000400

08006a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	807b      	strh	r3, [r7, #2]
 8006a10:	4613      	mov	r3, r2
 8006a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a14:	787b      	ldrb	r3, [r7, #1]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a1a:	887a      	ldrh	r2, [r7, #2]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006a20:	e003      	b.n	8006a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006a22:	887b      	ldrh	r3, [r7, #2]
 8006a24:	041a      	lsls	r2, r3, #16
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	619a      	str	r2, [r3, #24]
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
	...

08006a38 <HAL_HASH_Init>:
  *         relevant APIs manage themselves the MDMAT bit.
  * @param  hhash HASH handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  /* Check the hash handle allocation */
  if (hhash == NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e043      	b.n	8006ad2 <HAL_HASH_Init+0x9a>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d106      	bne.n	8006a64 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7fa fe2e 	bl	80016c0 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Change the HASH state */
  hhash->State = HAL_HASH_STATE_BUSY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Reset HashInCount, HashITCounter, HashBuffSize and NbWordsAlreadyPushed */
  hhash->HashInCount = 0;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	621a      	str	r2, [r3, #32]
  hhash->HashBuffSize = 0;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	61da      	str	r2, [r3, #28]
  hhash->HashITCounter = 0;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hhash->NbWordsAlreadyPushed = 0;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset digest calculation bridle (MDMAT bit control) */
  hhash->DigestCalculationDisable = RESET;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
  /* Set phase to READY */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Set the data type bit */
  MODIFY_REG(HASH->CR, HASH_CR_DATATYPE, hhash->Init.DataType);
 8006a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8006adc <HAL_HASH_Init+0xa4>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	490c      	ldr	r1, [pc, #48]	@ (8006adc <HAL_HASH_Init+0xa4>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	600b      	str	r3, [r1, #0]
  /* Reset MDMAT bit */
  __HAL_HASH_RESET_MDMAT();
 8006aae:	4b0b      	ldr	r3, [pc, #44]	@ (8006adc <HAL_HASH_Init+0xa4>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8006adc <HAL_HASH_Init+0xa4>)
 8006ab4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ab8:	6013      	str	r3, [r2, #0]
  /* Reset HASH handle status */
  hhash->Status = HAL_OK;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Set the HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Initialise the error code */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	48021400 	.word	0x48021400

08006ae0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006ae8:	4b29      	ldr	r3, [pc, #164]	@ (8006b90 <HAL_PWREx_ConfigSupply+0xb0>)
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f003 0307 	and.w	r3, r3, #7
 8006af0:	2b06      	cmp	r3, #6
 8006af2:	d00a      	beq.n	8006b0a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006af4:	4b26      	ldr	r3, [pc, #152]	@ (8006b90 <HAL_PWREx_ConfigSupply+0xb0>)
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d001      	beq.n	8006b06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e03f      	b.n	8006b86 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006b06:	2300      	movs	r3, #0
 8006b08:	e03d      	b.n	8006b86 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006b0a:	4b21      	ldr	r3, [pc, #132]	@ (8006b90 <HAL_PWREx_ConfigSupply+0xb0>)
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006b12:	491f      	ldr	r1, [pc, #124]	@ (8006b90 <HAL_PWREx_ConfigSupply+0xb0>)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006b1a:	f7fb f961 	bl	8001de0 <HAL_GetTick>
 8006b1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b20:	e009      	b.n	8006b36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006b22:	f7fb f95d 	bl	8001de0 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b30:	d901      	bls.n	8006b36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e027      	b.n	8006b86 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b36:	4b16      	ldr	r3, [pc, #88]	@ (8006b90 <HAL_PWREx_ConfigSupply+0xb0>)
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b42:	d1ee      	bne.n	8006b22 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b1e      	cmp	r3, #30
 8006b48:	d008      	beq.n	8006b5c <HAL_PWREx_ConfigSupply+0x7c>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b4e:	d005      	beq.n	8006b5c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b1d      	cmp	r3, #29
 8006b54:	d002      	beq.n	8006b5c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b2d      	cmp	r3, #45	@ 0x2d
 8006b5a:	d113      	bne.n	8006b84 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006b5c:	f7fb f940 	bl	8001de0 <HAL_GetTick>
 8006b60:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006b62:	e009      	b.n	8006b78 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006b64:	f7fb f93c 	bl	8001de0 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b72:	d901      	bls.n	8006b78 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e006      	b.n	8006b86 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006b78:	4b05      	ldr	r3, [pc, #20]	@ (8006b90 <HAL_PWREx_ConfigSupply+0xb0>)
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f003 0311 	and.w	r3, r3, #17
 8006b80:	2b11      	cmp	r3, #17
 8006b82:	d1ef      	bne.n	8006b64 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	58024800 	.word	0x58024800

08006b94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08c      	sub	sp, #48	@ 0x30
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e3c8      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 8087 	beq.w	8006cc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bb4:	4b88      	ldr	r3, [pc, #544]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bbe:	4b86      	ldr	r3, [pc, #536]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc6:	2b10      	cmp	r3, #16
 8006bc8:	d007      	beq.n	8006bda <HAL_RCC_OscConfig+0x46>
 8006bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bcc:	2b18      	cmp	r3, #24
 8006bce:	d110      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x5e>
 8006bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd2:	f003 0303 	and.w	r3, r3, #3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d10b      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bda:	4b7f      	ldr	r3, [pc, #508]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d06c      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x12c>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d168      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e3a2      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bfa:	d106      	bne.n	8006c0a <HAL_RCC_OscConfig+0x76>
 8006bfc:	4b76      	ldr	r3, [pc, #472]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a75      	ldr	r2, [pc, #468]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006c02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c06:	6013      	str	r3, [r2, #0]
 8006c08:	e02e      	b.n	8006c68 <HAL_RCC_OscConfig+0xd4>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10c      	bne.n	8006c2c <HAL_RCC_OscConfig+0x98>
 8006c12:	4b71      	ldr	r3, [pc, #452]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a70      	ldr	r2, [pc, #448]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	4b6e      	ldr	r3, [pc, #440]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a6d      	ldr	r2, [pc, #436]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006c24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c28:	6013      	str	r3, [r2, #0]
 8006c2a:	e01d      	b.n	8006c68 <HAL_RCC_OscConfig+0xd4>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c34:	d10c      	bne.n	8006c50 <HAL_RCC_OscConfig+0xbc>
 8006c36:	4b68      	ldr	r3, [pc, #416]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a67      	ldr	r2, [pc, #412]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	4b65      	ldr	r3, [pc, #404]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a64      	ldr	r2, [pc, #400]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c4c:	6013      	str	r3, [r2, #0]
 8006c4e:	e00b      	b.n	8006c68 <HAL_RCC_OscConfig+0xd4>
 8006c50:	4b61      	ldr	r3, [pc, #388]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a60      	ldr	r2, [pc, #384]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c5a:	6013      	str	r3, [r2, #0]
 8006c5c:	4b5e      	ldr	r3, [pc, #376]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a5d      	ldr	r2, [pc, #372]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006c62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d013      	beq.n	8006c98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c70:	f7fb f8b6 	bl	8001de0 <HAL_GetTick>
 8006c74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c78:	f7fb f8b2 	bl	8001de0 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b64      	cmp	r3, #100	@ 0x64
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e356      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c8a:	4b53      	ldr	r3, [pc, #332]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0f0      	beq.n	8006c78 <HAL_RCC_OscConfig+0xe4>
 8006c96:	e014      	b.n	8006cc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c98:	f7fb f8a2 	bl	8001de0 <HAL_GetTick>
 8006c9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ca0:	f7fb f89e 	bl	8001de0 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b64      	cmp	r3, #100	@ 0x64
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e342      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006cb2:	4b49      	ldr	r3, [pc, #292]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1f0      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x10c>
 8006cbe:	e000      	b.n	8006cc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0302 	and.w	r3, r3, #2
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 808c 	beq.w	8006de8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cd0:	4b41      	ldr	r3, [pc, #260]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cd8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006cda:	4b3f      	ldr	r3, [pc, #252]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cde:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d007      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x162>
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	2b18      	cmp	r3, #24
 8006cea:	d137      	bne.n	8006d5c <HAL_RCC_OscConfig+0x1c8>
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	f003 0303 	and.w	r3, r3, #3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d132      	bne.n	8006d5c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cf6:	4b38      	ldr	r3, [pc, #224]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0304 	and.w	r3, r3, #4
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d005      	beq.n	8006d0e <HAL_RCC_OscConfig+0x17a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e314      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d0e:	4b32      	ldr	r3, [pc, #200]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f023 0219 	bic.w	r2, r3, #25
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	492f      	ldr	r1, [pc, #188]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d20:	f7fb f85e 	bl	8001de0 <HAL_GetTick>
 8006d24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d26:	e008      	b.n	8006d3a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d28:	f7fb f85a 	bl	8001de0 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e2fe      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d3a:	4b27      	ldr	r3, [pc, #156]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0304 	and.w	r3, r3, #4
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0f0      	beq.n	8006d28 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d46:	4b24      	ldr	r3, [pc, #144]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	061b      	lsls	r3, r3, #24
 8006d54:	4920      	ldr	r1, [pc, #128]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d5a:	e045      	b.n	8006de8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d026      	beq.n	8006db2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d64:	4b1c      	ldr	r3, [pc, #112]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f023 0219 	bic.w	r2, r3, #25
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	4919      	ldr	r1, [pc, #100]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d76:	f7fb f833 	bl	8001de0 <HAL_GetTick>
 8006d7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d7c:	e008      	b.n	8006d90 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d7e:	f7fb f82f 	bl	8001de0 <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d901      	bls.n	8006d90 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e2d3      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d90:	4b11      	ldr	r3, [pc, #68]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d0f0      	beq.n	8006d7e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	061b      	lsls	r3, r3, #24
 8006daa:	490b      	ldr	r1, [pc, #44]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	604b      	str	r3, [r1, #4]
 8006db0:	e01a      	b.n	8006de8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006db2:	4b09      	ldr	r3, [pc, #36]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a08      	ldr	r2, [pc, #32]	@ (8006dd8 <HAL_RCC_OscConfig+0x244>)
 8006db8:	f023 0301 	bic.w	r3, r3, #1
 8006dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dbe:	f7fb f80f 	bl	8001de0 <HAL_GetTick>
 8006dc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006dc4:	e00a      	b.n	8006ddc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dc6:	f7fb f80b 	bl	8001de0 <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d903      	bls.n	8006ddc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e2af      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
 8006dd8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ddc:	4b96      	ldr	r3, [pc, #600]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1ee      	bne.n	8006dc6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0310 	and.w	r3, r3, #16
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d06a      	beq.n	8006eca <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006df4:	4b90      	ldr	r3, [pc, #576]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dfc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006dfe:	4b8e      	ldr	r3, [pc, #568]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e02:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	2b08      	cmp	r3, #8
 8006e08:	d007      	beq.n	8006e1a <HAL_RCC_OscConfig+0x286>
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	2b18      	cmp	r3, #24
 8006e0e:	d11b      	bne.n	8006e48 <HAL_RCC_OscConfig+0x2b4>
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f003 0303 	and.w	r3, r3, #3
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d116      	bne.n	8006e48 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e1a:	4b87      	ldr	r3, [pc, #540]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d005      	beq.n	8006e32 <HAL_RCC_OscConfig+0x29e>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	2b80      	cmp	r3, #128	@ 0x80
 8006e2c:	d001      	beq.n	8006e32 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e282      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e32:	4b81      	ldr	r3, [pc, #516]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	061b      	lsls	r3, r3, #24
 8006e40:	497d      	ldr	r1, [pc, #500]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e46:	e040      	b.n	8006eca <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d023      	beq.n	8006e98 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e50:	4b79      	ldr	r3, [pc, #484]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a78      	ldr	r2, [pc, #480]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5c:	f7fa ffc0 	bl	8001de0 <HAL_GetTick>
 8006e60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e62:	e008      	b.n	8006e76 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006e64:	f7fa ffbc 	bl	8001de0 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e260      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e76:	4b70      	ldr	r3, [pc, #448]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d0f0      	beq.n	8006e64 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e82:	4b6d      	ldr	r3, [pc, #436]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	061b      	lsls	r3, r3, #24
 8006e90:	4969      	ldr	r1, [pc, #420]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60cb      	str	r3, [r1, #12]
 8006e96:	e018      	b.n	8006eca <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006e98:	4b67      	ldr	r3, [pc, #412]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a66      	ldr	r2, [pc, #408]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006e9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea4:	f7fa ff9c 	bl	8001de0 <HAL_GetTick>
 8006ea8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006eaa:	e008      	b.n	8006ebe <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006eac:	f7fa ff98 	bl	8001de0 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e23c      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ebe:	4b5e      	ldr	r3, [pc, #376]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1f0      	bne.n	8006eac <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0308 	and.w	r3, r3, #8
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d036      	beq.n	8006f44 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d019      	beq.n	8006f12 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ede:	4b56      	ldr	r3, [pc, #344]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ee2:	4a55      	ldr	r2, [pc, #340]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006ee4:	f043 0301 	orr.w	r3, r3, #1
 8006ee8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eea:	f7fa ff79 	bl	8001de0 <HAL_GetTick>
 8006eee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ef0:	e008      	b.n	8006f04 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ef2:	f7fa ff75 	bl	8001de0 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d901      	bls.n	8006f04 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e219      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f04:	4b4c      	ldr	r3, [pc, #304]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006f06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0f0      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x35e>
 8006f10:	e018      	b.n	8006f44 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f12:	4b49      	ldr	r3, [pc, #292]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f16:	4a48      	ldr	r2, [pc, #288]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006f18:	f023 0301 	bic.w	r3, r3, #1
 8006f1c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f1e:	f7fa ff5f 	bl	8001de0 <HAL_GetTick>
 8006f22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f24:	e008      	b.n	8006f38 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f26:	f7fa ff5b 	bl	8001de0 <HAL_GetTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d901      	bls.n	8006f38 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e1ff      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f38:	4b3f      	ldr	r3, [pc, #252]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006f3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f3c:	f003 0302 	and.w	r3, r3, #2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1f0      	bne.n	8006f26 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0320 	and.w	r3, r3, #32
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d036      	beq.n	8006fbe <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d019      	beq.n	8006f8c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f58:	4b37      	ldr	r3, [pc, #220]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a36      	ldr	r2, [pc, #216]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006f5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006f62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f64:	f7fa ff3c 	bl	8001de0 <HAL_GetTick>
 8006f68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f6a:	e008      	b.n	8006f7e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f6c:	f7fa ff38 	bl	8001de0 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e1dc      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f7e:	4b2e      	ldr	r3, [pc, #184]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d0f0      	beq.n	8006f6c <HAL_RCC_OscConfig+0x3d8>
 8006f8a:	e018      	b.n	8006fbe <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a29      	ldr	r2, [pc, #164]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006f92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f98:	f7fa ff22 	bl	8001de0 <HAL_GetTick>
 8006f9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f9e:	e008      	b.n	8006fb2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fa0:	f7fa ff1e 	bl	8001de0 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d901      	bls.n	8006fb2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e1c2      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fb2:	4b21      	ldr	r3, [pc, #132]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1f0      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0304 	and.w	r3, r3, #4
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 8086 	beq.w	80070d8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800703c <HAL_RCC_OscConfig+0x4a8>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a1a      	ldr	r2, [pc, #104]	@ (800703c <HAL_RCC_OscConfig+0x4a8>)
 8006fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fd8:	f7fa ff02 	bl	8001de0 <HAL_GetTick>
 8006fdc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fde:	e008      	b.n	8006ff2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fe0:	f7fa fefe 	bl	8001de0 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	2b64      	cmp	r3, #100	@ 0x64
 8006fec:	d901      	bls.n	8006ff2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e1a2      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ff2:	4b12      	ldr	r3, [pc, #72]	@ (800703c <HAL_RCC_OscConfig+0x4a8>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0f0      	beq.n	8006fe0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d106      	bne.n	8007014 <HAL_RCC_OscConfig+0x480>
 8007006:	4b0c      	ldr	r3, [pc, #48]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8007008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800700a:	4a0b      	ldr	r2, [pc, #44]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 800700c:	f043 0301 	orr.w	r3, r3, #1
 8007010:	6713      	str	r3, [r2, #112]	@ 0x70
 8007012:	e032      	b.n	800707a <HAL_RCC_OscConfig+0x4e6>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d111      	bne.n	8007040 <HAL_RCC_OscConfig+0x4ac>
 800701c:	4b06      	ldr	r3, [pc, #24]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 800701e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007020:	4a05      	ldr	r2, [pc, #20]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 8007022:	f023 0301 	bic.w	r3, r3, #1
 8007026:	6713      	str	r3, [r2, #112]	@ 0x70
 8007028:	4b03      	ldr	r3, [pc, #12]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 800702a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800702c:	4a02      	ldr	r2, [pc, #8]	@ (8007038 <HAL_RCC_OscConfig+0x4a4>)
 800702e:	f023 0304 	bic.w	r3, r3, #4
 8007032:	6713      	str	r3, [r2, #112]	@ 0x70
 8007034:	e021      	b.n	800707a <HAL_RCC_OscConfig+0x4e6>
 8007036:	bf00      	nop
 8007038:	58024400 	.word	0x58024400
 800703c:	58024800 	.word	0x58024800
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	2b05      	cmp	r3, #5
 8007046:	d10c      	bne.n	8007062 <HAL_RCC_OscConfig+0x4ce>
 8007048:	4b83      	ldr	r3, [pc, #524]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 800704a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800704c:	4a82      	ldr	r2, [pc, #520]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 800704e:	f043 0304 	orr.w	r3, r3, #4
 8007052:	6713      	str	r3, [r2, #112]	@ 0x70
 8007054:	4b80      	ldr	r3, [pc, #512]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 8007056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007058:	4a7f      	ldr	r2, [pc, #508]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 800705a:	f043 0301 	orr.w	r3, r3, #1
 800705e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007060:	e00b      	b.n	800707a <HAL_RCC_OscConfig+0x4e6>
 8007062:	4b7d      	ldr	r3, [pc, #500]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 8007064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007066:	4a7c      	ldr	r2, [pc, #496]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 8007068:	f023 0301 	bic.w	r3, r3, #1
 800706c:	6713      	str	r3, [r2, #112]	@ 0x70
 800706e:	4b7a      	ldr	r3, [pc, #488]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 8007070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007072:	4a79      	ldr	r2, [pc, #484]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 8007074:	f023 0304 	bic.w	r3, r3, #4
 8007078:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d015      	beq.n	80070ae <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007082:	f7fa fead 	bl	8001de0 <HAL_GetTick>
 8007086:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007088:	e00a      	b.n	80070a0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800708a:	f7fa fea9 	bl	8001de0 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007098:	4293      	cmp	r3, r2
 800709a:	d901      	bls.n	80070a0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e14b      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070a0:	4b6d      	ldr	r3, [pc, #436]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 80070a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d0ee      	beq.n	800708a <HAL_RCC_OscConfig+0x4f6>
 80070ac:	e014      	b.n	80070d8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ae:	f7fa fe97 	bl	8001de0 <HAL_GetTick>
 80070b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070b4:	e00a      	b.n	80070cc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070b6:	f7fa fe93 	bl	8001de0 <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d901      	bls.n	80070cc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e135      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070cc:	4b62      	ldr	r3, [pc, #392]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 80070ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1ee      	bne.n	80070b6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 812a 	beq.w	8007336 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80070e2:	4b5d      	ldr	r3, [pc, #372]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070ea:	2b18      	cmp	r3, #24
 80070ec:	f000 80ba 	beq.w	8007264 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	f040 8095 	bne.w	8007224 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070fa:	4b57      	ldr	r3, [pc, #348]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a56      	ldr	r2, [pc, #344]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 8007100:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007106:	f7fa fe6b 	bl	8001de0 <HAL_GetTick>
 800710a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800710c:	e008      	b.n	8007120 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800710e:	f7fa fe67 	bl	8001de0 <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	2b02      	cmp	r3, #2
 800711a:	d901      	bls.n	8007120 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e10b      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007120:	4b4d      	ldr	r3, [pc, #308]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1f0      	bne.n	800710e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800712c:	4b4a      	ldr	r3, [pc, #296]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 800712e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007130:	4b4a      	ldr	r3, [pc, #296]	@ (800725c <HAL_RCC_OscConfig+0x6c8>)
 8007132:	4013      	ands	r3, r2
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800713c:	0112      	lsls	r2, r2, #4
 800713e:	430a      	orrs	r2, r1
 8007140:	4945      	ldr	r1, [pc, #276]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 8007142:	4313      	orrs	r3, r2
 8007144:	628b      	str	r3, [r1, #40]	@ 0x28
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800714a:	3b01      	subs	r3, #1
 800714c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007154:	3b01      	subs	r3, #1
 8007156:	025b      	lsls	r3, r3, #9
 8007158:	b29b      	uxth	r3, r3
 800715a:	431a      	orrs	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007160:	3b01      	subs	r3, #1
 8007162:	041b      	lsls	r3, r3, #16
 8007164:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007168:	431a      	orrs	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800716e:	3b01      	subs	r3, #1
 8007170:	061b      	lsls	r3, r3, #24
 8007172:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007176:	4938      	ldr	r1, [pc, #224]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 8007178:	4313      	orrs	r3, r2
 800717a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800717c:	4b36      	ldr	r3, [pc, #216]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 800717e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007180:	4a35      	ldr	r2, [pc, #212]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 8007182:	f023 0301 	bic.w	r3, r3, #1
 8007186:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007188:	4b33      	ldr	r3, [pc, #204]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 800718a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800718c:	4b34      	ldr	r3, [pc, #208]	@ (8007260 <HAL_RCC_OscConfig+0x6cc>)
 800718e:	4013      	ands	r3, r2
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007194:	00d2      	lsls	r2, r2, #3
 8007196:	4930      	ldr	r1, [pc, #192]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 8007198:	4313      	orrs	r3, r2
 800719a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800719c:	4b2e      	ldr	r3, [pc, #184]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 800719e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a0:	f023 020c 	bic.w	r2, r3, #12
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a8:	492b      	ldr	r1, [pc, #172]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80071ae:	4b2a      	ldr	r3, [pc, #168]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 80071b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b2:	f023 0202 	bic.w	r2, r3, #2
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ba:	4927      	ldr	r1, [pc, #156]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80071c0:	4b25      	ldr	r3, [pc, #148]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 80071c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c4:	4a24      	ldr	r2, [pc, #144]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 80071c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071cc:	4b22      	ldr	r3, [pc, #136]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 80071ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d0:	4a21      	ldr	r2, [pc, #132]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 80071d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80071d8:	4b1f      	ldr	r3, [pc, #124]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 80071da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071dc:	4a1e      	ldr	r2, [pc, #120]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 80071de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80071e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80071e4:	4b1c      	ldr	r3, [pc, #112]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 80071e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e8:	4a1b      	ldr	r2, [pc, #108]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 80071ea:	f043 0301 	orr.w	r3, r3, #1
 80071ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071f0:	4b19      	ldr	r3, [pc, #100]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a18      	ldr	r2, [pc, #96]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 80071f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071fc:	f7fa fdf0 	bl	8001de0 <HAL_GetTick>
 8007200:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007202:	e008      	b.n	8007216 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007204:	f7fa fdec 	bl	8001de0 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e090      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007216:	4b10      	ldr	r3, [pc, #64]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0f0      	beq.n	8007204 <HAL_RCC_OscConfig+0x670>
 8007222:	e088      	b.n	8007336 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007224:	4b0c      	ldr	r3, [pc, #48]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a0b      	ldr	r2, [pc, #44]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 800722a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800722e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007230:	f7fa fdd6 	bl	8001de0 <HAL_GetTick>
 8007234:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007236:	e008      	b.n	800724a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007238:	f7fa fdd2 	bl	8001de0 <HAL_GetTick>
 800723c:	4602      	mov	r2, r0
 800723e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	2b02      	cmp	r3, #2
 8007244:	d901      	bls.n	800724a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e076      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800724a:	4b03      	ldr	r3, [pc, #12]	@ (8007258 <HAL_RCC_OscConfig+0x6c4>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1f0      	bne.n	8007238 <HAL_RCC_OscConfig+0x6a4>
 8007256:	e06e      	b.n	8007336 <HAL_RCC_OscConfig+0x7a2>
 8007258:	58024400 	.word	0x58024400
 800725c:	fffffc0c 	.word	0xfffffc0c
 8007260:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007264:	4b36      	ldr	r3, [pc, #216]	@ (8007340 <HAL_RCC_OscConfig+0x7ac>)
 8007266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007268:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800726a:	4b35      	ldr	r3, [pc, #212]	@ (8007340 <HAL_RCC_OscConfig+0x7ac>)
 800726c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800726e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007274:	2b01      	cmp	r3, #1
 8007276:	d031      	beq.n	80072dc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	f003 0203 	and.w	r2, r3, #3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007282:	429a      	cmp	r2, r3
 8007284:	d12a      	bne.n	80072dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	091b      	lsrs	r3, r3, #4
 800728a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007292:	429a      	cmp	r2, r3
 8007294:	d122      	bne.n	80072dc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d11a      	bne.n	80072dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	0a5b      	lsrs	r3, r3, #9
 80072aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d111      	bne.n	80072dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	0c1b      	lsrs	r3, r3, #16
 80072bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d108      	bne.n	80072dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	0e1b      	lsrs	r3, r3, #24
 80072ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072d8:	429a      	cmp	r2, r3
 80072da:	d001      	beq.n	80072e0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e02b      	b.n	8007338 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80072e0:	4b17      	ldr	r3, [pc, #92]	@ (8007340 <HAL_RCC_OscConfig+0x7ac>)
 80072e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072e4:	08db      	lsrs	r3, r3, #3
 80072e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d01f      	beq.n	8007336 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80072f6:	4b12      	ldr	r3, [pc, #72]	@ (8007340 <HAL_RCC_OscConfig+0x7ac>)
 80072f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072fa:	4a11      	ldr	r2, [pc, #68]	@ (8007340 <HAL_RCC_OscConfig+0x7ac>)
 80072fc:	f023 0301 	bic.w	r3, r3, #1
 8007300:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007302:	f7fa fd6d 	bl	8001de0 <HAL_GetTick>
 8007306:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007308:	bf00      	nop
 800730a:	f7fa fd69 	bl	8001de0 <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007312:	4293      	cmp	r3, r2
 8007314:	d0f9      	beq.n	800730a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007316:	4b0a      	ldr	r3, [pc, #40]	@ (8007340 <HAL_RCC_OscConfig+0x7ac>)
 8007318:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800731a:	4b0a      	ldr	r3, [pc, #40]	@ (8007344 <HAL_RCC_OscConfig+0x7b0>)
 800731c:	4013      	ands	r3, r2
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007322:	00d2      	lsls	r2, r2, #3
 8007324:	4906      	ldr	r1, [pc, #24]	@ (8007340 <HAL_RCC_OscConfig+0x7ac>)
 8007326:	4313      	orrs	r3, r2
 8007328:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800732a:	4b05      	ldr	r3, [pc, #20]	@ (8007340 <HAL_RCC_OscConfig+0x7ac>)
 800732c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732e:	4a04      	ldr	r2, [pc, #16]	@ (8007340 <HAL_RCC_OscConfig+0x7ac>)
 8007330:	f043 0301 	orr.w	r3, r3, #1
 8007334:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3730      	adds	r7, #48	@ 0x30
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	58024400 	.word	0x58024400
 8007344:	ffff0007 	.word	0xffff0007

08007348 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e19c      	b.n	8007696 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800735c:	4b8a      	ldr	r3, [pc, #552]	@ (8007588 <HAL_RCC_ClockConfig+0x240>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 030f 	and.w	r3, r3, #15
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	429a      	cmp	r2, r3
 8007368:	d910      	bls.n	800738c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800736a:	4b87      	ldr	r3, [pc, #540]	@ (8007588 <HAL_RCC_ClockConfig+0x240>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f023 020f 	bic.w	r2, r3, #15
 8007372:	4985      	ldr	r1, [pc, #532]	@ (8007588 <HAL_RCC_ClockConfig+0x240>)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	4313      	orrs	r3, r2
 8007378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800737a:	4b83      	ldr	r3, [pc, #524]	@ (8007588 <HAL_RCC_ClockConfig+0x240>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 030f 	and.w	r3, r3, #15
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	429a      	cmp	r2, r3
 8007386:	d001      	beq.n	800738c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e184      	b.n	8007696 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0304 	and.w	r3, r3, #4
 8007394:	2b00      	cmp	r3, #0
 8007396:	d010      	beq.n	80073ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691a      	ldr	r2, [r3, #16]
 800739c:	4b7b      	ldr	r3, [pc, #492]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d908      	bls.n	80073ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073a8:	4b78      	ldr	r3, [pc, #480]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	4975      	ldr	r1, [pc, #468]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0308 	and.w	r3, r3, #8
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d010      	beq.n	80073e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	695a      	ldr	r2, [r3, #20]
 80073ca:	4b70      	ldr	r3, [pc, #448]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d908      	bls.n	80073e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073d6:	4b6d      	ldr	r3, [pc, #436]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	496a      	ldr	r1, [pc, #424]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0310 	and.w	r3, r3, #16
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d010      	beq.n	8007416 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	699a      	ldr	r2, [r3, #24]
 80073f8:	4b64      	ldr	r3, [pc, #400]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 80073fa:	69db      	ldr	r3, [r3, #28]
 80073fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007400:	429a      	cmp	r2, r3
 8007402:	d908      	bls.n	8007416 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007404:	4b61      	ldr	r3, [pc, #388]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	495e      	ldr	r1, [pc, #376]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 8007412:	4313      	orrs	r3, r2
 8007414:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0320 	and.w	r3, r3, #32
 800741e:	2b00      	cmp	r3, #0
 8007420:	d010      	beq.n	8007444 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	69da      	ldr	r2, [r3, #28]
 8007426:	4b59      	ldr	r3, [pc, #356]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800742e:	429a      	cmp	r2, r3
 8007430:	d908      	bls.n	8007444 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007432:	4b56      	ldr	r3, [pc, #344]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	4953      	ldr	r1, [pc, #332]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 8007440:	4313      	orrs	r3, r2
 8007442:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0302 	and.w	r3, r3, #2
 800744c:	2b00      	cmp	r3, #0
 800744e:	d010      	beq.n	8007472 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68da      	ldr	r2, [r3, #12]
 8007454:	4b4d      	ldr	r3, [pc, #308]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	f003 030f 	and.w	r3, r3, #15
 800745c:	429a      	cmp	r2, r3
 800745e:	d908      	bls.n	8007472 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007460:	4b4a      	ldr	r3, [pc, #296]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	f023 020f 	bic.w	r2, r3, #15
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	4947      	ldr	r1, [pc, #284]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 800746e:	4313      	orrs	r3, r2
 8007470:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	d055      	beq.n	800752a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800747e:	4b43      	ldr	r3, [pc, #268]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	4940      	ldr	r1, [pc, #256]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 800748c:	4313      	orrs	r3, r2
 800748e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2b02      	cmp	r3, #2
 8007496:	d107      	bne.n	80074a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007498:	4b3c      	ldr	r3, [pc, #240]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d121      	bne.n	80074e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e0f6      	b.n	8007696 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d107      	bne.n	80074c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074b0:	4b36      	ldr	r3, [pc, #216]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d115      	bne.n	80074e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e0ea      	b.n	8007696 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d107      	bne.n	80074d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80074c8:	4b30      	ldr	r3, [pc, #192]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d109      	bne.n	80074e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e0de      	b.n	8007696 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074d8:	4b2c      	ldr	r3, [pc, #176]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0304 	and.w	r3, r3, #4
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e0d6      	b.n	8007696 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074e8:	4b28      	ldr	r3, [pc, #160]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	f023 0207 	bic.w	r2, r3, #7
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	4925      	ldr	r1, [pc, #148]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074fa:	f7fa fc71 	bl	8001de0 <HAL_GetTick>
 80074fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007500:	e00a      	b.n	8007518 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007502:	f7fa fc6d 	bl	8001de0 <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007510:	4293      	cmp	r3, r2
 8007512:	d901      	bls.n	8007518 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e0be      	b.n	8007696 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007518:	4b1c      	ldr	r3, [pc, #112]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	00db      	lsls	r3, r3, #3
 8007526:	429a      	cmp	r2, r3
 8007528:	d1eb      	bne.n	8007502 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d010      	beq.n	8007558 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68da      	ldr	r2, [r3, #12]
 800753a:	4b14      	ldr	r3, [pc, #80]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	f003 030f 	and.w	r3, r3, #15
 8007542:	429a      	cmp	r2, r3
 8007544:	d208      	bcs.n	8007558 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007546:	4b11      	ldr	r3, [pc, #68]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	f023 020f 	bic.w	r2, r3, #15
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	490e      	ldr	r1, [pc, #56]	@ (800758c <HAL_RCC_ClockConfig+0x244>)
 8007554:	4313      	orrs	r3, r2
 8007556:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007558:	4b0b      	ldr	r3, [pc, #44]	@ (8007588 <HAL_RCC_ClockConfig+0x240>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 030f 	and.w	r3, r3, #15
 8007560:	683a      	ldr	r2, [r7, #0]
 8007562:	429a      	cmp	r2, r3
 8007564:	d214      	bcs.n	8007590 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007566:	4b08      	ldr	r3, [pc, #32]	@ (8007588 <HAL_RCC_ClockConfig+0x240>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f023 020f 	bic.w	r2, r3, #15
 800756e:	4906      	ldr	r1, [pc, #24]	@ (8007588 <HAL_RCC_ClockConfig+0x240>)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	4313      	orrs	r3, r2
 8007574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007576:	4b04      	ldr	r3, [pc, #16]	@ (8007588 <HAL_RCC_ClockConfig+0x240>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 030f 	and.w	r3, r3, #15
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	429a      	cmp	r2, r3
 8007582:	d005      	beq.n	8007590 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e086      	b.n	8007696 <HAL_RCC_ClockConfig+0x34e>
 8007588:	52002000 	.word	0x52002000
 800758c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0304 	and.w	r3, r3, #4
 8007598:	2b00      	cmp	r3, #0
 800759a:	d010      	beq.n	80075be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	691a      	ldr	r2, [r3, #16]
 80075a0:	4b3f      	ldr	r3, [pc, #252]	@ (80076a0 <HAL_RCC_ClockConfig+0x358>)
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d208      	bcs.n	80075be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80075ac:	4b3c      	ldr	r3, [pc, #240]	@ (80076a0 <HAL_RCC_ClockConfig+0x358>)
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	4939      	ldr	r1, [pc, #228]	@ (80076a0 <HAL_RCC_ClockConfig+0x358>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0308 	and.w	r3, r3, #8
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d010      	beq.n	80075ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	695a      	ldr	r2, [r3, #20]
 80075ce:	4b34      	ldr	r3, [pc, #208]	@ (80076a0 <HAL_RCC_ClockConfig+0x358>)
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d208      	bcs.n	80075ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80075da:	4b31      	ldr	r3, [pc, #196]	@ (80076a0 <HAL_RCC_ClockConfig+0x358>)
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	492e      	ldr	r1, [pc, #184]	@ (80076a0 <HAL_RCC_ClockConfig+0x358>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0310 	and.w	r3, r3, #16
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d010      	beq.n	800761a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	699a      	ldr	r2, [r3, #24]
 80075fc:	4b28      	ldr	r3, [pc, #160]	@ (80076a0 <HAL_RCC_ClockConfig+0x358>)
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007604:	429a      	cmp	r2, r3
 8007606:	d208      	bcs.n	800761a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007608:	4b25      	ldr	r3, [pc, #148]	@ (80076a0 <HAL_RCC_ClockConfig+0x358>)
 800760a:	69db      	ldr	r3, [r3, #28]
 800760c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	4922      	ldr	r1, [pc, #136]	@ (80076a0 <HAL_RCC_ClockConfig+0x358>)
 8007616:	4313      	orrs	r3, r2
 8007618:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0320 	and.w	r3, r3, #32
 8007622:	2b00      	cmp	r3, #0
 8007624:	d010      	beq.n	8007648 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	69da      	ldr	r2, [r3, #28]
 800762a:	4b1d      	ldr	r3, [pc, #116]	@ (80076a0 <HAL_RCC_ClockConfig+0x358>)
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007632:	429a      	cmp	r2, r3
 8007634:	d208      	bcs.n	8007648 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007636:	4b1a      	ldr	r3, [pc, #104]	@ (80076a0 <HAL_RCC_ClockConfig+0x358>)
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	4917      	ldr	r1, [pc, #92]	@ (80076a0 <HAL_RCC_ClockConfig+0x358>)
 8007644:	4313      	orrs	r3, r2
 8007646:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007648:	f000 f834 	bl	80076b4 <HAL_RCC_GetSysClockFreq>
 800764c:	4602      	mov	r2, r0
 800764e:	4b14      	ldr	r3, [pc, #80]	@ (80076a0 <HAL_RCC_ClockConfig+0x358>)
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	0a1b      	lsrs	r3, r3, #8
 8007654:	f003 030f 	and.w	r3, r3, #15
 8007658:	4912      	ldr	r1, [pc, #72]	@ (80076a4 <HAL_RCC_ClockConfig+0x35c>)
 800765a:	5ccb      	ldrb	r3, [r1, r3]
 800765c:	f003 031f 	and.w	r3, r3, #31
 8007660:	fa22 f303 	lsr.w	r3, r2, r3
 8007664:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007666:	4b0e      	ldr	r3, [pc, #56]	@ (80076a0 <HAL_RCC_ClockConfig+0x358>)
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	f003 030f 	and.w	r3, r3, #15
 800766e:	4a0d      	ldr	r2, [pc, #52]	@ (80076a4 <HAL_RCC_ClockConfig+0x35c>)
 8007670:	5cd3      	ldrb	r3, [r2, r3]
 8007672:	f003 031f 	and.w	r3, r3, #31
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	fa22 f303 	lsr.w	r3, r2, r3
 800767c:	4a0a      	ldr	r2, [pc, #40]	@ (80076a8 <HAL_RCC_ClockConfig+0x360>)
 800767e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007680:	4a0a      	ldr	r2, [pc, #40]	@ (80076ac <HAL_RCC_ClockConfig+0x364>)
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007686:	4b0a      	ldr	r3, [pc, #40]	@ (80076b0 <HAL_RCC_ClockConfig+0x368>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4618      	mov	r0, r3
 800768c:	f7fa fb5e 	bl	8001d4c <HAL_InitTick>
 8007690:	4603      	mov	r3, r0
 8007692:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007694:	7bfb      	ldrb	r3, [r7, #15]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	58024400 	.word	0x58024400
 80076a4:	0800c560 	.word	0x0800c560
 80076a8:	24000008 	.word	0x24000008
 80076ac:	24000004 	.word	0x24000004
 80076b0:	2400000c 	.word	0x2400000c

080076b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b089      	sub	sp, #36	@ 0x24
 80076b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076ba:	4bb3      	ldr	r3, [pc, #716]	@ (8007988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076c2:	2b18      	cmp	r3, #24
 80076c4:	f200 8155 	bhi.w	8007972 <HAL_RCC_GetSysClockFreq+0x2be>
 80076c8:	a201      	add	r2, pc, #4	@ (adr r2, 80076d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80076ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ce:	bf00      	nop
 80076d0:	08007735 	.word	0x08007735
 80076d4:	08007973 	.word	0x08007973
 80076d8:	08007973 	.word	0x08007973
 80076dc:	08007973 	.word	0x08007973
 80076e0:	08007973 	.word	0x08007973
 80076e4:	08007973 	.word	0x08007973
 80076e8:	08007973 	.word	0x08007973
 80076ec:	08007973 	.word	0x08007973
 80076f0:	0800775b 	.word	0x0800775b
 80076f4:	08007973 	.word	0x08007973
 80076f8:	08007973 	.word	0x08007973
 80076fc:	08007973 	.word	0x08007973
 8007700:	08007973 	.word	0x08007973
 8007704:	08007973 	.word	0x08007973
 8007708:	08007973 	.word	0x08007973
 800770c:	08007973 	.word	0x08007973
 8007710:	08007761 	.word	0x08007761
 8007714:	08007973 	.word	0x08007973
 8007718:	08007973 	.word	0x08007973
 800771c:	08007973 	.word	0x08007973
 8007720:	08007973 	.word	0x08007973
 8007724:	08007973 	.word	0x08007973
 8007728:	08007973 	.word	0x08007973
 800772c:	08007973 	.word	0x08007973
 8007730:	08007767 	.word	0x08007767
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007734:	4b94      	ldr	r3, [pc, #592]	@ (8007988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0320 	and.w	r3, r3, #32
 800773c:	2b00      	cmp	r3, #0
 800773e:	d009      	beq.n	8007754 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007740:	4b91      	ldr	r3, [pc, #580]	@ (8007988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	08db      	lsrs	r3, r3, #3
 8007746:	f003 0303 	and.w	r3, r3, #3
 800774a:	4a90      	ldr	r2, [pc, #576]	@ (800798c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800774c:	fa22 f303 	lsr.w	r3, r2, r3
 8007750:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007752:	e111      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007754:	4b8d      	ldr	r3, [pc, #564]	@ (800798c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007756:	61bb      	str	r3, [r7, #24]
      break;
 8007758:	e10e      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800775a:	4b8d      	ldr	r3, [pc, #564]	@ (8007990 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800775c:	61bb      	str	r3, [r7, #24]
      break;
 800775e:	e10b      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007760:	4b8c      	ldr	r3, [pc, #560]	@ (8007994 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007762:	61bb      	str	r3, [r7, #24]
      break;
 8007764:	e108      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007766:	4b88      	ldr	r3, [pc, #544]	@ (8007988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800776a:	f003 0303 	and.w	r3, r3, #3
 800776e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007770:	4b85      	ldr	r3, [pc, #532]	@ (8007988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007774:	091b      	lsrs	r3, r3, #4
 8007776:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800777a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800777c:	4b82      	ldr	r3, [pc, #520]	@ (8007988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800777e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007786:	4b80      	ldr	r3, [pc, #512]	@ (8007988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800778a:	08db      	lsrs	r3, r3, #3
 800778c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	fb02 f303 	mul.w	r3, r2, r3
 8007796:	ee07 3a90 	vmov	s15, r3
 800779a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 80e1 	beq.w	800796c <HAL_RCC_GetSysClockFreq+0x2b8>
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	f000 8083 	beq.w	80078b8 <HAL_RCC_GetSysClockFreq+0x204>
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	f200 80a1 	bhi.w	80078fc <HAL_RCC_GetSysClockFreq+0x248>
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d003      	beq.n	80077c8 <HAL_RCC_GetSysClockFreq+0x114>
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d056      	beq.n	8007874 <HAL_RCC_GetSysClockFreq+0x1c0>
 80077c6:	e099      	b.n	80078fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077c8:	4b6f      	ldr	r3, [pc, #444]	@ (8007988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0320 	and.w	r3, r3, #32
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d02d      	beq.n	8007830 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077d4:	4b6c      	ldr	r3, [pc, #432]	@ (8007988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	08db      	lsrs	r3, r3, #3
 80077da:	f003 0303 	and.w	r3, r3, #3
 80077de:	4a6b      	ldr	r2, [pc, #428]	@ (800798c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077e0:	fa22 f303 	lsr.w	r3, r2, r3
 80077e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	ee07 3a90 	vmov	s15, r3
 80077ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	ee07 3a90 	vmov	s15, r3
 80077f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077fe:	4b62      	ldr	r3, [pc, #392]	@ (8007988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007806:	ee07 3a90 	vmov	s15, r3
 800780a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800780e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007812:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007998 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800781a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800781e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800782a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800782e:	e087      	b.n	8007940 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	ee07 3a90 	vmov	s15, r3
 8007836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800799c <HAL_RCC_GetSysClockFreq+0x2e8>
 800783e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007842:	4b51      	ldr	r3, [pc, #324]	@ (8007988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784a:	ee07 3a90 	vmov	s15, r3
 800784e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007852:	ed97 6a02 	vldr	s12, [r7, #8]
 8007856:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007998 <HAL_RCC_GetSysClockFreq+0x2e4>
 800785a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800785e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800786a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007872:	e065      	b.n	8007940 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80079a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007886:	4b40      	ldr	r3, [pc, #256]	@ (8007988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800788a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800788e:	ee07 3a90 	vmov	s15, r3
 8007892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007896:	ed97 6a02 	vldr	s12, [r7, #8]
 800789a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007998 <HAL_RCC_GetSysClockFreq+0x2e4>
 800789e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078b6:	e043      	b.n	8007940 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	ee07 3a90 	vmov	s15, r3
 80078be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80079a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80078c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078da:	ed97 6a02 	vldr	s12, [r7, #8]
 80078de:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007998 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078fa:	e021      	b.n	8007940 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	ee07 3a90 	vmov	s15, r3
 8007902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007906:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80079a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800790a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800790e:	4b1e      	ldr	r3, [pc, #120]	@ (8007988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007916:	ee07 3a90 	vmov	s15, r3
 800791a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800791e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007922:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007998 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800792a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800792e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800793a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800793e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007940:	4b11      	ldr	r3, [pc, #68]	@ (8007988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007944:	0a5b      	lsrs	r3, r3, #9
 8007946:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800794a:	3301      	adds	r3, #1
 800794c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	ee07 3a90 	vmov	s15, r3
 8007954:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007958:	edd7 6a07 	vldr	s13, [r7, #28]
 800795c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007964:	ee17 3a90 	vmov	r3, s15
 8007968:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800796a:	e005      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800796c:	2300      	movs	r3, #0
 800796e:	61bb      	str	r3, [r7, #24]
      break;
 8007970:	e002      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007972:	4b07      	ldr	r3, [pc, #28]	@ (8007990 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007974:	61bb      	str	r3, [r7, #24]
      break;
 8007976:	bf00      	nop
  }

  return sysclockfreq;
 8007978:	69bb      	ldr	r3, [r7, #24]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3724      	adds	r7, #36	@ 0x24
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	58024400 	.word	0x58024400
 800798c:	03d09000 	.word	0x03d09000
 8007990:	003d0900 	.word	0x003d0900
 8007994:	017d7840 	.word	0x017d7840
 8007998:	46000000 	.word	0x46000000
 800799c:	4c742400 	.word	0x4c742400
 80079a0:	4a742400 	.word	0x4a742400
 80079a4:	4bbebc20 	.word	0x4bbebc20

080079a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80079ae:	f7ff fe81 	bl	80076b4 <HAL_RCC_GetSysClockFreq>
 80079b2:	4602      	mov	r2, r0
 80079b4:	4b10      	ldr	r3, [pc, #64]	@ (80079f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	0a1b      	lsrs	r3, r3, #8
 80079ba:	f003 030f 	and.w	r3, r3, #15
 80079be:	490f      	ldr	r1, [pc, #60]	@ (80079fc <HAL_RCC_GetHCLKFreq+0x54>)
 80079c0:	5ccb      	ldrb	r3, [r1, r3]
 80079c2:	f003 031f 	and.w	r3, r3, #31
 80079c6:	fa22 f303 	lsr.w	r3, r2, r3
 80079ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80079cc:	4b0a      	ldr	r3, [pc, #40]	@ (80079f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	f003 030f 	and.w	r3, r3, #15
 80079d4:	4a09      	ldr	r2, [pc, #36]	@ (80079fc <HAL_RCC_GetHCLKFreq+0x54>)
 80079d6:	5cd3      	ldrb	r3, [r2, r3]
 80079d8:	f003 031f 	and.w	r3, r3, #31
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	fa22 f303 	lsr.w	r3, r2, r3
 80079e2:	4a07      	ldr	r2, [pc, #28]	@ (8007a00 <HAL_RCC_GetHCLKFreq+0x58>)
 80079e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80079e6:	4a07      	ldr	r2, [pc, #28]	@ (8007a04 <HAL_RCC_GetHCLKFreq+0x5c>)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80079ec:	4b04      	ldr	r3, [pc, #16]	@ (8007a00 <HAL_RCC_GetHCLKFreq+0x58>)
 80079ee:	681b      	ldr	r3, [r3, #0]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	58024400 	.word	0x58024400
 80079fc:	0800c560 	.word	0x0800c560
 8007a00:	24000008 	.word	0x24000008
 8007a04:	24000004 	.word	0x24000004

08007a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007a0c:	f7ff ffcc 	bl	80079a8 <HAL_RCC_GetHCLKFreq>
 8007a10:	4602      	mov	r2, r0
 8007a12:	4b06      	ldr	r3, [pc, #24]	@ (8007a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	091b      	lsrs	r3, r3, #4
 8007a18:	f003 0307 	and.w	r3, r3, #7
 8007a1c:	4904      	ldr	r1, [pc, #16]	@ (8007a30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a1e:	5ccb      	ldrb	r3, [r1, r3]
 8007a20:	f003 031f 	and.w	r3, r3, #31
 8007a24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	58024400 	.word	0x58024400
 8007a30:	0800c560 	.word	0x0800c560

08007a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007a38:	f7ff ffb6 	bl	80079a8 <HAL_RCC_GetHCLKFreq>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	4b06      	ldr	r3, [pc, #24]	@ (8007a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	0a1b      	lsrs	r3, r3, #8
 8007a44:	f003 0307 	and.w	r3, r3, #7
 8007a48:	4904      	ldr	r1, [pc, #16]	@ (8007a5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a4a:	5ccb      	ldrb	r3, [r1, r3]
 8007a4c:	f003 031f 	and.w	r3, r3, #31
 8007a50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	58024400 	.word	0x58024400
 8007a5c:	0800c560 	.word	0x0800c560

08007a60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a64:	b0c6      	sub	sp, #280	@ 0x118
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a72:	2300      	movs	r3, #0
 8007a74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a80:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007a84:	2500      	movs	r5, #0
 8007a86:	ea54 0305 	orrs.w	r3, r4, r5
 8007a8a:	d049      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a96:	d02f      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007a98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a9c:	d828      	bhi.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007a9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007aa2:	d01a      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007aa4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007aa8:	d822      	bhi.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007aae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ab2:	d007      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ab4:	e01c      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ab6:	4bab      	ldr	r3, [pc, #684]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aba:	4aaa      	ldr	r2, [pc, #680]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007abc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ac0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ac2:	e01a      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ac8:	3308      	adds	r3, #8
 8007aca:	2102      	movs	r1, #2
 8007acc:	4618      	mov	r0, r3
 8007ace:	f002 fa49 	bl	8009f64 <RCCEx_PLL2_Config>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ad8:	e00f      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ade:	3328      	adds	r3, #40	@ 0x28
 8007ae0:	2102      	movs	r1, #2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f002 faf0 	bl	800a0c8 <RCCEx_PLL3_Config>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007aee:	e004      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007af6:	e000      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007afa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10a      	bne.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007b02:	4b98      	ldr	r3, [pc, #608]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b10:	4a94      	ldr	r2, [pc, #592]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b12:	430b      	orrs	r3, r1
 8007b14:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b16:	e003      	b.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b28:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007b2c:	f04f 0900 	mov.w	r9, #0
 8007b30:	ea58 0309 	orrs.w	r3, r8, r9
 8007b34:	d047      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	d82a      	bhi.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007b40:	a201      	add	r2, pc, #4	@ (adr r2, 8007b48 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b46:	bf00      	nop
 8007b48:	08007b5d 	.word	0x08007b5d
 8007b4c:	08007b6b 	.word	0x08007b6b
 8007b50:	08007b81 	.word	0x08007b81
 8007b54:	08007b9f 	.word	0x08007b9f
 8007b58:	08007b9f 	.word	0x08007b9f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b5c:	4b81      	ldr	r3, [pc, #516]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b60:	4a80      	ldr	r2, [pc, #512]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b68:	e01a      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b6e:	3308      	adds	r3, #8
 8007b70:	2100      	movs	r1, #0
 8007b72:	4618      	mov	r0, r3
 8007b74:	f002 f9f6 	bl	8009f64 <RCCEx_PLL2_Config>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b7e:	e00f      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b84:	3328      	adds	r3, #40	@ 0x28
 8007b86:	2100      	movs	r1, #0
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f002 fa9d 	bl	800a0c8 <RCCEx_PLL3_Config>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b94:	e004      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b9c:	e000      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007b9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ba0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10a      	bne.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ba8:	4b6e      	ldr	r3, [pc, #440]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bac:	f023 0107 	bic.w	r1, r3, #7
 8007bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bb6:	4a6b      	ldr	r2, [pc, #428]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007bb8:	430b      	orrs	r3, r1
 8007bba:	6513      	str	r3, [r2, #80]	@ 0x50
 8007bbc:	e003      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8007bd2:	f04f 0b00 	mov.w	fp, #0
 8007bd6:	ea5a 030b 	orrs.w	r3, sl, fp
 8007bda:	d05b      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007be0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007be4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007be8:	d03b      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007bea:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007bee:	d834      	bhi.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007bf0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007bf4:	d037      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007bf6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007bfa:	d82e      	bhi.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007bfc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007c00:	d033      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007c02:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007c06:	d828      	bhi.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007c08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c0c:	d01a      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007c0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c12:	d822      	bhi.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d003      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007c18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c1c:	d007      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8007c1e:	e01c      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c20:	4b50      	ldr	r3, [pc, #320]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c24:	4a4f      	ldr	r2, [pc, #316]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007c26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c2c:	e01e      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c32:	3308      	adds	r3, #8
 8007c34:	2100      	movs	r1, #0
 8007c36:	4618      	mov	r0, r3
 8007c38:	f002 f994 	bl	8009f64 <RCCEx_PLL2_Config>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007c42:	e013      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c48:	3328      	adds	r3, #40	@ 0x28
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f002 fa3b 	bl	800a0c8 <RCCEx_PLL3_Config>
 8007c52:	4603      	mov	r3, r0
 8007c54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c58:	e008      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c60:	e004      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007c62:	bf00      	nop
 8007c64:	e002      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007c66:	bf00      	nop
 8007c68:	e000      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10b      	bne.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007c74:	4b3b      	ldr	r3, [pc, #236]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c78:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c84:	4a37      	ldr	r2, [pc, #220]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007c86:	430b      	orrs	r3, r1
 8007c88:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c8a:	e003      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007ca0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007caa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007cae:	460b      	mov	r3, r1
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	d05d      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007cbc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007cc0:	d03b      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007cc2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007cc6:	d834      	bhi.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007cc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ccc:	d037      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007cce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007cd2:	d82e      	bhi.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007cd4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007cd8:	d033      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007cda:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007cde:	d828      	bhi.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007ce0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ce4:	d01a      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007ce6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cea:	d822      	bhi.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d003      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007cf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007cf4:	d007      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007cf6:	e01c      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cfc:	4a19      	ldr	r2, [pc, #100]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d04:	e01e      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d0a:	3308      	adds	r3, #8
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f002 f928 	bl	8009f64 <RCCEx_PLL2_Config>
 8007d14:	4603      	mov	r3, r0
 8007d16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007d1a:	e013      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d20:	3328      	adds	r3, #40	@ 0x28
 8007d22:	2100      	movs	r1, #0
 8007d24:	4618      	mov	r0, r3
 8007d26:	f002 f9cf 	bl	800a0c8 <RCCEx_PLL3_Config>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d30:	e008      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d38:	e004      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007d3a:	bf00      	nop
 8007d3c:	e002      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007d3e:	bf00      	nop
 8007d40:	e000      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10d      	bne.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007d4c:	4b05      	ldr	r3, [pc, #20]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d50:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007d5c:	4a01      	ldr	r2, [pc, #4]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007d5e:	430b      	orrs	r3, r1
 8007d60:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d62:	e005      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007d64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d78:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007d7c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007d80:	2300      	movs	r3, #0
 8007d82:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007d86:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	d03a      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d96:	2b30      	cmp	r3, #48	@ 0x30
 8007d98:	d01f      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8007d9a:	2b30      	cmp	r3, #48	@ 0x30
 8007d9c:	d819      	bhi.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007d9e:	2b20      	cmp	r3, #32
 8007da0:	d00c      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007da2:	2b20      	cmp	r3, #32
 8007da4:	d815      	bhi.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d019      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007daa:	2b10      	cmp	r3, #16
 8007dac:	d111      	bne.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dae:	4baa      	ldr	r3, [pc, #680]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db2:	4aa9      	ldr	r2, [pc, #676]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007db4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007db8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007dba:	e011      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc0:	3308      	adds	r3, #8
 8007dc2:	2102      	movs	r1, #2
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f002 f8cd 	bl	8009f64 <RCCEx_PLL2_Config>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007dd0:	e006      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007dd8:	e002      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007dda:	bf00      	nop
 8007ddc:	e000      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007dde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007de0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10a      	bne.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007de8:	4b9b      	ldr	r3, [pc, #620]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007df6:	4a98      	ldr	r2, [pc, #608]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007df8:	430b      	orrs	r3, r1
 8007dfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007dfc:	e003      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007e12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007e16:	2300      	movs	r3, #0
 8007e18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007e1c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007e20:	460b      	mov	r3, r1
 8007e22:	4313      	orrs	r3, r2
 8007e24:	d051      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e30:	d035      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007e32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e36:	d82e      	bhi.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007e38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e3c:	d031      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007e3e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e42:	d828      	bhi.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007e44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e48:	d01a      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007e4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e4e:	d822      	bhi.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d003      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e58:	d007      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007e5a:	e01c      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e5c:	4b7e      	ldr	r3, [pc, #504]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e60:	4a7d      	ldr	r2, [pc, #500]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e68:	e01c      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e6e:	3308      	adds	r3, #8
 8007e70:	2100      	movs	r1, #0
 8007e72:	4618      	mov	r0, r3
 8007e74:	f002 f876 	bl	8009f64 <RCCEx_PLL2_Config>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e7e:	e011      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e84:	3328      	adds	r3, #40	@ 0x28
 8007e86:	2100      	movs	r1, #0
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f002 f91d 	bl	800a0c8 <RCCEx_PLL3_Config>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e94:	e006      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e9c:	e002      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007e9e:	bf00      	nop
 8007ea0:	e000      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007ea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ea4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10a      	bne.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007eac:	4b6a      	ldr	r3, [pc, #424]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eb0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eba:	4a67      	ldr	r2, [pc, #412]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ebc:	430b      	orrs	r3, r1
 8007ebe:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ec0:	e003      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ec6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007ed6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007eda:	2300      	movs	r3, #0
 8007edc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007ee0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	d053      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ef0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ef4:	d033      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007ef6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007efa:	d82c      	bhi.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007efc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f00:	d02f      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007f02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f06:	d826      	bhi.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007f08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f0c:	d02b      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007f0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f12:	d820      	bhi.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007f14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f18:	d012      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007f1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f1e:	d81a      	bhi.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d022      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f28:	d115      	bne.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f2e:	3308      	adds	r3, #8
 8007f30:	2101      	movs	r1, #1
 8007f32:	4618      	mov	r0, r3
 8007f34:	f002 f816 	bl	8009f64 <RCCEx_PLL2_Config>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007f3e:	e015      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f44:	3328      	adds	r3, #40	@ 0x28
 8007f46:	2101      	movs	r1, #1
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f002 f8bd 	bl	800a0c8 <RCCEx_PLL3_Config>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007f54:	e00a      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f5c:	e006      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007f5e:	bf00      	nop
 8007f60:	e004      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007f62:	bf00      	nop
 8007f64:	e002      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007f66:	bf00      	nop
 8007f68:	e000      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007f6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10a      	bne.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007f74:	4b38      	ldr	r3, [pc, #224]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f78:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f82:	4a35      	ldr	r2, [pc, #212]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007f84:	430b      	orrs	r3, r1
 8007f86:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f88:	e003      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007f9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007fa8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007fac:	460b      	mov	r3, r1
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	d058      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fbe:	d033      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fc4:	d82c      	bhi.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fca:	d02f      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fd0:	d826      	bhi.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007fd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fd6:	d02b      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007fd8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fdc:	d820      	bhi.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007fde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fe2:	d012      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007fe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fe8:	d81a      	bhi.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d022      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007fee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ff2:	d115      	bne.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f001 ffb1 	bl	8009f64 <RCCEx_PLL2_Config>
 8008002:	4603      	mov	r3, r0
 8008004:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008008:	e015      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800800a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800800e:	3328      	adds	r3, #40	@ 0x28
 8008010:	2101      	movs	r1, #1
 8008012:	4618      	mov	r0, r3
 8008014:	f002 f858 	bl	800a0c8 <RCCEx_PLL3_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800801e:	e00a      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008026:	e006      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008028:	bf00      	nop
 800802a:	e004      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800802c:	bf00      	nop
 800802e:	e002      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008030:	bf00      	nop
 8008032:	e000      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008036:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10e      	bne.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800803e:	4b06      	ldr	r3, [pc, #24]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008042:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800804a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800804e:	4a02      	ldr	r2, [pc, #8]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008050:	430b      	orrs	r3, r1
 8008052:	6593      	str	r3, [r2, #88]	@ 0x58
 8008054:	e006      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008056:	bf00      	nop
 8008058:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008060:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008070:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008074:	2300      	movs	r3, #0
 8008076:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800807a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800807e:	460b      	mov	r3, r1
 8008080:	4313      	orrs	r3, r2
 8008082:	d037      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800808a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800808e:	d00e      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008090:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008094:	d816      	bhi.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008096:	2b00      	cmp	r3, #0
 8008098:	d018      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800809a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800809e:	d111      	bne.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080a0:	4bc4      	ldr	r3, [pc, #784]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a4:	4ac3      	ldr	r2, [pc, #780]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80080ac:	e00f      	b.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b2:	3308      	adds	r3, #8
 80080b4:	2101      	movs	r1, #1
 80080b6:	4618      	mov	r0, r3
 80080b8:	f001 ff54 	bl	8009f64 <RCCEx_PLL2_Config>
 80080bc:	4603      	mov	r3, r0
 80080be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80080c2:	e004      	b.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80080ca:	e000      	b.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80080cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d10a      	bne.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80080d6:	4bb7      	ldr	r3, [pc, #732]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80080de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080e4:	4ab3      	ldr	r2, [pc, #716]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080e6:	430b      	orrs	r3, r1
 80080e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80080ea:	e003      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80080f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008100:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008104:	2300      	movs	r3, #0
 8008106:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800810a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800810e:	460b      	mov	r3, r1
 8008110:	4313      	orrs	r3, r2
 8008112:	d039      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800811a:	2b03      	cmp	r3, #3
 800811c:	d81c      	bhi.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800811e:	a201      	add	r2, pc, #4	@ (adr r2, 8008124 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008124:	08008161 	.word	0x08008161
 8008128:	08008135 	.word	0x08008135
 800812c:	08008143 	.word	0x08008143
 8008130:	08008161 	.word	0x08008161
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008134:	4b9f      	ldr	r3, [pc, #636]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008138:	4a9e      	ldr	r2, [pc, #632]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800813a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800813e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008140:	e00f      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008146:	3308      	adds	r3, #8
 8008148:	2102      	movs	r1, #2
 800814a:	4618      	mov	r0, r3
 800814c:	f001 ff0a 	bl	8009f64 <RCCEx_PLL2_Config>
 8008150:	4603      	mov	r3, r0
 8008152:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008156:	e004      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800815e:	e000      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008162:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10a      	bne.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800816a:	4b92      	ldr	r3, [pc, #584]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800816c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800816e:	f023 0103 	bic.w	r1, r3, #3
 8008172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008178:	4a8e      	ldr	r2, [pc, #568]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800817a:	430b      	orrs	r3, r1
 800817c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800817e:	e003      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008180:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008184:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008190:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008194:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008198:	2300      	movs	r3, #0
 800819a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800819e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4313      	orrs	r3, r2
 80081a6:	f000 8099 	beq.w	80082dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081aa:	4b83      	ldr	r3, [pc, #524]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a82      	ldr	r2, [pc, #520]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80081b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081b6:	f7f9 fe13 	bl	8001de0 <HAL_GetTick>
 80081ba:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081be:	e00b      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081c0:	f7f9 fe0e 	bl	8001de0 <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	2b64      	cmp	r3, #100	@ 0x64
 80081ce:	d903      	bls.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80081d6:	e005      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081d8:	4b77      	ldr	r3, [pc, #476]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d0ed      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80081e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d173      	bne.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80081ec:	4b71      	ldr	r3, [pc, #452]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80081ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80081f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80081f8:	4053      	eors	r3, r2
 80081fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d015      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008202:	4b6c      	ldr	r3, [pc, #432]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008206:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800820a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800820e:	4b69      	ldr	r3, [pc, #420]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008212:	4a68      	ldr	r2, [pc, #416]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008218:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800821a:	4b66      	ldr	r3, [pc, #408]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800821c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821e:	4a65      	ldr	r2, [pc, #404]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008220:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008224:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008226:	4a63      	ldr	r2, [pc, #396]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008228:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800822c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800822e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008232:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008236:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800823a:	d118      	bne.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800823c:	f7f9 fdd0 	bl	8001de0 <HAL_GetTick>
 8008240:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008244:	e00d      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008246:	f7f9 fdcb 	bl	8001de0 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008250:	1ad2      	subs	r2, r2, r3
 8008252:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008256:	429a      	cmp	r2, r3
 8008258:	d903      	bls.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8008260:	e005      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008262:	4b54      	ldr	r3, [pc, #336]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008266:	f003 0302 	and.w	r3, r3, #2
 800826a:	2b00      	cmp	r3, #0
 800826c:	d0eb      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800826e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008272:	2b00      	cmp	r3, #0
 8008274:	d129      	bne.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800827a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800827e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008282:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008286:	d10e      	bne.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008288:	4b4a      	ldr	r3, [pc, #296]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008294:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008298:	091a      	lsrs	r2, r3, #4
 800829a:	4b48      	ldr	r3, [pc, #288]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800829c:	4013      	ands	r3, r2
 800829e:	4a45      	ldr	r2, [pc, #276]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082a0:	430b      	orrs	r3, r1
 80082a2:	6113      	str	r3, [r2, #16]
 80082a4:	e005      	b.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80082a6:	4b43      	ldr	r3, [pc, #268]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	4a42      	ldr	r2, [pc, #264]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80082b0:	6113      	str	r3, [r2, #16]
 80082b2:	4b40      	ldr	r3, [pc, #256]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082b4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80082b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80082be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082c2:	4a3c      	ldr	r2, [pc, #240]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082c4:	430b      	orrs	r3, r1
 80082c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80082c8:	e008      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80082ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80082d2:	e003      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80082dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e4:	f002 0301 	and.w	r3, r2, #1
 80082e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082ec:	2300      	movs	r3, #0
 80082ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80082f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80082f6:	460b      	mov	r3, r1
 80082f8:	4313      	orrs	r3, r2
 80082fa:	f000 808f 	beq.w	800841c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80082fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008302:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008304:	2b28      	cmp	r3, #40	@ 0x28
 8008306:	d871      	bhi.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008308:	a201      	add	r2, pc, #4	@ (adr r2, 8008310 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800830a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830e:	bf00      	nop
 8008310:	080083f5 	.word	0x080083f5
 8008314:	080083ed 	.word	0x080083ed
 8008318:	080083ed 	.word	0x080083ed
 800831c:	080083ed 	.word	0x080083ed
 8008320:	080083ed 	.word	0x080083ed
 8008324:	080083ed 	.word	0x080083ed
 8008328:	080083ed 	.word	0x080083ed
 800832c:	080083ed 	.word	0x080083ed
 8008330:	080083c1 	.word	0x080083c1
 8008334:	080083ed 	.word	0x080083ed
 8008338:	080083ed 	.word	0x080083ed
 800833c:	080083ed 	.word	0x080083ed
 8008340:	080083ed 	.word	0x080083ed
 8008344:	080083ed 	.word	0x080083ed
 8008348:	080083ed 	.word	0x080083ed
 800834c:	080083ed 	.word	0x080083ed
 8008350:	080083d7 	.word	0x080083d7
 8008354:	080083ed 	.word	0x080083ed
 8008358:	080083ed 	.word	0x080083ed
 800835c:	080083ed 	.word	0x080083ed
 8008360:	080083ed 	.word	0x080083ed
 8008364:	080083ed 	.word	0x080083ed
 8008368:	080083ed 	.word	0x080083ed
 800836c:	080083ed 	.word	0x080083ed
 8008370:	080083f5 	.word	0x080083f5
 8008374:	080083ed 	.word	0x080083ed
 8008378:	080083ed 	.word	0x080083ed
 800837c:	080083ed 	.word	0x080083ed
 8008380:	080083ed 	.word	0x080083ed
 8008384:	080083ed 	.word	0x080083ed
 8008388:	080083ed 	.word	0x080083ed
 800838c:	080083ed 	.word	0x080083ed
 8008390:	080083f5 	.word	0x080083f5
 8008394:	080083ed 	.word	0x080083ed
 8008398:	080083ed 	.word	0x080083ed
 800839c:	080083ed 	.word	0x080083ed
 80083a0:	080083ed 	.word	0x080083ed
 80083a4:	080083ed 	.word	0x080083ed
 80083a8:	080083ed 	.word	0x080083ed
 80083ac:	080083ed 	.word	0x080083ed
 80083b0:	080083f5 	.word	0x080083f5
 80083b4:	58024400 	.word	0x58024400
 80083b8:	58024800 	.word	0x58024800
 80083bc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083c4:	3308      	adds	r3, #8
 80083c6:	2101      	movs	r1, #1
 80083c8:	4618      	mov	r0, r3
 80083ca:	f001 fdcb 	bl	8009f64 <RCCEx_PLL2_Config>
 80083ce:	4603      	mov	r3, r0
 80083d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80083d4:	e00f      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083da:	3328      	adds	r3, #40	@ 0x28
 80083dc:	2101      	movs	r1, #1
 80083de:	4618      	mov	r0, r3
 80083e0:	f001 fe72 	bl	800a0c8 <RCCEx_PLL3_Config>
 80083e4:	4603      	mov	r3, r0
 80083e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80083ea:	e004      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80083f2:	e000      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80083f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10a      	bne.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80083fe:	4bbf      	ldr	r3, [pc, #764]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008402:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800840a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800840c:	4abb      	ldr	r2, [pc, #748]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800840e:	430b      	orrs	r3, r1
 8008410:	6553      	str	r3, [r2, #84]	@ 0x54
 8008412:	e003      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008414:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008418:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800841c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	f002 0302 	and.w	r3, r2, #2
 8008428:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800842c:	2300      	movs	r3, #0
 800842e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008432:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008436:	460b      	mov	r3, r1
 8008438:	4313      	orrs	r3, r2
 800843a:	d041      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800843c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008442:	2b05      	cmp	r3, #5
 8008444:	d824      	bhi.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008446:	a201      	add	r2, pc, #4	@ (adr r2, 800844c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844c:	08008499 	.word	0x08008499
 8008450:	08008465 	.word	0x08008465
 8008454:	0800847b 	.word	0x0800847b
 8008458:	08008499 	.word	0x08008499
 800845c:	08008499 	.word	0x08008499
 8008460:	08008499 	.word	0x08008499
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008468:	3308      	adds	r3, #8
 800846a:	2101      	movs	r1, #1
 800846c:	4618      	mov	r0, r3
 800846e:	f001 fd79 	bl	8009f64 <RCCEx_PLL2_Config>
 8008472:	4603      	mov	r3, r0
 8008474:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008478:	e00f      	b.n	800849a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800847a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800847e:	3328      	adds	r3, #40	@ 0x28
 8008480:	2101      	movs	r1, #1
 8008482:	4618      	mov	r0, r3
 8008484:	f001 fe20 	bl	800a0c8 <RCCEx_PLL3_Config>
 8008488:	4603      	mov	r3, r0
 800848a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800848e:	e004      	b.n	800849a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008496:	e000      	b.n	800849a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8008498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800849a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10a      	bne.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80084a2:	4b96      	ldr	r3, [pc, #600]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80084a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084a6:	f023 0107 	bic.w	r1, r3, #7
 80084aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084b0:	4a92      	ldr	r2, [pc, #584]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80084b2:	430b      	orrs	r3, r1
 80084b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80084b6:	e003      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80084c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c8:	f002 0304 	and.w	r3, r2, #4
 80084cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80084d0:	2300      	movs	r3, #0
 80084d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084d6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80084da:	460b      	mov	r3, r1
 80084dc:	4313      	orrs	r3, r2
 80084de:	d044      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80084e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084e8:	2b05      	cmp	r3, #5
 80084ea:	d825      	bhi.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80084ec:	a201      	add	r2, pc, #4	@ (adr r2, 80084f4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80084ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f2:	bf00      	nop
 80084f4:	08008541 	.word	0x08008541
 80084f8:	0800850d 	.word	0x0800850d
 80084fc:	08008523 	.word	0x08008523
 8008500:	08008541 	.word	0x08008541
 8008504:	08008541 	.word	0x08008541
 8008508:	08008541 	.word	0x08008541
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800850c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008510:	3308      	adds	r3, #8
 8008512:	2101      	movs	r1, #1
 8008514:	4618      	mov	r0, r3
 8008516:	f001 fd25 	bl	8009f64 <RCCEx_PLL2_Config>
 800851a:	4603      	mov	r3, r0
 800851c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008520:	e00f      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008526:	3328      	adds	r3, #40	@ 0x28
 8008528:	2101      	movs	r1, #1
 800852a:	4618      	mov	r0, r3
 800852c:	f001 fdcc 	bl	800a0c8 <RCCEx_PLL3_Config>
 8008530:	4603      	mov	r3, r0
 8008532:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008536:	e004      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800853e:	e000      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8008540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008542:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10b      	bne.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800854a:	4b6c      	ldr	r3, [pc, #432]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800854c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800854e:	f023 0107 	bic.w	r1, r3, #7
 8008552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800855a:	4a68      	ldr	r2, [pc, #416]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800855c:	430b      	orrs	r3, r1
 800855e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008560:	e003      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008562:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008566:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800856a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	f002 0320 	and.w	r3, r2, #32
 8008576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800857a:	2300      	movs	r3, #0
 800857c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008580:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008584:	460b      	mov	r3, r1
 8008586:	4313      	orrs	r3, r2
 8008588:	d055      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800858a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800858e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008592:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008596:	d033      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008598:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800859c:	d82c      	bhi.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800859e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085a2:	d02f      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80085a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085a8:	d826      	bhi.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80085aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80085ae:	d02b      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80085b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80085b4:	d820      	bhi.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80085b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085ba:	d012      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80085bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085c0:	d81a      	bhi.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d022      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80085c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085ca:	d115      	bne.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085d0:	3308      	adds	r3, #8
 80085d2:	2100      	movs	r1, #0
 80085d4:	4618      	mov	r0, r3
 80085d6:	f001 fcc5 	bl	8009f64 <RCCEx_PLL2_Config>
 80085da:	4603      	mov	r3, r0
 80085dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80085e0:	e015      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085e6:	3328      	adds	r3, #40	@ 0x28
 80085e8:	2102      	movs	r1, #2
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 fd6c 	bl	800a0c8 <RCCEx_PLL3_Config>
 80085f0:	4603      	mov	r3, r0
 80085f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80085f6:	e00a      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80085fe:	e006      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008600:	bf00      	nop
 8008602:	e004      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008604:	bf00      	nop
 8008606:	e002      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008608:	bf00      	nop
 800860a:	e000      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800860c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800860e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008612:	2b00      	cmp	r3, #0
 8008614:	d10b      	bne.n	800862e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008616:	4b39      	ldr	r3, [pc, #228]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800861a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800861e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008622:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008626:	4a35      	ldr	r2, [pc, #212]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008628:	430b      	orrs	r3, r1
 800862a:	6553      	str	r3, [r2, #84]	@ 0x54
 800862c:	e003      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800862e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008632:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800863a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008642:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008646:	2300      	movs	r3, #0
 8008648:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800864c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008650:	460b      	mov	r3, r1
 8008652:	4313      	orrs	r3, r2
 8008654:	d058      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800865a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800865e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008662:	d033      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008664:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008668:	d82c      	bhi.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800866a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800866e:	d02f      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008670:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008674:	d826      	bhi.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008676:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800867a:	d02b      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800867c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008680:	d820      	bhi.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008682:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008686:	d012      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8008688:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800868c:	d81a      	bhi.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800868e:	2b00      	cmp	r3, #0
 8008690:	d022      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008696:	d115      	bne.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800869c:	3308      	adds	r3, #8
 800869e:	2100      	movs	r1, #0
 80086a0:	4618      	mov	r0, r3
 80086a2:	f001 fc5f 	bl	8009f64 <RCCEx_PLL2_Config>
 80086a6:	4603      	mov	r3, r0
 80086a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80086ac:	e015      	b.n	80086da <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086b2:	3328      	adds	r3, #40	@ 0x28
 80086b4:	2102      	movs	r1, #2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f001 fd06 	bl	800a0c8 <RCCEx_PLL3_Config>
 80086bc:	4603      	mov	r3, r0
 80086be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80086c2:	e00a      	b.n	80086da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80086ca:	e006      	b.n	80086da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80086cc:	bf00      	nop
 80086ce:	e004      	b.n	80086da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80086d0:	bf00      	nop
 80086d2:	e002      	b.n	80086da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80086d4:	bf00      	nop
 80086d6:	e000      	b.n	80086da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80086d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10e      	bne.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80086e2:	4b06      	ldr	r3, [pc, #24]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80086e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086e6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80086ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80086f2:	4a02      	ldr	r2, [pc, #8]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80086f4:	430b      	orrs	r3, r1
 80086f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80086f8:	e006      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80086fa:	bf00      	nop
 80086fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008700:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008704:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800870c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008710:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008714:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008718:	2300      	movs	r3, #0
 800871a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800871e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008722:	460b      	mov	r3, r1
 8008724:	4313      	orrs	r3, r2
 8008726:	d055      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800872c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008730:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008734:	d033      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8008736:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800873a:	d82c      	bhi.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800873c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008740:	d02f      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008742:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008746:	d826      	bhi.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008748:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800874c:	d02b      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800874e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008752:	d820      	bhi.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008754:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008758:	d012      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800875a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800875e:	d81a      	bhi.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008760:	2b00      	cmp	r3, #0
 8008762:	d022      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008764:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008768:	d115      	bne.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800876a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800876e:	3308      	adds	r3, #8
 8008770:	2100      	movs	r1, #0
 8008772:	4618      	mov	r0, r3
 8008774:	f001 fbf6 	bl	8009f64 <RCCEx_PLL2_Config>
 8008778:	4603      	mov	r3, r0
 800877a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800877e:	e015      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008784:	3328      	adds	r3, #40	@ 0x28
 8008786:	2102      	movs	r1, #2
 8008788:	4618      	mov	r0, r3
 800878a:	f001 fc9d 	bl	800a0c8 <RCCEx_PLL3_Config>
 800878e:	4603      	mov	r3, r0
 8008790:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008794:	e00a      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800879c:	e006      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800879e:	bf00      	nop
 80087a0:	e004      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80087a2:	bf00      	nop
 80087a4:	e002      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80087a6:	bf00      	nop
 80087a8:	e000      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80087aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10b      	bne.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80087b4:	4ba0      	ldr	r3, [pc, #640]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80087b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087b8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80087bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087c4:	4a9c      	ldr	r2, [pc, #624]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80087c6:	430b      	orrs	r3, r1
 80087c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80087ca:	e003      	b.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80087d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087dc:	f002 0308 	and.w	r3, r2, #8
 80087e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80087e4:	2300      	movs	r3, #0
 80087e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80087ea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80087ee:	460b      	mov	r3, r1
 80087f0:	4313      	orrs	r3, r2
 80087f2:	d01e      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80087f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008800:	d10c      	bne.n	800881c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008806:	3328      	adds	r3, #40	@ 0x28
 8008808:	2102      	movs	r1, #2
 800880a:	4618      	mov	r0, r3
 800880c:	f001 fc5c 	bl	800a0c8 <RCCEx_PLL3_Config>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d002      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800881c:	4b86      	ldr	r3, [pc, #536]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800881e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008820:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008828:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800882c:	4a82      	ldr	r2, [pc, #520]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800882e:	430b      	orrs	r3, r1
 8008830:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883a:	f002 0310 	and.w	r3, r2, #16
 800883e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008842:	2300      	movs	r3, #0
 8008844:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008848:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800884c:	460b      	mov	r3, r1
 800884e:	4313      	orrs	r3, r2
 8008850:	d01e      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800885a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800885e:	d10c      	bne.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008864:	3328      	adds	r3, #40	@ 0x28
 8008866:	2102      	movs	r1, #2
 8008868:	4618      	mov	r0, r3
 800886a:	f001 fc2d 	bl	800a0c8 <RCCEx_PLL3_Config>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d002      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800887a:	4b6f      	ldr	r3, [pc, #444]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800887c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800887e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800888a:	4a6b      	ldr	r2, [pc, #428]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800888c:	430b      	orrs	r3, r1
 800888e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008898:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800889c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800889e:	2300      	movs	r3, #0
 80088a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80088a2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80088a6:	460b      	mov	r3, r1
 80088a8:	4313      	orrs	r3, r2
 80088aa:	d03e      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80088ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80088b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088b8:	d022      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80088ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088be:	d81b      	bhi.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d003      	beq.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80088c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088c8:	d00b      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80088ca:	e015      	b.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088d0:	3308      	adds	r3, #8
 80088d2:	2100      	movs	r1, #0
 80088d4:	4618      	mov	r0, r3
 80088d6:	f001 fb45 	bl	8009f64 <RCCEx_PLL2_Config>
 80088da:	4603      	mov	r3, r0
 80088dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80088e0:	e00f      	b.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088e6:	3328      	adds	r3, #40	@ 0x28
 80088e8:	2102      	movs	r1, #2
 80088ea:	4618      	mov	r0, r3
 80088ec:	f001 fbec 	bl	800a0c8 <RCCEx_PLL3_Config>
 80088f0:	4603      	mov	r3, r0
 80088f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80088f6:	e004      	b.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80088fe:	e000      	b.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008902:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10b      	bne.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800890a:	4b4b      	ldr	r3, [pc, #300]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800890c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800890e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008916:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800891a:	4a47      	ldr	r2, [pc, #284]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800891c:	430b      	orrs	r3, r1
 800891e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008920:	e003      	b.n	800892a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008922:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008926:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800892a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800892e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008932:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008936:	673b      	str	r3, [r7, #112]	@ 0x70
 8008938:	2300      	movs	r3, #0
 800893a:	677b      	str	r3, [r7, #116]	@ 0x74
 800893c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008940:	460b      	mov	r3, r1
 8008942:	4313      	orrs	r3, r2
 8008944:	d03b      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800894a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800894e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008952:	d01f      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008954:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008958:	d818      	bhi.n	800898c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800895a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800895e:	d003      	beq.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008960:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008964:	d007      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8008966:	e011      	b.n	800898c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008968:	4b33      	ldr	r3, [pc, #204]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800896a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896c:	4a32      	ldr	r2, [pc, #200]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800896e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008974:	e00f      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800897a:	3328      	adds	r3, #40	@ 0x28
 800897c:	2101      	movs	r1, #1
 800897e:	4618      	mov	r0, r3
 8008980:	f001 fba2 	bl	800a0c8 <RCCEx_PLL3_Config>
 8008984:	4603      	mov	r3, r0
 8008986:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800898a:	e004      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008992:	e000      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008996:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10b      	bne.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800899e:	4b26      	ldr	r3, [pc, #152]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80089a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80089a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089ae:	4a22      	ldr	r2, [pc, #136]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80089b0:	430b      	orrs	r3, r1
 80089b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80089b4:	e003      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80089be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80089ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80089cc:	2300      	movs	r3, #0
 80089ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80089d0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80089d4:	460b      	mov	r3, r1
 80089d6:	4313      	orrs	r3, r2
 80089d8:	d034      	beq.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80089da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d003      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80089e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089e8:	d007      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80089ea:	e011      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089ec:	4b12      	ldr	r3, [pc, #72]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80089ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f0:	4a11      	ldr	r2, [pc, #68]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80089f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80089f8:	e00e      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80089fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089fe:	3308      	adds	r3, #8
 8008a00:	2102      	movs	r1, #2
 8008a02:	4618      	mov	r0, r3
 8008a04:	f001 faae 	bl	8009f64 <RCCEx_PLL2_Config>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008a0e:	e003      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10d      	bne.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008a20:	4b05      	ldr	r3, [pc, #20]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a24:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a2e:	4a02      	ldr	r2, [pc, #8]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008a30:	430b      	orrs	r3, r1
 8008a32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008a34:	e006      	b.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008a36:	bf00      	nop
 8008a38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008a50:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a52:	2300      	movs	r3, #0
 8008a54:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a56:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	d00c      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a64:	3328      	adds	r3, #40	@ 0x28
 8008a66:	2102      	movs	r1, #2
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f001 fb2d 	bl	800a0c8 <RCCEx_PLL3_Config>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d002      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a82:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008a86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a88:	2300      	movs	r3, #0
 8008a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a8c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008a90:	460b      	mov	r3, r1
 8008a92:	4313      	orrs	r3, r2
 8008a94:	d036      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008aa0:	d018      	beq.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008aa2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008aa6:	d811      	bhi.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008aac:	d014      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ab2:	d80b      	bhi.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d011      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008ab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008abc:	d106      	bne.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008abe:	4bb7      	ldr	r3, [pc, #732]	@ (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac2:	4ab6      	ldr	r2, [pc, #728]	@ (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008aca:	e008      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ad2:	e004      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008ad4:	bf00      	nop
 8008ad6:	e002      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008ad8:	bf00      	nop
 8008ada:	e000      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ade:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10a      	bne.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008ae6:	4bad      	ldr	r3, [pc, #692]	@ (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008af2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008af4:	4aa9      	ldr	r2, [pc, #676]	@ (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008af6:	430b      	orrs	r3, r1
 8008af8:	6553      	str	r3, [r2, #84]	@ 0x54
 8008afa:	e003      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008afc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008b10:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b12:	2300      	movs	r3, #0
 8008b14:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b16:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	d009      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b20:	4b9e      	ldr	r3, [pc, #632]	@ (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b24:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b2e:	4a9b      	ldr	r2, [pc, #620]	@ (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b30:	430b      	orrs	r3, r1
 8008b32:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008b40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b42:	2300      	movs	r3, #0
 8008b44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b46:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	d009      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b50:	4b92      	ldr	r3, [pc, #584]	@ (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b54:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b5e:	4a8f      	ldr	r2, [pc, #572]	@ (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b60:	430b      	orrs	r3, r1
 8008b62:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008b70:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b72:	2300      	movs	r3, #0
 8008b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b76:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	d00e      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008b80:	4b86      	ldr	r3, [pc, #536]	@ (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	4a85      	ldr	r2, [pc, #532]	@ (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b86:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008b8a:	6113      	str	r3, [r2, #16]
 8008b8c:	4b83      	ldr	r3, [pc, #524]	@ (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b8e:	6919      	ldr	r1, [r3, #16]
 8008b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008b98:	4a80      	ldr	r2, [pc, #512]	@ (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b9a:	430b      	orrs	r3, r1
 8008b9c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008baa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008bac:	2300      	movs	r3, #0
 8008bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bb0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	d009      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008bba:	4b78      	ldr	r3, [pc, #480]	@ (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bbe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bc8:	4a74      	ldr	r2, [pc, #464]	@ (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008bca:	430b      	orrs	r3, r1
 8008bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008bda:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bdc:	2300      	movs	r3, #0
 8008bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8008be0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008be4:	460b      	mov	r3, r1
 8008be6:	4313      	orrs	r3, r2
 8008be8:	d00a      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008bea:	4b6c      	ldr	r3, [pc, #432]	@ (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bee:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bfa:	4a68      	ldr	r2, [pc, #416]	@ (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008bfc:	430b      	orrs	r3, r1
 8008bfe:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c08:	2100      	movs	r1, #0
 8008c0a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008c0c:	f003 0301 	and.w	r3, r3, #1
 8008c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c12:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008c16:	460b      	mov	r3, r1
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	d011      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c20:	3308      	adds	r3, #8
 8008c22:	2100      	movs	r1, #0
 8008c24:	4618      	mov	r0, r3
 8008c26:	f001 f99d 	bl	8009f64 <RCCEx_PLL2_Config>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008c30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d003      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c48:	2100      	movs	r1, #0
 8008c4a:	6239      	str	r1, [r7, #32]
 8008c4c:	f003 0302 	and.w	r3, r3, #2
 8008c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c52:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008c56:	460b      	mov	r3, r1
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	d011      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c60:	3308      	adds	r3, #8
 8008c62:	2101      	movs	r1, #1
 8008c64:	4618      	mov	r0, r3
 8008c66:	f001 f97d 	bl	8009f64 <RCCEx_PLL2_Config>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008c70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d003      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	2100      	movs	r1, #0
 8008c8a:	61b9      	str	r1, [r7, #24]
 8008c8c:	f003 0304 	and.w	r3, r3, #4
 8008c90:	61fb      	str	r3, [r7, #28]
 8008c92:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008c96:	460b      	mov	r3, r1
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	d011      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ca0:	3308      	adds	r3, #8
 8008ca2:	2102      	movs	r1, #2
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f001 f95d 	bl	8009f64 <RCCEx_PLL2_Config>
 8008caa:	4603      	mov	r3, r0
 8008cac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008cb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d003      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc8:	2100      	movs	r1, #0
 8008cca:	6139      	str	r1, [r7, #16]
 8008ccc:	f003 0308 	and.w	r3, r3, #8
 8008cd0:	617b      	str	r3, [r7, #20]
 8008cd2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	d011      	beq.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ce0:	3328      	adds	r3, #40	@ 0x28
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f001 f9ef 	bl	800a0c8 <RCCEx_PLL3_Config>
 8008cea:	4603      	mov	r3, r0
 8008cec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008cf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d003      	beq.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cfc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d08:	2100      	movs	r1, #0
 8008d0a:	60b9      	str	r1, [r7, #8]
 8008d0c:	f003 0310 	and.w	r3, r3, #16
 8008d10:	60fb      	str	r3, [r7, #12]
 8008d12:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008d16:	460b      	mov	r3, r1
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	d011      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d20:	3328      	adds	r3, #40	@ 0x28
 8008d22:	2101      	movs	r1, #1
 8008d24:	4618      	mov	r0, r3
 8008d26:	f001 f9cf 	bl	800a0c8 <RCCEx_PLL3_Config>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008d30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d003      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d48:	2100      	movs	r1, #0
 8008d4a:	6039      	str	r1, [r7, #0]
 8008d4c:	f003 0320 	and.w	r3, r3, #32
 8008d50:	607b      	str	r3, [r7, #4]
 8008d52:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008d56:	460b      	mov	r3, r1
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	d011      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d60:	3328      	adds	r3, #40	@ 0x28
 8008d62:	2102      	movs	r1, #2
 8008d64:	4618      	mov	r0, r3
 8008d66:	f001 f9af 	bl	800a0c8 <RCCEx_PLL3_Config>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008d70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d003      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008d80:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	e000      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008d94:	46bd      	mov	sp, r7
 8008d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d9a:	bf00      	nop
 8008d9c:	58024400 	.word	0x58024400

08008da0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b090      	sub	sp, #64	@ 0x40
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008daa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dae:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008db2:	430b      	orrs	r3, r1
 8008db4:	f040 8094 	bne.w	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008db8:	4b9b      	ldr	r3, [pc, #620]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dbc:	f003 0307 	and.w	r3, r3, #7
 8008dc0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc4:	2b04      	cmp	r3, #4
 8008dc6:	f200 8087 	bhi.w	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008dca:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd0:	08008de5 	.word	0x08008de5
 8008dd4:	08008e0d 	.word	0x08008e0d
 8008dd8:	08008e35 	.word	0x08008e35
 8008ddc:	08008ed1 	.word	0x08008ed1
 8008de0:	08008e5d 	.word	0x08008e5d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008de4:	4b90      	ldr	r3, [pc, #576]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008df0:	d108      	bne.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008df2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 ff62 	bl	8009cc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e00:	f000 bc93 	b.w	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e04:	2300      	movs	r3, #0
 8008e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e08:	f000 bc8f 	b.w	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e0c:	4b86      	ldr	r3, [pc, #536]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e18:	d108      	bne.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e1a:	f107 0318 	add.w	r3, r7, #24
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 fca6 	bl	8009770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e28:	f000 bc7f 	b.w	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e30:	f000 bc7b 	b.w	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e34:	4b7c      	ldr	r3, [pc, #496]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e40:	d108      	bne.n	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e42:	f107 030c 	add.w	r3, r7, #12
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 fde6 	bl	8009a18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e50:	f000 bc6b 	b.w	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e54:	2300      	movs	r3, #0
 8008e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e58:	f000 bc67 	b.w	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e5c:	4b72      	ldr	r3, [pc, #456]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008e64:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e66:	4b70      	ldr	r3, [pc, #448]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0304 	and.w	r3, r3, #4
 8008e6e:	2b04      	cmp	r3, #4
 8008e70:	d10c      	bne.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d109      	bne.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e78:	4b6b      	ldr	r3, [pc, #428]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	08db      	lsrs	r3, r3, #3
 8008e7e:	f003 0303 	and.w	r3, r3, #3
 8008e82:	4a6a      	ldr	r2, [pc, #424]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008e84:	fa22 f303 	lsr.w	r3, r2, r3
 8008e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e8a:	e01f      	b.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e8c:	4b66      	ldr	r3, [pc, #408]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e98:	d106      	bne.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ea0:	d102      	bne.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ea2:	4b63      	ldr	r3, [pc, #396]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ea6:	e011      	b.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ea8:	4b5f      	ldr	r3, [pc, #380]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008eb4:	d106      	bne.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ebc:	d102      	bne.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ebe:	4b5d      	ldr	r3, [pc, #372]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ec2:	e003      	b.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008ec8:	f000 bc2f 	b.w	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ecc:	f000 bc2d 	b.w	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ed0:	4b59      	ldr	r3, [pc, #356]	@ (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ed4:	f000 bc29 	b.w	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008edc:	f000 bc25 	b.w	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ee4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008ee8:	430b      	orrs	r3, r1
 8008eea:	f040 80a7 	bne.w	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008eee:	4b4e      	ldr	r3, [pc, #312]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ef2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008ef6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008efe:	d054      	beq.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f06:	f200 808b 	bhi.w	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f0c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008f10:	f000 8083 	beq.w	800901a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f16:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008f1a:	f200 8081 	bhi.w	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f24:	d02f      	beq.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f2c:	d878      	bhi.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d004      	beq.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8008f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f3a:	d012      	beq.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008f3c:	e070      	b.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f4a:	d107      	bne.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 feb5 	bl	8009cc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f5a:	e3e6      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f60:	e3e3      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f62:	4b31      	ldr	r3, [pc, #196]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f6e:	d107      	bne.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f70:	f107 0318 	add.w	r3, r7, #24
 8008f74:	4618      	mov	r0, r3
 8008f76:	f000 fbfb 	bl	8009770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f7e:	e3d4      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f80:	2300      	movs	r3, #0
 8008f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f84:	e3d1      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f86:	4b28      	ldr	r3, [pc, #160]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f92:	d107      	bne.n	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f94:	f107 030c 	add.w	r3, r7, #12
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f000 fd3d 	bl	8009a18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fa2:	e3c2      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fa8:	e3bf      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008faa:	4b1f      	ldr	r3, [pc, #124]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008fb2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 0304 	and.w	r3, r3, #4
 8008fbc:	2b04      	cmp	r3, #4
 8008fbe:	d10c      	bne.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d109      	bne.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fc6:	4b18      	ldr	r3, [pc, #96]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	08db      	lsrs	r3, r3, #3
 8008fcc:	f003 0303 	and.w	r3, r3, #3
 8008fd0:	4a16      	ldr	r2, [pc, #88]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fd8:	e01e      	b.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fda:	4b13      	ldr	r3, [pc, #76]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fe6:	d106      	bne.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fee:	d102      	bne.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ff4:	e010      	b.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ffe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009002:	d106      	bne.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009006:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800900a:	d102      	bne.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800900c:	4b09      	ldr	r3, [pc, #36]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800900e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009010:	e002      	b.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009016:	e388      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009018:	e387      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800901a:	4b07      	ldr	r3, [pc, #28]	@ (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800901c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800901e:	e384      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009020:	2300      	movs	r3, #0
 8009022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009024:	e381      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009026:	bf00      	nop
 8009028:	58024400 	.word	0x58024400
 800902c:	03d09000 	.word	0x03d09000
 8009030:	003d0900 	.word	0x003d0900
 8009034:	017d7840 	.word	0x017d7840
 8009038:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800903c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009040:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009044:	430b      	orrs	r3, r1
 8009046:	f040 809c 	bne.w	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800904a:	4b9e      	ldr	r3, [pc, #632]	@ (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800904c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800904e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009052:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009056:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800905a:	d054      	beq.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800905c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009062:	f200 808b 	bhi.w	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009068:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800906c:	f000 8083 	beq.w	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8009070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009072:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009076:	f200 8081 	bhi.w	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800907a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009080:	d02f      	beq.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8009082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009084:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009088:	d878      	bhi.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800908a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908c:	2b00      	cmp	r3, #0
 800908e:	d004      	beq.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009092:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009096:	d012      	beq.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009098:	e070      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800909a:	4b8a      	ldr	r3, [pc, #552]	@ (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090a6:	d107      	bne.n	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 fe07 	bl	8009cc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090b6:	e338      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090b8:	2300      	movs	r3, #0
 80090ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090bc:	e335      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090be:	4b81      	ldr	r3, [pc, #516]	@ (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090ca:	d107      	bne.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090cc:	f107 0318 	add.w	r3, r7, #24
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 fb4d 	bl	8009770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090da:	e326      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090dc:	2300      	movs	r3, #0
 80090de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090e0:	e323      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090e2:	4b78      	ldr	r3, [pc, #480]	@ (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090ee:	d107      	bne.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090f0:	f107 030c 	add.w	r3, r7, #12
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 fc8f 	bl	8009a18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090fe:	e314      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009104:	e311      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009106:	4b6f      	ldr	r3, [pc, #444]	@ (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800910a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800910e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009110:	4b6c      	ldr	r3, [pc, #432]	@ (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0304 	and.w	r3, r3, #4
 8009118:	2b04      	cmp	r3, #4
 800911a:	d10c      	bne.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800911c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800911e:	2b00      	cmp	r3, #0
 8009120:	d109      	bne.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009122:	4b68      	ldr	r3, [pc, #416]	@ (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	08db      	lsrs	r3, r3, #3
 8009128:	f003 0303 	and.w	r3, r3, #3
 800912c:	4a66      	ldr	r2, [pc, #408]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800912e:	fa22 f303 	lsr.w	r3, r2, r3
 8009132:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009134:	e01e      	b.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009136:	4b63      	ldr	r3, [pc, #396]	@ (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800913e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009142:	d106      	bne.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009146:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800914a:	d102      	bne.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800914c:	4b5f      	ldr	r3, [pc, #380]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800914e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009150:	e010      	b.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009152:	4b5c      	ldr	r3, [pc, #368]	@ (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800915a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800915e:	d106      	bne.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8009160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009162:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009166:	d102      	bne.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009168:	4b59      	ldr	r3, [pc, #356]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800916a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800916c:	e002      	b.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800916e:	2300      	movs	r3, #0
 8009170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009172:	e2da      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009174:	e2d9      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009176:	4b57      	ldr	r3, [pc, #348]	@ (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800917a:	e2d6      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800917c:	2300      	movs	r3, #0
 800917e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009180:	e2d3      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009182:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009186:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800918a:	430b      	orrs	r3, r1
 800918c:	f040 80a7 	bne.w	80092de <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009190:	4b4c      	ldr	r3, [pc, #304]	@ (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009194:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009198:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800919a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80091a0:	d055      	beq.n	800924e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80091a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80091a8:	f200 8096 	bhi.w	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80091ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80091b2:	f000 8084 	beq.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80091b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80091bc:	f200 808c 	bhi.w	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80091c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091c6:	d030      	beq.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80091c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091ce:	f200 8083 	bhi.w	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80091d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d004      	beq.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80091d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091de:	d012      	beq.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80091e0:	e07a      	b.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091e2:	4b38      	ldr	r3, [pc, #224]	@ (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091ee:	d107      	bne.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091f4:	4618      	mov	r0, r3
 80091f6:	f000 fd63 	bl	8009cc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091fe:	e294      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009200:	2300      	movs	r3, #0
 8009202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009204:	e291      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009206:	4b2f      	ldr	r3, [pc, #188]	@ (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800920e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009212:	d107      	bne.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009214:	f107 0318 	add.w	r3, r7, #24
 8009218:	4618      	mov	r0, r3
 800921a:	f000 faa9 	bl	8009770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009222:	e282      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009224:	2300      	movs	r3, #0
 8009226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009228:	e27f      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800922a:	4b26      	ldr	r3, [pc, #152]	@ (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009232:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009236:	d107      	bne.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009238:	f107 030c 	add.w	r3, r7, #12
 800923c:	4618      	mov	r0, r3
 800923e:	f000 fbeb 	bl	8009a18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009246:	e270      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009248:	2300      	movs	r3, #0
 800924a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800924c:	e26d      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800924e:	4b1d      	ldr	r3, [pc, #116]	@ (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009252:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009256:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009258:	4b1a      	ldr	r3, [pc, #104]	@ (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 0304 	and.w	r3, r3, #4
 8009260:	2b04      	cmp	r3, #4
 8009262:	d10c      	bne.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8009264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009266:	2b00      	cmp	r3, #0
 8009268:	d109      	bne.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800926a:	4b16      	ldr	r3, [pc, #88]	@ (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	08db      	lsrs	r3, r3, #3
 8009270:	f003 0303 	and.w	r3, r3, #3
 8009274:	4a14      	ldr	r2, [pc, #80]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009276:	fa22 f303 	lsr.w	r3, r2, r3
 800927a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800927c:	e01e      	b.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800927e:	4b11      	ldr	r3, [pc, #68]	@ (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800928a:	d106      	bne.n	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800928c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800928e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009292:	d102      	bne.n	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009294:	4b0d      	ldr	r3, [pc, #52]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009296:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009298:	e010      	b.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800929a:	4b0a      	ldr	r3, [pc, #40]	@ (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092a6:	d106      	bne.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80092a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092ae:	d102      	bne.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80092b0:	4b07      	ldr	r3, [pc, #28]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092b4:	e002      	b.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80092b6:	2300      	movs	r3, #0
 80092b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80092ba:	e236      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80092bc:	e235      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80092be:	4b05      	ldr	r3, [pc, #20]	@ (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80092c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092c2:	e232      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80092c4:	58024400 	.word	0x58024400
 80092c8:	03d09000 	.word	0x03d09000
 80092cc:	003d0900 	.word	0x003d0900
 80092d0:	017d7840 	.word	0x017d7840
 80092d4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092dc:	e225      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80092de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092e2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80092e6:	430b      	orrs	r3, r1
 80092e8:	f040 8085 	bne.w	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80092ec:	4b9c      	ldr	r3, [pc, #624]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80092ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092f0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80092f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80092f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80092fc:	d06b      	beq.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80092fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009304:	d874      	bhi.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009308:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800930c:	d056      	beq.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800930e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009310:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009314:	d86c      	bhi.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009318:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800931c:	d03b      	beq.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800931e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009320:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009324:	d864      	bhi.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009328:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800932c:	d021      	beq.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800932e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009330:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009334:	d85c      	bhi.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009338:	2b00      	cmp	r3, #0
 800933a:	d004      	beq.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800933c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800933e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009342:	d004      	beq.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8009344:	e054      	b.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009346:	f7fe fb5f 	bl	8007a08 <HAL_RCC_GetPCLK1Freq>
 800934a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800934c:	e1ed      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800934e:	4b84      	ldr	r3, [pc, #528]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009356:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800935a:	d107      	bne.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800935c:	f107 0318 	add.w	r3, r7, #24
 8009360:	4618      	mov	r0, r3
 8009362:	f000 fa05 	bl	8009770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800936a:	e1de      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800936c:	2300      	movs	r3, #0
 800936e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009370:	e1db      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009372:	4b7b      	ldr	r3, [pc, #492]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800937a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800937e:	d107      	bne.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009380:	f107 030c 	add.w	r3, r7, #12
 8009384:	4618      	mov	r0, r3
 8009386:	f000 fb47 	bl	8009a18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800938e:	e1cc      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009390:	2300      	movs	r3, #0
 8009392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009394:	e1c9      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009396:	4b72      	ldr	r3, [pc, #456]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 0304 	and.w	r3, r3, #4
 800939e:	2b04      	cmp	r3, #4
 80093a0:	d109      	bne.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093a2:	4b6f      	ldr	r3, [pc, #444]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	08db      	lsrs	r3, r3, #3
 80093a8:	f003 0303 	and.w	r3, r3, #3
 80093ac:	4a6d      	ldr	r2, [pc, #436]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80093ae:	fa22 f303 	lsr.w	r3, r2, r3
 80093b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093b4:	e1b9      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093b6:	2300      	movs	r3, #0
 80093b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ba:	e1b6      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80093bc:	4b68      	ldr	r3, [pc, #416]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093c8:	d102      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80093ca:	4b67      	ldr	r3, [pc, #412]	@ (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80093cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093ce:	e1ac      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093d0:	2300      	movs	r3, #0
 80093d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093d4:	e1a9      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80093d6:	4b62      	ldr	r3, [pc, #392]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093e2:	d102      	bne.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80093e4:	4b61      	ldr	r3, [pc, #388]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80093e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093e8:	e19f      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093ea:	2300      	movs	r3, #0
 80093ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ee:	e19c      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80093f0:	2300      	movs	r3, #0
 80093f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093f4:	e199      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80093f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093fa:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80093fe:	430b      	orrs	r3, r1
 8009400:	d173      	bne.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009402:	4b57      	ldr	r3, [pc, #348]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009406:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800940a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800940c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009412:	d02f      	beq.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8009414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009416:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800941a:	d863      	bhi.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800941c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941e:	2b00      	cmp	r3, #0
 8009420:	d004      	beq.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8009422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009428:	d012      	beq.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800942a:	e05b      	b.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800942c:	4b4c      	ldr	r3, [pc, #304]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009434:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009438:	d107      	bne.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800943a:	f107 0318 	add.w	r3, r7, #24
 800943e:	4618      	mov	r0, r3
 8009440:	f000 f996 	bl	8009770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009448:	e16f      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800944e:	e16c      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009450:	4b43      	ldr	r3, [pc, #268]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009458:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800945c:	d107      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800945e:	f107 030c 	add.w	r3, r7, #12
 8009462:	4618      	mov	r0, r3
 8009464:	f000 fad8 	bl	8009a18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800946c:	e15d      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009472:	e15a      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009474:	4b3a      	ldr	r3, [pc, #232]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009478:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800947c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800947e:	4b38      	ldr	r3, [pc, #224]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 0304 	and.w	r3, r3, #4
 8009486:	2b04      	cmp	r3, #4
 8009488:	d10c      	bne.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800948a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800948c:	2b00      	cmp	r3, #0
 800948e:	d109      	bne.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009490:	4b33      	ldr	r3, [pc, #204]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	08db      	lsrs	r3, r3, #3
 8009496:	f003 0303 	and.w	r3, r3, #3
 800949a:	4a32      	ldr	r2, [pc, #200]	@ (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800949c:	fa22 f303 	lsr.w	r3, r2, r3
 80094a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094a2:	e01e      	b.n	80094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094a4:	4b2e      	ldr	r3, [pc, #184]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094b0:	d106      	bne.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80094b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094b8:	d102      	bne.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80094ba:	4b2b      	ldr	r3, [pc, #172]	@ (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80094bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094be:	e010      	b.n	80094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094c0:	4b27      	ldr	r3, [pc, #156]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094cc:	d106      	bne.n	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80094ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094d4:	d102      	bne.n	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80094d6:	4b25      	ldr	r3, [pc, #148]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80094d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094da:	e002      	b.n	80094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80094dc:	2300      	movs	r3, #0
 80094de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80094e0:	e123      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80094e2:	e122      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80094e4:	2300      	movs	r3, #0
 80094e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094e8:	e11f      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80094ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094ee:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80094f2:	430b      	orrs	r3, r1
 80094f4:	d13c      	bne.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80094f6:	4b1a      	ldr	r3, [pc, #104]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80094f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094fe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009502:	2b00      	cmp	r3, #0
 8009504:	d004      	beq.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8009506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800950c:	d012      	beq.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800950e:	e023      	b.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009510:	4b13      	ldr	r3, [pc, #76]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009518:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800951c:	d107      	bne.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800951e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009522:	4618      	mov	r0, r3
 8009524:	f000 fbcc 	bl	8009cc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800952c:	e0fd      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800952e:	2300      	movs	r3, #0
 8009530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009532:	e0fa      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009534:	4b0a      	ldr	r3, [pc, #40]	@ (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800953c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009540:	d107      	bne.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009542:	f107 0318 	add.w	r3, r7, #24
 8009546:	4618      	mov	r0, r3
 8009548:	f000 f912 	bl	8009770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800954c:	6a3b      	ldr	r3, [r7, #32]
 800954e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009550:	e0eb      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009552:	2300      	movs	r3, #0
 8009554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009556:	e0e8      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009558:	2300      	movs	r3, #0
 800955a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800955c:	e0e5      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800955e:	bf00      	nop
 8009560:	58024400 	.word	0x58024400
 8009564:	03d09000 	.word	0x03d09000
 8009568:	003d0900 	.word	0x003d0900
 800956c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009574:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009578:	430b      	orrs	r3, r1
 800957a:	f040 8085 	bne.w	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800957e:	4b6d      	ldr	r3, [pc, #436]	@ (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009582:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009586:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800958a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800958e:	d06b      	beq.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8009590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009592:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009596:	d874      	bhi.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800959e:	d056      	beq.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80095a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095a6:	d86c      	bhi.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80095a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80095ae:	d03b      	beq.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80095b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80095b6:	d864      	bhi.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80095b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095be:	d021      	beq.n	8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80095c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095c6:	d85c      	bhi.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80095c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d004      	beq.n	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80095ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095d4:	d004      	beq.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80095d6:	e054      	b.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80095d8:	f000 f8b4 	bl	8009744 <HAL_RCCEx_GetD3PCLK1Freq>
 80095dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095de:	e0a4      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095e0:	4b54      	ldr	r3, [pc, #336]	@ (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095ec:	d107      	bne.n	80095fe <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095ee:	f107 0318 	add.w	r3, r7, #24
 80095f2:	4618      	mov	r0, r3
 80095f4:	f000 f8bc 	bl	8009770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095fc:	e095      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009602:	e092      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009604:	4b4b      	ldr	r3, [pc, #300]	@ (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800960c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009610:	d107      	bne.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009612:	f107 030c 	add.w	r3, r7, #12
 8009616:	4618      	mov	r0, r3
 8009618:	f000 f9fe 	bl	8009a18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009620:	e083      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009622:	2300      	movs	r3, #0
 8009624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009626:	e080      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009628:	4b42      	ldr	r3, [pc, #264]	@ (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 0304 	and.w	r3, r3, #4
 8009630:	2b04      	cmp	r3, #4
 8009632:	d109      	bne.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009634:	4b3f      	ldr	r3, [pc, #252]	@ (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	08db      	lsrs	r3, r3, #3
 800963a:	f003 0303 	and.w	r3, r3, #3
 800963e:	4a3e      	ldr	r2, [pc, #248]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009640:	fa22 f303 	lsr.w	r3, r2, r3
 8009644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009646:	e070      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009648:	2300      	movs	r3, #0
 800964a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800964c:	e06d      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800964e:	4b39      	ldr	r3, [pc, #228]	@ (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009656:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800965a:	d102      	bne.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800965c:	4b37      	ldr	r3, [pc, #220]	@ (800973c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800965e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009660:	e063      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009662:	2300      	movs	r3, #0
 8009664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009666:	e060      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009668:	4b32      	ldr	r3, [pc, #200]	@ (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009670:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009674:	d102      	bne.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8009676:	4b32      	ldr	r3, [pc, #200]	@ (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800967a:	e056      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800967c:	2300      	movs	r3, #0
 800967e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009680:	e053      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009686:	e050      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800968c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009690:	430b      	orrs	r3, r1
 8009692:	d148      	bne.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009694:	4b27      	ldr	r3, [pc, #156]	@ (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009698:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800969c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800969e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096a4:	d02a      	beq.n	80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80096a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096ac:	d838      	bhi.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80096ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d004      	beq.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80096b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096ba:	d00d      	beq.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80096bc:	e030      	b.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80096be:	4b1d      	ldr	r3, [pc, #116]	@ (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096ca:	d102      	bne.n	80096d2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80096cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80096ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096d0:	e02b      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096d6:	e028      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096d8:	4b16      	ldr	r3, [pc, #88]	@ (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80096e4:	d107      	bne.n	80096f6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096ea:	4618      	mov	r0, r3
 80096ec:	f000 fae8 	bl	8009cc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096f4:	e019      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80096f6:	2300      	movs	r3, #0
 80096f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096fa:	e016      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009704:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009708:	d107      	bne.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800970a:	f107 0318 	add.w	r3, r7, #24
 800970e:	4618      	mov	r0, r3
 8009710:	f000 f82e 	bl	8009770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009718:	e007      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800971a:	2300      	movs	r3, #0
 800971c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800971e:	e004      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009720:	2300      	movs	r3, #0
 8009722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009724:	e001      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8009726:	2300      	movs	r3, #0
 8009728:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800972a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800972c:	4618      	mov	r0, r3
 800972e:	3740      	adds	r7, #64	@ 0x40
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	58024400 	.word	0x58024400
 8009738:	03d09000 	.word	0x03d09000
 800973c:	003d0900 	.word	0x003d0900
 8009740:	017d7840 	.word	0x017d7840

08009744 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009748:	f7fe f92e 	bl	80079a8 <HAL_RCC_GetHCLKFreq>
 800974c:	4602      	mov	r2, r0
 800974e:	4b06      	ldr	r3, [pc, #24]	@ (8009768 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	091b      	lsrs	r3, r3, #4
 8009754:	f003 0307 	and.w	r3, r3, #7
 8009758:	4904      	ldr	r1, [pc, #16]	@ (800976c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800975a:	5ccb      	ldrb	r3, [r1, r3]
 800975c:	f003 031f 	and.w	r3, r3, #31
 8009760:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009764:	4618      	mov	r0, r3
 8009766:	bd80      	pop	{r7, pc}
 8009768:	58024400 	.word	0x58024400
 800976c:	0800c560 	.word	0x0800c560

08009770 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009770:	b480      	push	{r7}
 8009772:	b089      	sub	sp, #36	@ 0x24
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009778:	4ba1      	ldr	r3, [pc, #644]	@ (8009a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800977a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800977c:	f003 0303 	and.w	r3, r3, #3
 8009780:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009782:	4b9f      	ldr	r3, [pc, #636]	@ (8009a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009786:	0b1b      	lsrs	r3, r3, #12
 8009788:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800978c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800978e:	4b9c      	ldr	r3, [pc, #624]	@ (8009a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009792:	091b      	lsrs	r3, r3, #4
 8009794:	f003 0301 	and.w	r3, r3, #1
 8009798:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800979a:	4b99      	ldr	r3, [pc, #612]	@ (8009a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800979c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800979e:	08db      	lsrs	r3, r3, #3
 80097a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	fb02 f303 	mul.w	r3, r2, r3
 80097aa:	ee07 3a90 	vmov	s15, r3
 80097ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f000 8111 	beq.w	80099e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	f000 8083 	beq.w	80098cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	f200 80a1 	bhi.w	8009910 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d003      	beq.n	80097dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d056      	beq.n	8009888 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80097da:	e099      	b.n	8009910 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097dc:	4b88      	ldr	r3, [pc, #544]	@ (8009a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 0320 	and.w	r3, r3, #32
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d02d      	beq.n	8009844 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097e8:	4b85      	ldr	r3, [pc, #532]	@ (8009a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	08db      	lsrs	r3, r3, #3
 80097ee:	f003 0303 	and.w	r3, r3, #3
 80097f2:	4a84      	ldr	r2, [pc, #528]	@ (8009a04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80097f4:	fa22 f303 	lsr.w	r3, r2, r3
 80097f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	ee07 3a90 	vmov	s15, r3
 8009800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	ee07 3a90 	vmov	s15, r3
 800980a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800980e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009812:	4b7b      	ldr	r3, [pc, #492]	@ (8009a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800981a:	ee07 3a90 	vmov	s15, r3
 800981e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009822:	ed97 6a03 	vldr	s12, [r7, #12]
 8009826:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009a08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800982a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800982e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800983a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800983e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009842:	e087      	b.n	8009954 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	ee07 3a90 	vmov	s15, r3
 800984a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800984e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009a0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009856:	4b6a      	ldr	r3, [pc, #424]	@ (8009a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800985a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800985e:	ee07 3a90 	vmov	s15, r3
 8009862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009866:	ed97 6a03 	vldr	s12, [r7, #12]
 800986a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009a08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800986e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800987a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800987e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009882:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009886:	e065      	b.n	8009954 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	ee07 3a90 	vmov	s15, r3
 800988e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009892:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009a10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800989a:	4b59      	ldr	r3, [pc, #356]	@ (8009a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800989c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800989e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a2:	ee07 3a90 	vmov	s15, r3
 80098a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009a08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098ca:	e043      	b.n	8009954 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	ee07 3a90 	vmov	s15, r3
 80098d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009a14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80098da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098de:	4b48      	ldr	r3, [pc, #288]	@ (8009a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e6:	ee07 3a90 	vmov	s15, r3
 80098ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80098f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009a08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800990a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800990e:	e021      	b.n	8009954 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	ee07 3a90 	vmov	s15, r3
 8009916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800991a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009a10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800991e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009922:	4b37      	ldr	r3, [pc, #220]	@ (8009a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800992a:	ee07 3a90 	vmov	s15, r3
 800992e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009932:	ed97 6a03 	vldr	s12, [r7, #12]
 8009936:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009a08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800993a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800993e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009942:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800994a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800994e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009952:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009954:	4b2a      	ldr	r3, [pc, #168]	@ (8009a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009958:	0a5b      	lsrs	r3, r3, #9
 800995a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800995e:	ee07 3a90 	vmov	s15, r3
 8009962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009966:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800996a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800996e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800997a:	ee17 2a90 	vmov	r2, s15
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009982:	4b1f      	ldr	r3, [pc, #124]	@ (8009a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009986:	0c1b      	lsrs	r3, r3, #16
 8009988:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800998c:	ee07 3a90 	vmov	s15, r3
 8009990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009994:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009998:	ee37 7a87 	vadd.f32	s14, s15, s14
 800999c:	edd7 6a07 	vldr	s13, [r7, #28]
 80099a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099a8:	ee17 2a90 	vmov	r2, s15
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80099b0:	4b13      	ldr	r3, [pc, #76]	@ (8009a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b4:	0e1b      	lsrs	r3, r3, #24
 80099b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099ba:	ee07 3a90 	vmov	s15, r3
 80099be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80099ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099d6:	ee17 2a90 	vmov	r2, s15
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80099de:	e008      	b.n	80099f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	609a      	str	r2, [r3, #8]
}
 80099f2:	bf00      	nop
 80099f4:	3724      	adds	r7, #36	@ 0x24
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	58024400 	.word	0x58024400
 8009a04:	03d09000 	.word	0x03d09000
 8009a08:	46000000 	.word	0x46000000
 8009a0c:	4c742400 	.word	0x4c742400
 8009a10:	4a742400 	.word	0x4a742400
 8009a14:	4bbebc20 	.word	0x4bbebc20

08009a18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b089      	sub	sp, #36	@ 0x24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a20:	4ba1      	ldr	r3, [pc, #644]	@ (8009ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a24:	f003 0303 	and.w	r3, r3, #3
 8009a28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009a2a:	4b9f      	ldr	r3, [pc, #636]	@ (8009ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a2e:	0d1b      	lsrs	r3, r3, #20
 8009a30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009a36:	4b9c      	ldr	r3, [pc, #624]	@ (8009ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a3a:	0a1b      	lsrs	r3, r3, #8
 8009a3c:	f003 0301 	and.w	r3, r3, #1
 8009a40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009a42:	4b99      	ldr	r3, [pc, #612]	@ (8009ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a46:	08db      	lsrs	r3, r3, #3
 8009a48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a4c:	693a      	ldr	r2, [r7, #16]
 8009a4e:	fb02 f303 	mul.w	r3, r2, r3
 8009a52:	ee07 3a90 	vmov	s15, r3
 8009a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f000 8111 	beq.w	8009c88 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	f000 8083 	beq.w	8009b74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	f200 80a1 	bhi.w	8009bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d003      	beq.n	8009a84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d056      	beq.n	8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009a82:	e099      	b.n	8009bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a84:	4b88      	ldr	r3, [pc, #544]	@ (8009ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 0320 	and.w	r3, r3, #32
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d02d      	beq.n	8009aec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a90:	4b85      	ldr	r3, [pc, #532]	@ (8009ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	08db      	lsrs	r3, r3, #3
 8009a96:	f003 0303 	and.w	r3, r3, #3
 8009a9a:	4a84      	ldr	r2, [pc, #528]	@ (8009cac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	ee07 3a90 	vmov	s15, r3
 8009aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	ee07 3a90 	vmov	s15, r3
 8009ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aba:	4b7b      	ldr	r3, [pc, #492]	@ (8009ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac2:	ee07 3a90 	vmov	s15, r3
 8009ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ace:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009aea:	e087      	b.n	8009bfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	ee07 3a90 	vmov	s15, r3
 8009af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009af6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009afe:	4b6a      	ldr	r3, [pc, #424]	@ (8009ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b06:	ee07 3a90 	vmov	s15, r3
 8009b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b12:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b2e:	e065      	b.n	8009bfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b3a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b42:	4b59      	ldr	r3, [pc, #356]	@ (8009ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b4a:	ee07 3a90 	vmov	s15, r3
 8009b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b56:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b72:	e043      	b.n	8009bfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	ee07 3a90 	vmov	s15, r3
 8009b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b7e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009cbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b86:	4b48      	ldr	r3, [pc, #288]	@ (8009ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b8e:	ee07 3a90 	vmov	s15, r3
 8009b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b9a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bb6:	e021      	b.n	8009bfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bca:	4b37      	ldr	r3, [pc, #220]	@ (8009ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd2:	ee07 3a90 	vmov	s15, r3
 8009bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bde:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bfa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8009ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c00:	0a5b      	lsrs	r3, r3, #9
 8009c02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c06:	ee07 3a90 	vmov	s15, r3
 8009c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c16:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c22:	ee17 2a90 	vmov	r2, s15
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8009ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c2e:	0c1b      	lsrs	r3, r3, #16
 8009c30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c34:	ee07 3a90 	vmov	s15, r3
 8009c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c44:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c50:	ee17 2a90 	vmov	r2, s15
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009c58:	4b13      	ldr	r3, [pc, #76]	@ (8009ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c5c:	0e1b      	lsrs	r3, r3, #24
 8009c5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c62:	ee07 3a90 	vmov	s15, r3
 8009c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c72:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c7e:	ee17 2a90 	vmov	r2, s15
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009c86:	e008      	b.n	8009c9a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	609a      	str	r2, [r3, #8]
}
 8009c9a:	bf00      	nop
 8009c9c:	3724      	adds	r7, #36	@ 0x24
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	58024400 	.word	0x58024400
 8009cac:	03d09000 	.word	0x03d09000
 8009cb0:	46000000 	.word	0x46000000
 8009cb4:	4c742400 	.word	0x4c742400
 8009cb8:	4a742400 	.word	0x4a742400
 8009cbc:	4bbebc20 	.word	0x4bbebc20

08009cc0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b089      	sub	sp, #36	@ 0x24
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009cc8:	4ba0      	ldr	r3, [pc, #640]	@ (8009f4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ccc:	f003 0303 	and.w	r3, r3, #3
 8009cd0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009cd2:	4b9e      	ldr	r3, [pc, #632]	@ (8009f4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cd6:	091b      	lsrs	r3, r3, #4
 8009cd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009cdc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009cde:	4b9b      	ldr	r3, [pc, #620]	@ (8009f4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce2:	f003 0301 	and.w	r3, r3, #1
 8009ce6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009ce8:	4b98      	ldr	r3, [pc, #608]	@ (8009f4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cec:	08db      	lsrs	r3, r3, #3
 8009cee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cf2:	693a      	ldr	r2, [r7, #16]
 8009cf4:	fb02 f303 	mul.w	r3, r2, r3
 8009cf8:	ee07 3a90 	vmov	s15, r3
 8009cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d00:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f000 8111 	beq.w	8009f2e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	f000 8083 	beq.w	8009e1a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	f200 80a1 	bhi.w	8009e5e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d003      	beq.n	8009d2a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d056      	beq.n	8009dd6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009d28:	e099      	b.n	8009e5e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d2a:	4b88      	ldr	r3, [pc, #544]	@ (8009f4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f003 0320 	and.w	r3, r3, #32
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d02d      	beq.n	8009d92 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d36:	4b85      	ldr	r3, [pc, #532]	@ (8009f4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	08db      	lsrs	r3, r3, #3
 8009d3c:	f003 0303 	and.w	r3, r3, #3
 8009d40:	4a83      	ldr	r2, [pc, #524]	@ (8009f50 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009d42:	fa22 f303 	lsr.w	r3, r2, r3
 8009d46:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	ee07 3a90 	vmov	s15, r3
 8009d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	ee07 3a90 	vmov	s15, r3
 8009d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d60:	4b7a      	ldr	r3, [pc, #488]	@ (8009f4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d68:	ee07 3a90 	vmov	s15, r3
 8009d6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d70:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d74:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009f54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d8c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009d90:	e087      	b.n	8009ea2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	ee07 3a90 	vmov	s15, r3
 8009d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d9c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009f58 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009da0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009da4:	4b69      	ldr	r3, [pc, #420]	@ (8009f4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dac:	ee07 3a90 	vmov	s15, r3
 8009db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009db4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009db8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009f54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009dbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dd4:	e065      	b.n	8009ea2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	ee07 3a90 	vmov	s15, r3
 8009ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009de0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009f5c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009de4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009de8:	4b58      	ldr	r3, [pc, #352]	@ (8009f4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009df0:	ee07 3a90 	vmov	s15, r3
 8009df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009df8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dfc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009f54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e18:	e043      	b.n	8009ea2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	ee07 3a90 	vmov	s15, r3
 8009e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e24:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009f60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009e28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e2c:	4b47      	ldr	r3, [pc, #284]	@ (8009f4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e34:	ee07 3a90 	vmov	s15, r3
 8009e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e40:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009f54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e5c:	e021      	b.n	8009ea2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	ee07 3a90 	vmov	s15, r3
 8009e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e68:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009f58 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e70:	4b36      	ldr	r3, [pc, #216]	@ (8009f4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e78:	ee07 3a90 	vmov	s15, r3
 8009e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e80:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e84:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009f54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ea0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8009f4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ea6:	0a5b      	lsrs	r3, r3, #9
 8009ea8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009eac:	ee07 3a90 	vmov	s15, r3
 8009eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009eb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ebc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ec8:	ee17 2a90 	vmov	r2, s15
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8009f4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ed4:	0c1b      	lsrs	r3, r3, #16
 8009ed6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009eda:	ee07 3a90 	vmov	s15, r3
 8009ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ee6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eea:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ef6:	ee17 2a90 	vmov	r2, s15
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009efe:	4b13      	ldr	r3, [pc, #76]	@ (8009f4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f02:	0e1b      	lsrs	r3, r3, #24
 8009f04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f08:	ee07 3a90 	vmov	s15, r3
 8009f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f18:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f24:	ee17 2a90 	vmov	r2, s15
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009f2c:	e008      	b.n	8009f40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	609a      	str	r2, [r3, #8]
}
 8009f40:	bf00      	nop
 8009f42:	3724      	adds	r7, #36	@ 0x24
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	58024400 	.word	0x58024400
 8009f50:	03d09000 	.word	0x03d09000
 8009f54:	46000000 	.word	0x46000000
 8009f58:	4c742400 	.word	0x4c742400
 8009f5c:	4a742400 	.word	0x4a742400
 8009f60:	4bbebc20 	.word	0x4bbebc20

08009f64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f72:	4b53      	ldr	r3, [pc, #332]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 8009f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f76:	f003 0303 	and.w	r3, r3, #3
 8009f7a:	2b03      	cmp	r3, #3
 8009f7c:	d101      	bne.n	8009f82 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e099      	b.n	800a0b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009f82:	4b4f      	ldr	r3, [pc, #316]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a4e      	ldr	r2, [pc, #312]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 8009f88:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009f8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f8e:	f7f7 ff27 	bl	8001de0 <HAL_GetTick>
 8009f92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f94:	e008      	b.n	8009fa8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009f96:	f7f7 ff23 	bl	8001de0 <HAL_GetTick>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	1ad3      	subs	r3, r2, r3
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d901      	bls.n	8009fa8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	e086      	b.n	800a0b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009fa8:	4b45      	ldr	r3, [pc, #276]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1f0      	bne.n	8009f96 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009fb4:	4b42      	ldr	r3, [pc, #264]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 8009fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fb8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	031b      	lsls	r3, r3, #12
 8009fc2:	493f      	ldr	r1, [pc, #252]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	628b      	str	r3, [r1, #40]	@ 0x28
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	025b      	lsls	r3, r3, #9
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	431a      	orrs	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	041b      	lsls	r3, r3, #16
 8009fe6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009fea:	431a      	orrs	r2, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	691b      	ldr	r3, [r3, #16]
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	061b      	lsls	r3, r3, #24
 8009ff4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009ff8:	4931      	ldr	r1, [pc, #196]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009ffe:	4b30      	ldr	r3, [pc, #192]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 800a000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a002:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	492d      	ldr	r1, [pc, #180]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 800a00c:	4313      	orrs	r3, r2
 800a00e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a010:	4b2b      	ldr	r3, [pc, #172]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 800a012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a014:	f023 0220 	bic.w	r2, r3, #32
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	699b      	ldr	r3, [r3, #24]
 800a01c:	4928      	ldr	r1, [pc, #160]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 800a01e:	4313      	orrs	r3, r2
 800a020:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a022:	4b27      	ldr	r3, [pc, #156]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 800a024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a026:	4a26      	ldr	r2, [pc, #152]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 800a028:	f023 0310 	bic.w	r3, r3, #16
 800a02c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a02e:	4b24      	ldr	r3, [pc, #144]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 800a030:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a032:	4b24      	ldr	r3, [pc, #144]	@ (800a0c4 <RCCEx_PLL2_Config+0x160>)
 800a034:	4013      	ands	r3, r2
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	69d2      	ldr	r2, [r2, #28]
 800a03a:	00d2      	lsls	r2, r2, #3
 800a03c:	4920      	ldr	r1, [pc, #128]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 800a03e:	4313      	orrs	r3, r2
 800a040:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a042:	4b1f      	ldr	r3, [pc, #124]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 800a044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a046:	4a1e      	ldr	r2, [pc, #120]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 800a048:	f043 0310 	orr.w	r3, r3, #16
 800a04c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d106      	bne.n	800a062 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a054:	4b1a      	ldr	r3, [pc, #104]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 800a056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a058:	4a19      	ldr	r2, [pc, #100]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 800a05a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a05e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a060:	e00f      	b.n	800a082 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d106      	bne.n	800a076 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a068:	4b15      	ldr	r3, [pc, #84]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 800a06a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a06c:	4a14      	ldr	r2, [pc, #80]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 800a06e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a072:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a074:	e005      	b.n	800a082 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a076:	4b12      	ldr	r3, [pc, #72]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 800a078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a07a:	4a11      	ldr	r2, [pc, #68]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 800a07c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a080:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a082:	4b0f      	ldr	r3, [pc, #60]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a0e      	ldr	r2, [pc, #56]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 800a088:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a08c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a08e:	f7f7 fea7 	bl	8001de0 <HAL_GetTick>
 800a092:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a094:	e008      	b.n	800a0a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a096:	f7f7 fea3 	bl	8001de0 <HAL_GetTick>
 800a09a:	4602      	mov	r2, r0
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d901      	bls.n	800a0a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	e006      	b.n	800a0b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0a8:	4b05      	ldr	r3, [pc, #20]	@ (800a0c0 <RCCEx_PLL2_Config+0x15c>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d0f0      	beq.n	800a096 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	58024400 	.word	0x58024400
 800a0c4:	ffff0007 	.word	0xffff0007

0800a0c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a0d6:	4b53      	ldr	r3, [pc, #332]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a0d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0da:	f003 0303 	and.w	r3, r3, #3
 800a0de:	2b03      	cmp	r3, #3
 800a0e0:	d101      	bne.n	800a0e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e099      	b.n	800a21a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a0e6:	4b4f      	ldr	r3, [pc, #316]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a4e      	ldr	r2, [pc, #312]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a0ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0f2:	f7f7 fe75 	bl	8001de0 <HAL_GetTick>
 800a0f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a0f8:	e008      	b.n	800a10c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a0fa:	f7f7 fe71 	bl	8001de0 <HAL_GetTick>
 800a0fe:	4602      	mov	r2, r0
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	2b02      	cmp	r3, #2
 800a106:	d901      	bls.n	800a10c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e086      	b.n	800a21a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a10c:	4b45      	ldr	r3, [pc, #276]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1f0      	bne.n	800a0fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a118:	4b42      	ldr	r3, [pc, #264]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a11a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a11c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	051b      	lsls	r3, r3, #20
 800a126:	493f      	ldr	r1, [pc, #252]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a128:	4313      	orrs	r3, r2
 800a12a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	3b01      	subs	r3, #1
 800a132:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	025b      	lsls	r3, r3, #9
 800a13e:	b29b      	uxth	r3, r3
 800a140:	431a      	orrs	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	3b01      	subs	r3, #1
 800a148:	041b      	lsls	r3, r3, #16
 800a14a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a14e:	431a      	orrs	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	691b      	ldr	r3, [r3, #16]
 800a154:	3b01      	subs	r3, #1
 800a156:	061b      	lsls	r3, r3, #24
 800a158:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a15c:	4931      	ldr	r1, [pc, #196]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a15e:	4313      	orrs	r3, r2
 800a160:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a162:	4b30      	ldr	r3, [pc, #192]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a166:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	695b      	ldr	r3, [r3, #20]
 800a16e:	492d      	ldr	r1, [pc, #180]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a170:	4313      	orrs	r3, r2
 800a172:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a174:	4b2b      	ldr	r3, [pc, #172]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a178:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	4928      	ldr	r1, [pc, #160]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a182:	4313      	orrs	r3, r2
 800a184:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a186:	4b27      	ldr	r3, [pc, #156]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a18a:	4a26      	ldr	r2, [pc, #152]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a18c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a190:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a192:	4b24      	ldr	r3, [pc, #144]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a194:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a196:	4b24      	ldr	r3, [pc, #144]	@ (800a228 <RCCEx_PLL3_Config+0x160>)
 800a198:	4013      	ands	r3, r2
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	69d2      	ldr	r2, [r2, #28]
 800a19e:	00d2      	lsls	r2, r2, #3
 800a1a0:	4920      	ldr	r1, [pc, #128]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a1a6:	4b1f      	ldr	r3, [pc, #124]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a1a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1aa:	4a1e      	ldr	r2, [pc, #120]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a1ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d106      	bne.n	800a1c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a1b8:	4b1a      	ldr	r3, [pc, #104]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a1ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1bc:	4a19      	ldr	r2, [pc, #100]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a1be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a1c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a1c4:	e00f      	b.n	800a1e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d106      	bne.n	800a1da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a1cc:	4b15      	ldr	r3, [pc, #84]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a1ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1d0:	4a14      	ldr	r2, [pc, #80]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a1d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a1d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a1d8:	e005      	b.n	800a1e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a1da:	4b12      	ldr	r3, [pc, #72]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a1dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1de:	4a11      	ldr	r2, [pc, #68]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a1e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a1e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a1e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a0e      	ldr	r2, [pc, #56]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a1ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1f2:	f7f7 fdf5 	bl	8001de0 <HAL_GetTick>
 800a1f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1f8:	e008      	b.n	800a20c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a1fa:	f7f7 fdf1 	bl	8001de0 <HAL_GetTick>
 800a1fe:	4602      	mov	r2, r0
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	2b02      	cmp	r3, #2
 800a206:	d901      	bls.n	800a20c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a208:	2303      	movs	r3, #3
 800a20a:	e006      	b.n	800a21a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a20c:	4b05      	ldr	r3, [pc, #20]	@ (800a224 <RCCEx_PLL3_Config+0x15c>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a214:	2b00      	cmp	r3, #0
 800a216:	d0f0      	beq.n	800a1fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a218:	7bfb      	ldrb	r3, [r7, #15]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	58024400 	.word	0x58024400
 800a228:	ffff0007 	.word	0xffff0007

0800a22c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d101      	bne.n	800a23e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a23a:	2301      	movs	r3, #1
 800a23c:	e10f      	b.n	800a45e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a87      	ldr	r2, [pc, #540]	@ (800a468 <HAL_SPI_Init+0x23c>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d00f      	beq.n	800a26e <HAL_SPI_Init+0x42>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a86      	ldr	r2, [pc, #536]	@ (800a46c <HAL_SPI_Init+0x240>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d00a      	beq.n	800a26e <HAL_SPI_Init+0x42>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a84      	ldr	r2, [pc, #528]	@ (800a470 <HAL_SPI_Init+0x244>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d005      	beq.n	800a26e <HAL_SPI_Init+0x42>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	2b0f      	cmp	r3, #15
 800a268:	d901      	bls.n	800a26e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e0f7      	b.n	800a45e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f900 	bl	800a474 <SPI_GetPacketSize>
 800a274:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a7b      	ldr	r2, [pc, #492]	@ (800a468 <HAL_SPI_Init+0x23c>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d00c      	beq.n	800a29a <HAL_SPI_Init+0x6e>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a79      	ldr	r2, [pc, #484]	@ (800a46c <HAL_SPI_Init+0x240>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d007      	beq.n	800a29a <HAL_SPI_Init+0x6e>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a78      	ldr	r2, [pc, #480]	@ (800a470 <HAL_SPI_Init+0x244>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d002      	beq.n	800a29a <HAL_SPI_Init+0x6e>
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2b08      	cmp	r3, #8
 800a298:	d811      	bhi.n	800a2be <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a29e:	4a72      	ldr	r2, [pc, #456]	@ (800a468 <HAL_SPI_Init+0x23c>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d009      	beq.n	800a2b8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a70      	ldr	r2, [pc, #448]	@ (800a46c <HAL_SPI_Init+0x240>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d004      	beq.n	800a2b8 <HAL_SPI_Init+0x8c>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a6f      	ldr	r2, [pc, #444]	@ (800a470 <HAL_SPI_Init+0x244>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d104      	bne.n	800a2c2 <HAL_SPI_Init+0x96>
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2b10      	cmp	r3, #16
 800a2bc:	d901      	bls.n	800a2c2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e0cd      	b.n	800a45e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d106      	bne.n	800a2dc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f7f7 fa3e 	bl	8001758 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2202      	movs	r2, #2
 800a2e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f022 0201 	bic.w	r2, r2, #1
 800a2f2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a2fe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a308:	d119      	bne.n	800a33e <HAL_SPI_Init+0x112>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a312:	d103      	bne.n	800a31c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d008      	beq.n	800a32e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a320:	2b00      	cmp	r3, #0
 800a322:	d10c      	bne.n	800a33e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a328:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a32c:	d107      	bne.n	800a33e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a33c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00f      	beq.n	800a36a <HAL_SPI_Init+0x13e>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	2b06      	cmp	r3, #6
 800a350:	d90b      	bls.n	800a36a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	430a      	orrs	r2, r1
 800a366:	601a      	str	r2, [r3, #0]
 800a368:	e007      	b.n	800a37a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a378:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	69da      	ldr	r2, [r3, #28]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a382:	431a      	orrs	r2, r3
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	431a      	orrs	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a38c:	ea42 0103 	orr.w	r1, r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	68da      	ldr	r2, [r3, #12]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	430a      	orrs	r2, r1
 800a39a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3a4:	431a      	orrs	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3aa:	431a      	orrs	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	699b      	ldr	r3, [r3, #24]
 800a3b0:	431a      	orrs	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	431a      	orrs	r2, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	695b      	ldr	r3, [r3, #20]
 800a3bc:	431a      	orrs	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6a1b      	ldr	r3, [r3, #32]
 800a3c2:	431a      	orrs	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	431a      	orrs	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3ce:	431a      	orrs	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	431a      	orrs	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3da:	ea42 0103 	orr.w	r1, r2, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	430a      	orrs	r2, r1
 800a3e8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d113      	bne.n	800a41a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a404:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a418:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f022 0201 	bic.w	r2, r2, #1
 800a428:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00a      	beq.n	800a44c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	430a      	orrs	r2, r1
 800a44a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	40013000 	.word	0x40013000
 800a46c:	40003800 	.word	0x40003800
 800a470:	40003c00 	.word	0x40003c00

0800a474 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a480:	095b      	lsrs	r3, r3, #5
 800a482:	3301      	adds	r3, #1
 800a484:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	68db      	ldr	r3, [r3, #12]
 800a48a:	3301      	adds	r3, #1
 800a48c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	3307      	adds	r3, #7
 800a492:	08db      	lsrs	r3, r3, #3
 800a494:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	fb02 f303 	mul.w	r3, r2, r3
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3714      	adds	r7, #20
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr

0800a4aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b082      	sub	sp, #8
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d101      	bne.n	800a4bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e049      	b.n	800a550 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d106      	bne.n	800a4d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f7f7 f9bb 	bl	800184c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2202      	movs	r2, #2
 800a4da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	4610      	mov	r0, r2
 800a4ea:	f000 fb89 	bl	800ac00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2201      	movs	r2, #1
 800a502:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2201      	movs	r2, #1
 800a50a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2201      	movs	r2, #1
 800a512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2201      	movs	r2, #1
 800a522:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2201      	movs	r2, #1
 800a52a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2201      	movs	r2, #1
 800a532:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2201      	movs	r2, #1
 800a53a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a566:	b2db      	uxtb	r3, r3
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d001      	beq.n	800a570 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	e056      	b.n	800a61e <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2202      	movs	r2, #2
 800a574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a2b      	ldr	r2, [pc, #172]	@ (800a62c <HAL_TIM_Base_Start+0xd4>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d02c      	beq.n	800a5dc <HAL_TIM_Base_Start+0x84>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a58a:	d027      	beq.n	800a5dc <HAL_TIM_Base_Start+0x84>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a27      	ldr	r2, [pc, #156]	@ (800a630 <HAL_TIM_Base_Start+0xd8>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d022      	beq.n	800a5dc <HAL_TIM_Base_Start+0x84>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a26      	ldr	r2, [pc, #152]	@ (800a634 <HAL_TIM_Base_Start+0xdc>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d01d      	beq.n	800a5dc <HAL_TIM_Base_Start+0x84>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a24      	ldr	r2, [pc, #144]	@ (800a638 <HAL_TIM_Base_Start+0xe0>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d018      	beq.n	800a5dc <HAL_TIM_Base_Start+0x84>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a23      	ldr	r2, [pc, #140]	@ (800a63c <HAL_TIM_Base_Start+0xe4>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d013      	beq.n	800a5dc <HAL_TIM_Base_Start+0x84>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a21      	ldr	r2, [pc, #132]	@ (800a640 <HAL_TIM_Base_Start+0xe8>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d00e      	beq.n	800a5dc <HAL_TIM_Base_Start+0x84>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a20      	ldr	r2, [pc, #128]	@ (800a644 <HAL_TIM_Base_Start+0xec>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d009      	beq.n	800a5dc <HAL_TIM_Base_Start+0x84>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a1e      	ldr	r2, [pc, #120]	@ (800a648 <HAL_TIM_Base_Start+0xf0>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d004      	beq.n	800a5dc <HAL_TIM_Base_Start+0x84>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a1d      	ldr	r2, [pc, #116]	@ (800a64c <HAL_TIM_Base_Start+0xf4>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d115      	bne.n	800a608 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	689a      	ldr	r2, [r3, #8]
 800a5e2:	4b1b      	ldr	r3, [pc, #108]	@ (800a650 <HAL_TIM_Base_Start+0xf8>)
 800a5e4:	4013      	ands	r3, r2
 800a5e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2b06      	cmp	r3, #6
 800a5ec:	d015      	beq.n	800a61a <HAL_TIM_Base_Start+0xc2>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5f4:	d011      	beq.n	800a61a <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f042 0201 	orr.w	r2, r2, #1
 800a604:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a606:	e008      	b.n	800a61a <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f042 0201 	orr.w	r2, r2, #1
 800a616:	601a      	str	r2, [r3, #0]
 800a618:	e000      	b.n	800a61c <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a61a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3714      	adds	r7, #20
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop
 800a62c:	40010000 	.word	0x40010000
 800a630:	40000400 	.word	0x40000400
 800a634:	40000800 	.word	0x40000800
 800a638:	40000c00 	.word	0x40000c00
 800a63c:	40010400 	.word	0x40010400
 800a640:	40001800 	.word	0x40001800
 800a644:	40014000 	.word	0x40014000
 800a648:	4000e000 	.word	0x4000e000
 800a64c:	4000e400 	.word	0x4000e400
 800a650:	00010007 	.word	0x00010007

0800a654 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	6a1a      	ldr	r2, [r3, #32]
 800a662:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a666:	4013      	ands	r3, r2
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d10f      	bne.n	800a68c <HAL_TIM_Base_Stop+0x38>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	6a1a      	ldr	r2, [r3, #32]
 800a672:	f240 4344 	movw	r3, #1092	@ 0x444
 800a676:	4013      	ands	r3, r2
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d107      	bne.n	800a68c <HAL_TIM_Base_Stop+0x38>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f022 0201 	bic.w	r2, r2, #1
 800a68a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	370c      	adds	r7, #12
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
	...

0800a6a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d001      	beq.n	800a6bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e05e      	b.n	800a77a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2202      	movs	r2, #2
 800a6c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	68da      	ldr	r2, [r3, #12]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f042 0201 	orr.w	r2, r2, #1
 800a6d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a2b      	ldr	r2, [pc, #172]	@ (800a788 <HAL_TIM_Base_Start_IT+0xe4>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d02c      	beq.n	800a738 <HAL_TIM_Base_Start_IT+0x94>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6e6:	d027      	beq.n	800a738 <HAL_TIM_Base_Start_IT+0x94>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a27      	ldr	r2, [pc, #156]	@ (800a78c <HAL_TIM_Base_Start_IT+0xe8>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d022      	beq.n	800a738 <HAL_TIM_Base_Start_IT+0x94>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a26      	ldr	r2, [pc, #152]	@ (800a790 <HAL_TIM_Base_Start_IT+0xec>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d01d      	beq.n	800a738 <HAL_TIM_Base_Start_IT+0x94>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a24      	ldr	r2, [pc, #144]	@ (800a794 <HAL_TIM_Base_Start_IT+0xf0>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d018      	beq.n	800a738 <HAL_TIM_Base_Start_IT+0x94>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a23      	ldr	r2, [pc, #140]	@ (800a798 <HAL_TIM_Base_Start_IT+0xf4>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d013      	beq.n	800a738 <HAL_TIM_Base_Start_IT+0x94>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a21      	ldr	r2, [pc, #132]	@ (800a79c <HAL_TIM_Base_Start_IT+0xf8>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d00e      	beq.n	800a738 <HAL_TIM_Base_Start_IT+0x94>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a20      	ldr	r2, [pc, #128]	@ (800a7a0 <HAL_TIM_Base_Start_IT+0xfc>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d009      	beq.n	800a738 <HAL_TIM_Base_Start_IT+0x94>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a1e      	ldr	r2, [pc, #120]	@ (800a7a4 <HAL_TIM_Base_Start_IT+0x100>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d004      	beq.n	800a738 <HAL_TIM_Base_Start_IT+0x94>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a1d      	ldr	r2, [pc, #116]	@ (800a7a8 <HAL_TIM_Base_Start_IT+0x104>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d115      	bne.n	800a764 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	689a      	ldr	r2, [r3, #8]
 800a73e:	4b1b      	ldr	r3, [pc, #108]	@ (800a7ac <HAL_TIM_Base_Start_IT+0x108>)
 800a740:	4013      	ands	r3, r2
 800a742:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2b06      	cmp	r3, #6
 800a748:	d015      	beq.n	800a776 <HAL_TIM_Base_Start_IT+0xd2>
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a750:	d011      	beq.n	800a776 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f042 0201 	orr.w	r2, r2, #1
 800a760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a762:	e008      	b.n	800a776 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f042 0201 	orr.w	r2, r2, #1
 800a772:	601a      	str	r2, [r3, #0]
 800a774:	e000      	b.n	800a778 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a776:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3714      	adds	r7, #20
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	40010000 	.word	0x40010000
 800a78c:	40000400 	.word	0x40000400
 800a790:	40000800 	.word	0x40000800
 800a794:	40000c00 	.word	0x40000c00
 800a798:	40010400 	.word	0x40010400
 800a79c:	40001800 	.word	0x40001800
 800a7a0:	40014000 	.word	0x40014000
 800a7a4:	4000e000 	.word	0x4000e000
 800a7a8:	4000e400 	.word	0x4000e400
 800a7ac:	00010007 	.word	0x00010007

0800a7b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	f003 0302 	and.w	r3, r3, #2
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d020      	beq.n	800a814 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f003 0302 	and.w	r3, r3, #2
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d01b      	beq.n	800a814 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f06f 0202 	mvn.w	r2, #2
 800a7e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	699b      	ldr	r3, [r3, #24]
 800a7f2:	f003 0303 	and.w	r3, r3, #3
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d003      	beq.n	800a802 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 f9e2 	bl	800abc4 <HAL_TIM_IC_CaptureCallback>
 800a800:	e005      	b.n	800a80e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 f9d4 	bl	800abb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 f9e5 	bl	800abd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	f003 0304 	and.w	r3, r3, #4
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d020      	beq.n	800a860 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f003 0304 	and.w	r3, r3, #4
 800a824:	2b00      	cmp	r3, #0
 800a826:	d01b      	beq.n	800a860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f06f 0204 	mvn.w	r2, #4
 800a830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2202      	movs	r2, #2
 800a836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	699b      	ldr	r3, [r3, #24]
 800a83e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a842:	2b00      	cmp	r3, #0
 800a844:	d003      	beq.n	800a84e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f9bc 	bl	800abc4 <HAL_TIM_IC_CaptureCallback>
 800a84c:	e005      	b.n	800a85a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 f9ae 	bl	800abb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 f9bf 	bl	800abd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	f003 0308 	and.w	r3, r3, #8
 800a866:	2b00      	cmp	r3, #0
 800a868:	d020      	beq.n	800a8ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f003 0308 	and.w	r3, r3, #8
 800a870:	2b00      	cmp	r3, #0
 800a872:	d01b      	beq.n	800a8ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f06f 0208 	mvn.w	r2, #8
 800a87c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2204      	movs	r2, #4
 800a882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	69db      	ldr	r3, [r3, #28]
 800a88a:	f003 0303 	and.w	r3, r3, #3
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d003      	beq.n	800a89a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 f996 	bl	800abc4 <HAL_TIM_IC_CaptureCallback>
 800a898:	e005      	b.n	800a8a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f988 	bl	800abb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 f999 	bl	800abd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	f003 0310 	and.w	r3, r3, #16
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d020      	beq.n	800a8f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f003 0310 	and.w	r3, r3, #16
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d01b      	beq.n	800a8f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f06f 0210 	mvn.w	r2, #16
 800a8c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2208      	movs	r2, #8
 800a8ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	69db      	ldr	r3, [r3, #28]
 800a8d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d003      	beq.n	800a8e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 f970 	bl	800abc4 <HAL_TIM_IC_CaptureCallback>
 800a8e4:	e005      	b.n	800a8f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 f962 	bl	800abb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 f973 	bl	800abd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	f003 0301 	and.w	r3, r3, #1
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d00c      	beq.n	800a91c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f003 0301 	and.w	r3, r3, #1
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d007      	beq.n	800a91c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f06f 0201 	mvn.w	r2, #1
 800a914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f7f6 fca0 	bl	800125c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a922:	2b00      	cmp	r3, #0
 800a924:	d104      	bne.n	800a930 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d00c      	beq.n	800a94a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a936:	2b00      	cmp	r3, #0
 800a938:	d007      	beq.n	800a94a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 fb51 	bl	800afec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00c      	beq.n	800a96e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d007      	beq.n	800a96e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 fb49 	bl	800b000 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a974:	2b00      	cmp	r3, #0
 800a976:	d00c      	beq.n	800a992 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d007      	beq.n	800a992 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a98a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f92d 	bl	800abec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	f003 0320 	and.w	r3, r3, #32
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d00c      	beq.n	800a9b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f003 0320 	and.w	r3, r3, #32
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d007      	beq.n	800a9b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f06f 0220 	mvn.w	r2, #32
 800a9ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 fb11 	bl	800afd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a9b6:	bf00      	nop
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
	...

0800a9c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d101      	bne.n	800a9dc <HAL_TIM_ConfigClockSource+0x1c>
 800a9d8:	2302      	movs	r3, #2
 800a9da:	e0dc      	b.n	800ab96 <HAL_TIM_ConfigClockSource+0x1d6>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2202      	movs	r2, #2
 800a9e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a9f4:	68ba      	ldr	r2, [r7, #8]
 800a9f6:	4b6a      	ldr	r3, [pc, #424]	@ (800aba0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a9f8:	4013      	ands	r3, r2
 800a9fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aa02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	68ba      	ldr	r2, [r7, #8]
 800aa0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a64      	ldr	r2, [pc, #400]	@ (800aba4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	f000 80a9 	beq.w	800ab6a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa18:	4a62      	ldr	r2, [pc, #392]	@ (800aba4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	f200 80ae 	bhi.w	800ab7c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa20:	4a61      	ldr	r2, [pc, #388]	@ (800aba8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	f000 80a1 	beq.w	800ab6a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa28:	4a5f      	ldr	r2, [pc, #380]	@ (800aba8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	f200 80a6 	bhi.w	800ab7c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa30:	4a5e      	ldr	r2, [pc, #376]	@ (800abac <HAL_TIM_ConfigClockSource+0x1ec>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	f000 8099 	beq.w	800ab6a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa38:	4a5c      	ldr	r2, [pc, #368]	@ (800abac <HAL_TIM_ConfigClockSource+0x1ec>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	f200 809e 	bhi.w	800ab7c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aa44:	f000 8091 	beq.w	800ab6a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aa4c:	f200 8096 	bhi.w	800ab7c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa54:	f000 8089 	beq.w	800ab6a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa5c:	f200 808e 	bhi.w	800ab7c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa64:	d03e      	beq.n	800aae4 <HAL_TIM_ConfigClockSource+0x124>
 800aa66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa6a:	f200 8087 	bhi.w	800ab7c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa72:	f000 8086 	beq.w	800ab82 <HAL_TIM_ConfigClockSource+0x1c2>
 800aa76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa7a:	d87f      	bhi.n	800ab7c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa7c:	2b70      	cmp	r3, #112	@ 0x70
 800aa7e:	d01a      	beq.n	800aab6 <HAL_TIM_ConfigClockSource+0xf6>
 800aa80:	2b70      	cmp	r3, #112	@ 0x70
 800aa82:	d87b      	bhi.n	800ab7c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa84:	2b60      	cmp	r3, #96	@ 0x60
 800aa86:	d050      	beq.n	800ab2a <HAL_TIM_ConfigClockSource+0x16a>
 800aa88:	2b60      	cmp	r3, #96	@ 0x60
 800aa8a:	d877      	bhi.n	800ab7c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa8c:	2b50      	cmp	r3, #80	@ 0x50
 800aa8e:	d03c      	beq.n	800ab0a <HAL_TIM_ConfigClockSource+0x14a>
 800aa90:	2b50      	cmp	r3, #80	@ 0x50
 800aa92:	d873      	bhi.n	800ab7c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa94:	2b40      	cmp	r3, #64	@ 0x40
 800aa96:	d058      	beq.n	800ab4a <HAL_TIM_ConfigClockSource+0x18a>
 800aa98:	2b40      	cmp	r3, #64	@ 0x40
 800aa9a:	d86f      	bhi.n	800ab7c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa9c:	2b30      	cmp	r3, #48	@ 0x30
 800aa9e:	d064      	beq.n	800ab6a <HAL_TIM_ConfigClockSource+0x1aa>
 800aaa0:	2b30      	cmp	r3, #48	@ 0x30
 800aaa2:	d86b      	bhi.n	800ab7c <HAL_TIM_ConfigClockSource+0x1bc>
 800aaa4:	2b20      	cmp	r3, #32
 800aaa6:	d060      	beq.n	800ab6a <HAL_TIM_ConfigClockSource+0x1aa>
 800aaa8:	2b20      	cmp	r3, #32
 800aaaa:	d867      	bhi.n	800ab7c <HAL_TIM_ConfigClockSource+0x1bc>
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d05c      	beq.n	800ab6a <HAL_TIM_ConfigClockSource+0x1aa>
 800aab0:	2b10      	cmp	r3, #16
 800aab2:	d05a      	beq.n	800ab6a <HAL_TIM_ConfigClockSource+0x1aa>
 800aab4:	e062      	b.n	800ab7c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aac6:	f000 f9cb 	bl	800ae60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aad8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68ba      	ldr	r2, [r7, #8]
 800aae0:	609a      	str	r2, [r3, #8]
      break;
 800aae2:	e04f      	b.n	800ab84 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aaf4:	f000 f9b4 	bl	800ae60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	689a      	ldr	r2, [r3, #8]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ab06:	609a      	str	r2, [r3, #8]
      break;
 800ab08:	e03c      	b.n	800ab84 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab16:	461a      	mov	r2, r3
 800ab18:	f000 f924 	bl	800ad64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2150      	movs	r1, #80	@ 0x50
 800ab22:	4618      	mov	r0, r3
 800ab24:	f000 f97e 	bl	800ae24 <TIM_ITRx_SetConfig>
      break;
 800ab28:	e02c      	b.n	800ab84 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab36:	461a      	mov	r2, r3
 800ab38:	f000 f943 	bl	800adc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2160      	movs	r1, #96	@ 0x60
 800ab42:	4618      	mov	r0, r3
 800ab44:	f000 f96e 	bl	800ae24 <TIM_ITRx_SetConfig>
      break;
 800ab48:	e01c      	b.n	800ab84 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab56:	461a      	mov	r2, r3
 800ab58:	f000 f904 	bl	800ad64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2140      	movs	r1, #64	@ 0x40
 800ab62:	4618      	mov	r0, r3
 800ab64:	f000 f95e 	bl	800ae24 <TIM_ITRx_SetConfig>
      break;
 800ab68:	e00c      	b.n	800ab84 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4619      	mov	r1, r3
 800ab74:	4610      	mov	r0, r2
 800ab76:	f000 f955 	bl	800ae24 <TIM_ITRx_SetConfig>
      break;
 800ab7a:	e003      	b.n	800ab84 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab80:	e000      	b.n	800ab84 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ab82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ab94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	ffceff88 	.word	0xffceff88
 800aba4:	00100040 	.word	0x00100040
 800aba8:	00100030 	.word	0x00100030
 800abac:	00100020 	.word	0x00100020

0800abb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800abb8:	bf00      	nop
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800abcc:	bf00      	nop
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800abe0:	bf00      	nop
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800abf4:	bf00      	nop
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b085      	sub	sp, #20
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	4a4a      	ldr	r2, [pc, #296]	@ (800ad3c <TIM_Base_SetConfig+0x13c>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d013      	beq.n	800ac40 <TIM_Base_SetConfig+0x40>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac1e:	d00f      	beq.n	800ac40 <TIM_Base_SetConfig+0x40>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4a47      	ldr	r2, [pc, #284]	@ (800ad40 <TIM_Base_SetConfig+0x140>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d00b      	beq.n	800ac40 <TIM_Base_SetConfig+0x40>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4a46      	ldr	r2, [pc, #280]	@ (800ad44 <TIM_Base_SetConfig+0x144>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d007      	beq.n	800ac40 <TIM_Base_SetConfig+0x40>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a45      	ldr	r2, [pc, #276]	@ (800ad48 <TIM_Base_SetConfig+0x148>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d003      	beq.n	800ac40 <TIM_Base_SetConfig+0x40>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a44      	ldr	r2, [pc, #272]	@ (800ad4c <TIM_Base_SetConfig+0x14c>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d108      	bne.n	800ac52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	4a39      	ldr	r2, [pc, #228]	@ (800ad3c <TIM_Base_SetConfig+0x13c>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d027      	beq.n	800acaa <TIM_Base_SetConfig+0xaa>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac60:	d023      	beq.n	800acaa <TIM_Base_SetConfig+0xaa>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	4a36      	ldr	r2, [pc, #216]	@ (800ad40 <TIM_Base_SetConfig+0x140>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d01f      	beq.n	800acaa <TIM_Base_SetConfig+0xaa>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4a35      	ldr	r2, [pc, #212]	@ (800ad44 <TIM_Base_SetConfig+0x144>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d01b      	beq.n	800acaa <TIM_Base_SetConfig+0xaa>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	4a34      	ldr	r2, [pc, #208]	@ (800ad48 <TIM_Base_SetConfig+0x148>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d017      	beq.n	800acaa <TIM_Base_SetConfig+0xaa>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	4a33      	ldr	r2, [pc, #204]	@ (800ad4c <TIM_Base_SetConfig+0x14c>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d013      	beq.n	800acaa <TIM_Base_SetConfig+0xaa>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	4a32      	ldr	r2, [pc, #200]	@ (800ad50 <TIM_Base_SetConfig+0x150>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d00f      	beq.n	800acaa <TIM_Base_SetConfig+0xaa>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	4a31      	ldr	r2, [pc, #196]	@ (800ad54 <TIM_Base_SetConfig+0x154>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d00b      	beq.n	800acaa <TIM_Base_SetConfig+0xaa>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4a30      	ldr	r2, [pc, #192]	@ (800ad58 <TIM_Base_SetConfig+0x158>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d007      	beq.n	800acaa <TIM_Base_SetConfig+0xaa>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4a2f      	ldr	r2, [pc, #188]	@ (800ad5c <TIM_Base_SetConfig+0x15c>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d003      	beq.n	800acaa <TIM_Base_SetConfig+0xaa>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4a2e      	ldr	r2, [pc, #184]	@ (800ad60 <TIM_Base_SetConfig+0x160>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d108      	bne.n	800acbc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800acb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	4313      	orrs	r3, r2
 800acba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	695b      	ldr	r3, [r3, #20]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	68fa      	ldr	r2, [r7, #12]
 800acce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	689a      	ldr	r2, [r3, #8]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	4a16      	ldr	r2, [pc, #88]	@ (800ad3c <TIM_Base_SetConfig+0x13c>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d00f      	beq.n	800ad08 <TIM_Base_SetConfig+0x108>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	4a18      	ldr	r2, [pc, #96]	@ (800ad4c <TIM_Base_SetConfig+0x14c>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d00b      	beq.n	800ad08 <TIM_Base_SetConfig+0x108>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4a17      	ldr	r2, [pc, #92]	@ (800ad50 <TIM_Base_SetConfig+0x150>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d007      	beq.n	800ad08 <TIM_Base_SetConfig+0x108>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a16      	ldr	r2, [pc, #88]	@ (800ad54 <TIM_Base_SetConfig+0x154>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d003      	beq.n	800ad08 <TIM_Base_SetConfig+0x108>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a15      	ldr	r2, [pc, #84]	@ (800ad58 <TIM_Base_SetConfig+0x158>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d103      	bne.n	800ad10 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	691a      	ldr	r2, [r3, #16]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	f003 0301 	and.w	r3, r3, #1
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d105      	bne.n	800ad2e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	f023 0201 	bic.w	r2, r3, #1
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	611a      	str	r2, [r3, #16]
  }
}
 800ad2e:	bf00      	nop
 800ad30:	3714      	adds	r7, #20
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	40010000 	.word	0x40010000
 800ad40:	40000400 	.word	0x40000400
 800ad44:	40000800 	.word	0x40000800
 800ad48:	40000c00 	.word	0x40000c00
 800ad4c:	40010400 	.word	0x40010400
 800ad50:	40014000 	.word	0x40014000
 800ad54:	40014400 	.word	0x40014400
 800ad58:	40014800 	.word	0x40014800
 800ad5c:	4000e000 	.word	0x4000e000
 800ad60:	4000e400 	.word	0x4000e400

0800ad64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b087      	sub	sp, #28
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6a1b      	ldr	r3, [r3, #32]
 800ad74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6a1b      	ldr	r3, [r3, #32]
 800ad7a:	f023 0201 	bic.w	r2, r3, #1
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	699b      	ldr	r3, [r3, #24]
 800ad86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ad8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	011b      	lsls	r3, r3, #4
 800ad94:	693a      	ldr	r2, [r7, #16]
 800ad96:	4313      	orrs	r3, r2
 800ad98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f023 030a 	bic.w	r3, r3, #10
 800ada0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ada2:	697a      	ldr	r2, [r7, #20]
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	697a      	ldr	r2, [r7, #20]
 800adb4:	621a      	str	r2, [r3, #32]
}
 800adb6:	bf00      	nop
 800adb8:	371c      	adds	r7, #28
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr

0800adc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adc2:	b480      	push	{r7}
 800adc4:	b087      	sub	sp, #28
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	60f8      	str	r0, [r7, #12]
 800adca:	60b9      	str	r1, [r7, #8]
 800adcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6a1b      	ldr	r3, [r3, #32]
 800add2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6a1b      	ldr	r3, [r3, #32]
 800add8:	f023 0210 	bic.w	r2, r3, #16
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	699b      	ldr	r3, [r3, #24]
 800ade4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800adec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	031b      	lsls	r3, r3, #12
 800adf2:	693a      	ldr	r2, [r7, #16]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800adfe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	011b      	lsls	r3, r3, #4
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	693a      	ldr	r2, [r7, #16]
 800ae0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	697a      	ldr	r2, [r7, #20]
 800ae14:	621a      	str	r2, [r3, #32]
}
 800ae16:	bf00      	nop
 800ae18:	371c      	adds	r7, #28
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr
	...

0800ae24 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	4b09      	ldr	r3, [pc, #36]	@ (800ae5c <TIM_ITRx_SetConfig+0x38>)
 800ae38:	4013      	ands	r3, r2
 800ae3a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae3c:	683a      	ldr	r2, [r7, #0]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	4313      	orrs	r3, r2
 800ae42:	f043 0307 	orr.w	r3, r3, #7
 800ae46:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	609a      	str	r2, [r3, #8]
}
 800ae4e:	bf00      	nop
 800ae50:	3714      	adds	r7, #20
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	ffcfff8f 	.word	0xffcfff8f

0800ae60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b087      	sub	sp, #28
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
 800ae6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ae7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	021a      	lsls	r2, r3, #8
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	431a      	orrs	r2, r3
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	697a      	ldr	r2, [r7, #20]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	609a      	str	r2, [r3, #8]
}
 800ae94:	bf00      	nop
 800ae96:	371c      	adds	r7, #28
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d101      	bne.n	800aeb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	e077      	b.n	800afa8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2201      	movs	r2, #1
 800aebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2202      	movs	r2, #2
 800aec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4a35      	ldr	r2, [pc, #212]	@ (800afb4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d004      	beq.n	800aeec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a34      	ldr	r2, [pc, #208]	@ (800afb8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d108      	bne.n	800aefe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800aef2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	4313      	orrs	r3, r2
 800af0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	68fa      	ldr	r2, [r7, #12]
 800af16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a25      	ldr	r2, [pc, #148]	@ (800afb4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d02c      	beq.n	800af7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af2a:	d027      	beq.n	800af7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a22      	ldr	r2, [pc, #136]	@ (800afbc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d022      	beq.n	800af7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a21      	ldr	r2, [pc, #132]	@ (800afc0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d01d      	beq.n	800af7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a1f      	ldr	r2, [pc, #124]	@ (800afc4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d018      	beq.n	800af7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a1a      	ldr	r2, [pc, #104]	@ (800afb8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d013      	beq.n	800af7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a1b      	ldr	r2, [pc, #108]	@ (800afc8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d00e      	beq.n	800af7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a1a      	ldr	r2, [pc, #104]	@ (800afcc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d009      	beq.n	800af7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a18      	ldr	r2, [pc, #96]	@ (800afd0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d004      	beq.n	800af7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a17      	ldr	r2, [pc, #92]	@ (800afd4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d10c      	bne.n	800af96 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	68ba      	ldr	r2, [r7, #8]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	68ba      	ldr	r2, [r7, #8]
 800af94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2201      	movs	r2, #1
 800af9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800afa6:	2300      	movs	r3, #0
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3714      	adds	r7, #20
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr
 800afb4:	40010000 	.word	0x40010000
 800afb8:	40010400 	.word	0x40010400
 800afbc:	40000400 	.word	0x40000400
 800afc0:	40000800 	.word	0x40000800
 800afc4:	40000c00 	.word	0x40000c00
 800afc8:	40001800 	.word	0x40001800
 800afcc:	40014000 	.word	0x40014000
 800afd0:	4000e000 	.word	0x4000e000
 800afd4:	4000e400 	.word	0x4000e400

0800afd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800afe0:	bf00      	nop
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aff4:	bf00      	nop
 800aff6:	370c      	adds	r7, #12
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr

0800b000 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b008:	bf00      	nop
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d101      	bne.n	800b026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	e042      	b.n	800b0ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d106      	bne.n	800b03e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f7f6 fc63 	bl	8001904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2224      	movs	r2, #36	@ 0x24
 800b042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f022 0201 	bic.w	r2, r2, #1
 800b054:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d002      	beq.n	800b064 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 ff22 	bl	800bea8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 f8b3 	bl	800b1d0 <UART_SetConfig>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d101      	bne.n	800b074 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	e01b      	b.n	800b0ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	685a      	ldr	r2, [r3, #4]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b082:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	689a      	ldr	r2, [r3, #8]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b092:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f042 0201 	orr.w	r2, r2, #1
 800b0a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 ffa1 	bl	800bfec <UART_CheckIdleState>
 800b0aa:	4603      	mov	r3, r0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b08a      	sub	sp, #40	@ 0x28
 800b0b8:	af02      	add	r7, sp, #8
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	603b      	str	r3, [r7, #0]
 800b0c0:	4613      	mov	r3, r2
 800b0c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0ca:	2b20      	cmp	r3, #32
 800b0cc:	d17b      	bne.n	800b1c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d002      	beq.n	800b0da <HAL_UART_Transmit+0x26>
 800b0d4:	88fb      	ldrh	r3, [r7, #6]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e074      	b.n	800b1c8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2221      	movs	r2, #33	@ 0x21
 800b0ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b0ee:	f7f6 fe77 	bl	8001de0 <HAL_GetTick>
 800b0f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	88fa      	ldrh	r2, [r7, #6]
 800b0f8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	88fa      	ldrh	r2, [r7, #6]
 800b100:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b10c:	d108      	bne.n	800b120 <HAL_UART_Transmit+0x6c>
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	691b      	ldr	r3, [r3, #16]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d104      	bne.n	800b120 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b116:	2300      	movs	r3, #0
 800b118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	61bb      	str	r3, [r7, #24]
 800b11e:	e003      	b.n	800b128 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b124:	2300      	movs	r3, #0
 800b126:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b128:	e030      	b.n	800b18c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	9300      	str	r3, [sp, #0]
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	2200      	movs	r2, #0
 800b132:	2180      	movs	r1, #128	@ 0x80
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f001 f803 	bl	800c140 <UART_WaitOnFlagUntilTimeout>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d005      	beq.n	800b14c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2220      	movs	r2, #32
 800b144:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b148:	2303      	movs	r3, #3
 800b14a:	e03d      	b.n	800b1c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10b      	bne.n	800b16a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	881b      	ldrh	r3, [r3, #0]
 800b156:	461a      	mov	r2, r3
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b160:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	3302      	adds	r3, #2
 800b166:	61bb      	str	r3, [r7, #24]
 800b168:	e007      	b.n	800b17a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	781a      	ldrb	r2, [r3, #0]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	3301      	adds	r3, #1
 800b178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b180:	b29b      	uxth	r3, r3
 800b182:	3b01      	subs	r3, #1
 800b184:	b29a      	uxth	r2, r3
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b192:	b29b      	uxth	r3, r3
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1c8      	bne.n	800b12a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	9300      	str	r3, [sp, #0]
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	2140      	movs	r1, #64	@ 0x40
 800b1a2:	68f8      	ldr	r0, [r7, #12]
 800b1a4:	f000 ffcc 	bl	800c140 <UART_WaitOnFlagUntilTimeout>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d005      	beq.n	800b1ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2220      	movs	r2, #32
 800b1b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b1b6:	2303      	movs	r3, #3
 800b1b8:	e006      	b.n	800b1c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2220      	movs	r2, #32
 800b1be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	e000      	b.n	800b1c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b1c6:	2302      	movs	r3, #2
  }
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3720      	adds	r7, #32
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1d4:	b092      	sub	sp, #72	@ 0x48
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	689a      	ldr	r2, [r3, #8]
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	691b      	ldr	r3, [r3, #16]
 800b1e8:	431a      	orrs	r2, r3
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	695b      	ldr	r3, [r3, #20]
 800b1ee:	431a      	orrs	r2, r3
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	69db      	ldr	r3, [r3, #28]
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	4bbe      	ldr	r3, [pc, #760]	@ (800b4f8 <UART_SetConfig+0x328>)
 800b200:	4013      	ands	r3, r2
 800b202:	697a      	ldr	r2, [r7, #20]
 800b204:	6812      	ldr	r2, [r2, #0]
 800b206:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b208:	430b      	orrs	r3, r1
 800b20a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	68da      	ldr	r2, [r3, #12]
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	430a      	orrs	r2, r1
 800b220:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	699b      	ldr	r3, [r3, #24]
 800b226:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4ab3      	ldr	r2, [pc, #716]	@ (800b4fc <UART_SetConfig+0x32c>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d004      	beq.n	800b23c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	6a1b      	ldr	r3, [r3, #32]
 800b236:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b238:	4313      	orrs	r3, r2
 800b23a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	689a      	ldr	r2, [r3, #8]
 800b242:	4baf      	ldr	r3, [pc, #700]	@ (800b500 <UART_SetConfig+0x330>)
 800b244:	4013      	ands	r3, r2
 800b246:	697a      	ldr	r2, [r7, #20]
 800b248:	6812      	ldr	r2, [r2, #0]
 800b24a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b24c:	430b      	orrs	r3, r1
 800b24e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b256:	f023 010f 	bic.w	r1, r3, #15
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	430a      	orrs	r2, r1
 800b264:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4aa6      	ldr	r2, [pc, #664]	@ (800b504 <UART_SetConfig+0x334>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d177      	bne.n	800b360 <UART_SetConfig+0x190>
 800b270:	4ba5      	ldr	r3, [pc, #660]	@ (800b508 <UART_SetConfig+0x338>)
 800b272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b274:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b278:	2b28      	cmp	r3, #40	@ 0x28
 800b27a:	d86d      	bhi.n	800b358 <UART_SetConfig+0x188>
 800b27c:	a201      	add	r2, pc, #4	@ (adr r2, 800b284 <UART_SetConfig+0xb4>)
 800b27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b282:	bf00      	nop
 800b284:	0800b329 	.word	0x0800b329
 800b288:	0800b359 	.word	0x0800b359
 800b28c:	0800b359 	.word	0x0800b359
 800b290:	0800b359 	.word	0x0800b359
 800b294:	0800b359 	.word	0x0800b359
 800b298:	0800b359 	.word	0x0800b359
 800b29c:	0800b359 	.word	0x0800b359
 800b2a0:	0800b359 	.word	0x0800b359
 800b2a4:	0800b331 	.word	0x0800b331
 800b2a8:	0800b359 	.word	0x0800b359
 800b2ac:	0800b359 	.word	0x0800b359
 800b2b0:	0800b359 	.word	0x0800b359
 800b2b4:	0800b359 	.word	0x0800b359
 800b2b8:	0800b359 	.word	0x0800b359
 800b2bc:	0800b359 	.word	0x0800b359
 800b2c0:	0800b359 	.word	0x0800b359
 800b2c4:	0800b339 	.word	0x0800b339
 800b2c8:	0800b359 	.word	0x0800b359
 800b2cc:	0800b359 	.word	0x0800b359
 800b2d0:	0800b359 	.word	0x0800b359
 800b2d4:	0800b359 	.word	0x0800b359
 800b2d8:	0800b359 	.word	0x0800b359
 800b2dc:	0800b359 	.word	0x0800b359
 800b2e0:	0800b359 	.word	0x0800b359
 800b2e4:	0800b341 	.word	0x0800b341
 800b2e8:	0800b359 	.word	0x0800b359
 800b2ec:	0800b359 	.word	0x0800b359
 800b2f0:	0800b359 	.word	0x0800b359
 800b2f4:	0800b359 	.word	0x0800b359
 800b2f8:	0800b359 	.word	0x0800b359
 800b2fc:	0800b359 	.word	0x0800b359
 800b300:	0800b359 	.word	0x0800b359
 800b304:	0800b349 	.word	0x0800b349
 800b308:	0800b359 	.word	0x0800b359
 800b30c:	0800b359 	.word	0x0800b359
 800b310:	0800b359 	.word	0x0800b359
 800b314:	0800b359 	.word	0x0800b359
 800b318:	0800b359 	.word	0x0800b359
 800b31c:	0800b359 	.word	0x0800b359
 800b320:	0800b359 	.word	0x0800b359
 800b324:	0800b351 	.word	0x0800b351
 800b328:	2301      	movs	r3, #1
 800b32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b32e:	e326      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b330:	2304      	movs	r3, #4
 800b332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b336:	e322      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b338:	2308      	movs	r3, #8
 800b33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b33e:	e31e      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b340:	2310      	movs	r3, #16
 800b342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b346:	e31a      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b348:	2320      	movs	r3, #32
 800b34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b34e:	e316      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b350:	2340      	movs	r3, #64	@ 0x40
 800b352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b356:	e312      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b358:	2380      	movs	r3, #128	@ 0x80
 800b35a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b35e:	e30e      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a69      	ldr	r2, [pc, #420]	@ (800b50c <UART_SetConfig+0x33c>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d130      	bne.n	800b3cc <UART_SetConfig+0x1fc>
 800b36a:	4b67      	ldr	r3, [pc, #412]	@ (800b508 <UART_SetConfig+0x338>)
 800b36c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b36e:	f003 0307 	and.w	r3, r3, #7
 800b372:	2b05      	cmp	r3, #5
 800b374:	d826      	bhi.n	800b3c4 <UART_SetConfig+0x1f4>
 800b376:	a201      	add	r2, pc, #4	@ (adr r2, 800b37c <UART_SetConfig+0x1ac>)
 800b378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b37c:	0800b395 	.word	0x0800b395
 800b380:	0800b39d 	.word	0x0800b39d
 800b384:	0800b3a5 	.word	0x0800b3a5
 800b388:	0800b3ad 	.word	0x0800b3ad
 800b38c:	0800b3b5 	.word	0x0800b3b5
 800b390:	0800b3bd 	.word	0x0800b3bd
 800b394:	2300      	movs	r3, #0
 800b396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b39a:	e2f0      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b39c:	2304      	movs	r3, #4
 800b39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3a2:	e2ec      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b3a4:	2308      	movs	r3, #8
 800b3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3aa:	e2e8      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b3ac:	2310      	movs	r3, #16
 800b3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3b2:	e2e4      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b3b4:	2320      	movs	r3, #32
 800b3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ba:	e2e0      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b3bc:	2340      	movs	r3, #64	@ 0x40
 800b3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3c2:	e2dc      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b3c4:	2380      	movs	r3, #128	@ 0x80
 800b3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ca:	e2d8      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a4f      	ldr	r2, [pc, #316]	@ (800b510 <UART_SetConfig+0x340>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d130      	bne.n	800b438 <UART_SetConfig+0x268>
 800b3d6:	4b4c      	ldr	r3, [pc, #304]	@ (800b508 <UART_SetConfig+0x338>)
 800b3d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3da:	f003 0307 	and.w	r3, r3, #7
 800b3de:	2b05      	cmp	r3, #5
 800b3e0:	d826      	bhi.n	800b430 <UART_SetConfig+0x260>
 800b3e2:	a201      	add	r2, pc, #4	@ (adr r2, 800b3e8 <UART_SetConfig+0x218>)
 800b3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e8:	0800b401 	.word	0x0800b401
 800b3ec:	0800b409 	.word	0x0800b409
 800b3f0:	0800b411 	.word	0x0800b411
 800b3f4:	0800b419 	.word	0x0800b419
 800b3f8:	0800b421 	.word	0x0800b421
 800b3fc:	0800b429 	.word	0x0800b429
 800b400:	2300      	movs	r3, #0
 800b402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b406:	e2ba      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b408:	2304      	movs	r3, #4
 800b40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b40e:	e2b6      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b410:	2308      	movs	r3, #8
 800b412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b416:	e2b2      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b418:	2310      	movs	r3, #16
 800b41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b41e:	e2ae      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b420:	2320      	movs	r3, #32
 800b422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b426:	e2aa      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b428:	2340      	movs	r3, #64	@ 0x40
 800b42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b42e:	e2a6      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b430:	2380      	movs	r3, #128	@ 0x80
 800b432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b436:	e2a2      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a35      	ldr	r2, [pc, #212]	@ (800b514 <UART_SetConfig+0x344>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d130      	bne.n	800b4a4 <UART_SetConfig+0x2d4>
 800b442:	4b31      	ldr	r3, [pc, #196]	@ (800b508 <UART_SetConfig+0x338>)
 800b444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b446:	f003 0307 	and.w	r3, r3, #7
 800b44a:	2b05      	cmp	r3, #5
 800b44c:	d826      	bhi.n	800b49c <UART_SetConfig+0x2cc>
 800b44e:	a201      	add	r2, pc, #4	@ (adr r2, 800b454 <UART_SetConfig+0x284>)
 800b450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b454:	0800b46d 	.word	0x0800b46d
 800b458:	0800b475 	.word	0x0800b475
 800b45c:	0800b47d 	.word	0x0800b47d
 800b460:	0800b485 	.word	0x0800b485
 800b464:	0800b48d 	.word	0x0800b48d
 800b468:	0800b495 	.word	0x0800b495
 800b46c:	2300      	movs	r3, #0
 800b46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b472:	e284      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b474:	2304      	movs	r3, #4
 800b476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b47a:	e280      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b47c:	2308      	movs	r3, #8
 800b47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b482:	e27c      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b484:	2310      	movs	r3, #16
 800b486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b48a:	e278      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b48c:	2320      	movs	r3, #32
 800b48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b492:	e274      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b494:	2340      	movs	r3, #64	@ 0x40
 800b496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b49a:	e270      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b49c:	2380      	movs	r3, #128	@ 0x80
 800b49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4a2:	e26c      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a1b      	ldr	r2, [pc, #108]	@ (800b518 <UART_SetConfig+0x348>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d142      	bne.n	800b534 <UART_SetConfig+0x364>
 800b4ae:	4b16      	ldr	r3, [pc, #88]	@ (800b508 <UART_SetConfig+0x338>)
 800b4b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4b2:	f003 0307 	and.w	r3, r3, #7
 800b4b6:	2b05      	cmp	r3, #5
 800b4b8:	d838      	bhi.n	800b52c <UART_SetConfig+0x35c>
 800b4ba:	a201      	add	r2, pc, #4	@ (adr r2, 800b4c0 <UART_SetConfig+0x2f0>)
 800b4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c0:	0800b4d9 	.word	0x0800b4d9
 800b4c4:	0800b4e1 	.word	0x0800b4e1
 800b4c8:	0800b4e9 	.word	0x0800b4e9
 800b4cc:	0800b4f1 	.word	0x0800b4f1
 800b4d0:	0800b51d 	.word	0x0800b51d
 800b4d4:	0800b525 	.word	0x0800b525
 800b4d8:	2300      	movs	r3, #0
 800b4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4de:	e24e      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b4e0:	2304      	movs	r3, #4
 800b4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4e6:	e24a      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b4e8:	2308      	movs	r3, #8
 800b4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ee:	e246      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b4f0:	2310      	movs	r3, #16
 800b4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4f6:	e242      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b4f8:	cfff69f3 	.word	0xcfff69f3
 800b4fc:	58000c00 	.word	0x58000c00
 800b500:	11fff4ff 	.word	0x11fff4ff
 800b504:	40011000 	.word	0x40011000
 800b508:	58024400 	.word	0x58024400
 800b50c:	40004400 	.word	0x40004400
 800b510:	40004800 	.word	0x40004800
 800b514:	40004c00 	.word	0x40004c00
 800b518:	40005000 	.word	0x40005000
 800b51c:	2320      	movs	r3, #32
 800b51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b522:	e22c      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b524:	2340      	movs	r3, #64	@ 0x40
 800b526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b52a:	e228      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b52c:	2380      	movs	r3, #128	@ 0x80
 800b52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b532:	e224      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4ab1      	ldr	r2, [pc, #708]	@ (800b800 <UART_SetConfig+0x630>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d176      	bne.n	800b62c <UART_SetConfig+0x45c>
 800b53e:	4bb1      	ldr	r3, [pc, #708]	@ (800b804 <UART_SetConfig+0x634>)
 800b540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b542:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b546:	2b28      	cmp	r3, #40	@ 0x28
 800b548:	d86c      	bhi.n	800b624 <UART_SetConfig+0x454>
 800b54a:	a201      	add	r2, pc, #4	@ (adr r2, 800b550 <UART_SetConfig+0x380>)
 800b54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b550:	0800b5f5 	.word	0x0800b5f5
 800b554:	0800b625 	.word	0x0800b625
 800b558:	0800b625 	.word	0x0800b625
 800b55c:	0800b625 	.word	0x0800b625
 800b560:	0800b625 	.word	0x0800b625
 800b564:	0800b625 	.word	0x0800b625
 800b568:	0800b625 	.word	0x0800b625
 800b56c:	0800b625 	.word	0x0800b625
 800b570:	0800b5fd 	.word	0x0800b5fd
 800b574:	0800b625 	.word	0x0800b625
 800b578:	0800b625 	.word	0x0800b625
 800b57c:	0800b625 	.word	0x0800b625
 800b580:	0800b625 	.word	0x0800b625
 800b584:	0800b625 	.word	0x0800b625
 800b588:	0800b625 	.word	0x0800b625
 800b58c:	0800b625 	.word	0x0800b625
 800b590:	0800b605 	.word	0x0800b605
 800b594:	0800b625 	.word	0x0800b625
 800b598:	0800b625 	.word	0x0800b625
 800b59c:	0800b625 	.word	0x0800b625
 800b5a0:	0800b625 	.word	0x0800b625
 800b5a4:	0800b625 	.word	0x0800b625
 800b5a8:	0800b625 	.word	0x0800b625
 800b5ac:	0800b625 	.word	0x0800b625
 800b5b0:	0800b60d 	.word	0x0800b60d
 800b5b4:	0800b625 	.word	0x0800b625
 800b5b8:	0800b625 	.word	0x0800b625
 800b5bc:	0800b625 	.word	0x0800b625
 800b5c0:	0800b625 	.word	0x0800b625
 800b5c4:	0800b625 	.word	0x0800b625
 800b5c8:	0800b625 	.word	0x0800b625
 800b5cc:	0800b625 	.word	0x0800b625
 800b5d0:	0800b615 	.word	0x0800b615
 800b5d4:	0800b625 	.word	0x0800b625
 800b5d8:	0800b625 	.word	0x0800b625
 800b5dc:	0800b625 	.word	0x0800b625
 800b5e0:	0800b625 	.word	0x0800b625
 800b5e4:	0800b625 	.word	0x0800b625
 800b5e8:	0800b625 	.word	0x0800b625
 800b5ec:	0800b625 	.word	0x0800b625
 800b5f0:	0800b61d 	.word	0x0800b61d
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5fa:	e1c0      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b5fc:	2304      	movs	r3, #4
 800b5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b602:	e1bc      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b604:	2308      	movs	r3, #8
 800b606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b60a:	e1b8      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b60c:	2310      	movs	r3, #16
 800b60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b612:	e1b4      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b614:	2320      	movs	r3, #32
 800b616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b61a:	e1b0      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b61c:	2340      	movs	r3, #64	@ 0x40
 800b61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b622:	e1ac      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b624:	2380      	movs	r3, #128	@ 0x80
 800b626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b62a:	e1a8      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4a75      	ldr	r2, [pc, #468]	@ (800b808 <UART_SetConfig+0x638>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d130      	bne.n	800b698 <UART_SetConfig+0x4c8>
 800b636:	4b73      	ldr	r3, [pc, #460]	@ (800b804 <UART_SetConfig+0x634>)
 800b638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b63a:	f003 0307 	and.w	r3, r3, #7
 800b63e:	2b05      	cmp	r3, #5
 800b640:	d826      	bhi.n	800b690 <UART_SetConfig+0x4c0>
 800b642:	a201      	add	r2, pc, #4	@ (adr r2, 800b648 <UART_SetConfig+0x478>)
 800b644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b648:	0800b661 	.word	0x0800b661
 800b64c:	0800b669 	.word	0x0800b669
 800b650:	0800b671 	.word	0x0800b671
 800b654:	0800b679 	.word	0x0800b679
 800b658:	0800b681 	.word	0x0800b681
 800b65c:	0800b689 	.word	0x0800b689
 800b660:	2300      	movs	r3, #0
 800b662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b666:	e18a      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b668:	2304      	movs	r3, #4
 800b66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b66e:	e186      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b670:	2308      	movs	r3, #8
 800b672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b676:	e182      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b678:	2310      	movs	r3, #16
 800b67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b67e:	e17e      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b680:	2320      	movs	r3, #32
 800b682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b686:	e17a      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b688:	2340      	movs	r3, #64	@ 0x40
 800b68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b68e:	e176      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b690:	2380      	movs	r3, #128	@ 0x80
 800b692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b696:	e172      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a5b      	ldr	r2, [pc, #364]	@ (800b80c <UART_SetConfig+0x63c>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d130      	bne.n	800b704 <UART_SetConfig+0x534>
 800b6a2:	4b58      	ldr	r3, [pc, #352]	@ (800b804 <UART_SetConfig+0x634>)
 800b6a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6a6:	f003 0307 	and.w	r3, r3, #7
 800b6aa:	2b05      	cmp	r3, #5
 800b6ac:	d826      	bhi.n	800b6fc <UART_SetConfig+0x52c>
 800b6ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b6b4 <UART_SetConfig+0x4e4>)
 800b6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b4:	0800b6cd 	.word	0x0800b6cd
 800b6b8:	0800b6d5 	.word	0x0800b6d5
 800b6bc:	0800b6dd 	.word	0x0800b6dd
 800b6c0:	0800b6e5 	.word	0x0800b6e5
 800b6c4:	0800b6ed 	.word	0x0800b6ed
 800b6c8:	0800b6f5 	.word	0x0800b6f5
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6d2:	e154      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b6d4:	2304      	movs	r3, #4
 800b6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6da:	e150      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b6dc:	2308      	movs	r3, #8
 800b6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6e2:	e14c      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b6e4:	2310      	movs	r3, #16
 800b6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ea:	e148      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b6ec:	2320      	movs	r3, #32
 800b6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6f2:	e144      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b6f4:	2340      	movs	r3, #64	@ 0x40
 800b6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6fa:	e140      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b6fc:	2380      	movs	r3, #128	@ 0x80
 800b6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b702:	e13c      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4a41      	ldr	r2, [pc, #260]	@ (800b810 <UART_SetConfig+0x640>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	f040 8082 	bne.w	800b814 <UART_SetConfig+0x644>
 800b710:	4b3c      	ldr	r3, [pc, #240]	@ (800b804 <UART_SetConfig+0x634>)
 800b712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b714:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b718:	2b28      	cmp	r3, #40	@ 0x28
 800b71a:	d86d      	bhi.n	800b7f8 <UART_SetConfig+0x628>
 800b71c:	a201      	add	r2, pc, #4	@ (adr r2, 800b724 <UART_SetConfig+0x554>)
 800b71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b722:	bf00      	nop
 800b724:	0800b7c9 	.word	0x0800b7c9
 800b728:	0800b7f9 	.word	0x0800b7f9
 800b72c:	0800b7f9 	.word	0x0800b7f9
 800b730:	0800b7f9 	.word	0x0800b7f9
 800b734:	0800b7f9 	.word	0x0800b7f9
 800b738:	0800b7f9 	.word	0x0800b7f9
 800b73c:	0800b7f9 	.word	0x0800b7f9
 800b740:	0800b7f9 	.word	0x0800b7f9
 800b744:	0800b7d1 	.word	0x0800b7d1
 800b748:	0800b7f9 	.word	0x0800b7f9
 800b74c:	0800b7f9 	.word	0x0800b7f9
 800b750:	0800b7f9 	.word	0x0800b7f9
 800b754:	0800b7f9 	.word	0x0800b7f9
 800b758:	0800b7f9 	.word	0x0800b7f9
 800b75c:	0800b7f9 	.word	0x0800b7f9
 800b760:	0800b7f9 	.word	0x0800b7f9
 800b764:	0800b7d9 	.word	0x0800b7d9
 800b768:	0800b7f9 	.word	0x0800b7f9
 800b76c:	0800b7f9 	.word	0x0800b7f9
 800b770:	0800b7f9 	.word	0x0800b7f9
 800b774:	0800b7f9 	.word	0x0800b7f9
 800b778:	0800b7f9 	.word	0x0800b7f9
 800b77c:	0800b7f9 	.word	0x0800b7f9
 800b780:	0800b7f9 	.word	0x0800b7f9
 800b784:	0800b7e1 	.word	0x0800b7e1
 800b788:	0800b7f9 	.word	0x0800b7f9
 800b78c:	0800b7f9 	.word	0x0800b7f9
 800b790:	0800b7f9 	.word	0x0800b7f9
 800b794:	0800b7f9 	.word	0x0800b7f9
 800b798:	0800b7f9 	.word	0x0800b7f9
 800b79c:	0800b7f9 	.word	0x0800b7f9
 800b7a0:	0800b7f9 	.word	0x0800b7f9
 800b7a4:	0800b7e9 	.word	0x0800b7e9
 800b7a8:	0800b7f9 	.word	0x0800b7f9
 800b7ac:	0800b7f9 	.word	0x0800b7f9
 800b7b0:	0800b7f9 	.word	0x0800b7f9
 800b7b4:	0800b7f9 	.word	0x0800b7f9
 800b7b8:	0800b7f9 	.word	0x0800b7f9
 800b7bc:	0800b7f9 	.word	0x0800b7f9
 800b7c0:	0800b7f9 	.word	0x0800b7f9
 800b7c4:	0800b7f1 	.word	0x0800b7f1
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ce:	e0d6      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b7d0:	2304      	movs	r3, #4
 800b7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7d6:	e0d2      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b7d8:	2308      	movs	r3, #8
 800b7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7de:	e0ce      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b7e0:	2310      	movs	r3, #16
 800b7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7e6:	e0ca      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b7e8:	2320      	movs	r3, #32
 800b7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ee:	e0c6      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b7f0:	2340      	movs	r3, #64	@ 0x40
 800b7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7f6:	e0c2      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b7f8:	2380      	movs	r3, #128	@ 0x80
 800b7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7fe:	e0be      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b800:	40011400 	.word	0x40011400
 800b804:	58024400 	.word	0x58024400
 800b808:	40007800 	.word	0x40007800
 800b80c:	40007c00 	.word	0x40007c00
 800b810:	40011800 	.word	0x40011800
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4aad      	ldr	r2, [pc, #692]	@ (800bad0 <UART_SetConfig+0x900>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d176      	bne.n	800b90c <UART_SetConfig+0x73c>
 800b81e:	4bad      	ldr	r3, [pc, #692]	@ (800bad4 <UART_SetConfig+0x904>)
 800b820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b822:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b826:	2b28      	cmp	r3, #40	@ 0x28
 800b828:	d86c      	bhi.n	800b904 <UART_SetConfig+0x734>
 800b82a:	a201      	add	r2, pc, #4	@ (adr r2, 800b830 <UART_SetConfig+0x660>)
 800b82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b830:	0800b8d5 	.word	0x0800b8d5
 800b834:	0800b905 	.word	0x0800b905
 800b838:	0800b905 	.word	0x0800b905
 800b83c:	0800b905 	.word	0x0800b905
 800b840:	0800b905 	.word	0x0800b905
 800b844:	0800b905 	.word	0x0800b905
 800b848:	0800b905 	.word	0x0800b905
 800b84c:	0800b905 	.word	0x0800b905
 800b850:	0800b8dd 	.word	0x0800b8dd
 800b854:	0800b905 	.word	0x0800b905
 800b858:	0800b905 	.word	0x0800b905
 800b85c:	0800b905 	.word	0x0800b905
 800b860:	0800b905 	.word	0x0800b905
 800b864:	0800b905 	.word	0x0800b905
 800b868:	0800b905 	.word	0x0800b905
 800b86c:	0800b905 	.word	0x0800b905
 800b870:	0800b8e5 	.word	0x0800b8e5
 800b874:	0800b905 	.word	0x0800b905
 800b878:	0800b905 	.word	0x0800b905
 800b87c:	0800b905 	.word	0x0800b905
 800b880:	0800b905 	.word	0x0800b905
 800b884:	0800b905 	.word	0x0800b905
 800b888:	0800b905 	.word	0x0800b905
 800b88c:	0800b905 	.word	0x0800b905
 800b890:	0800b8ed 	.word	0x0800b8ed
 800b894:	0800b905 	.word	0x0800b905
 800b898:	0800b905 	.word	0x0800b905
 800b89c:	0800b905 	.word	0x0800b905
 800b8a0:	0800b905 	.word	0x0800b905
 800b8a4:	0800b905 	.word	0x0800b905
 800b8a8:	0800b905 	.word	0x0800b905
 800b8ac:	0800b905 	.word	0x0800b905
 800b8b0:	0800b8f5 	.word	0x0800b8f5
 800b8b4:	0800b905 	.word	0x0800b905
 800b8b8:	0800b905 	.word	0x0800b905
 800b8bc:	0800b905 	.word	0x0800b905
 800b8c0:	0800b905 	.word	0x0800b905
 800b8c4:	0800b905 	.word	0x0800b905
 800b8c8:	0800b905 	.word	0x0800b905
 800b8cc:	0800b905 	.word	0x0800b905
 800b8d0:	0800b8fd 	.word	0x0800b8fd
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8da:	e050      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b8dc:	2304      	movs	r3, #4
 800b8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8e2:	e04c      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b8e4:	2308      	movs	r3, #8
 800b8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ea:	e048      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b8ec:	2310      	movs	r3, #16
 800b8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8f2:	e044      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b8f4:	2320      	movs	r3, #32
 800b8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8fa:	e040      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b8fc:	2340      	movs	r3, #64	@ 0x40
 800b8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b902:	e03c      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b904:	2380      	movs	r3, #128	@ 0x80
 800b906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b90a:	e038      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a71      	ldr	r2, [pc, #452]	@ (800bad8 <UART_SetConfig+0x908>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d130      	bne.n	800b978 <UART_SetConfig+0x7a8>
 800b916:	4b6f      	ldr	r3, [pc, #444]	@ (800bad4 <UART_SetConfig+0x904>)
 800b918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b91a:	f003 0307 	and.w	r3, r3, #7
 800b91e:	2b05      	cmp	r3, #5
 800b920:	d826      	bhi.n	800b970 <UART_SetConfig+0x7a0>
 800b922:	a201      	add	r2, pc, #4	@ (adr r2, 800b928 <UART_SetConfig+0x758>)
 800b924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b928:	0800b941 	.word	0x0800b941
 800b92c:	0800b949 	.word	0x0800b949
 800b930:	0800b951 	.word	0x0800b951
 800b934:	0800b959 	.word	0x0800b959
 800b938:	0800b961 	.word	0x0800b961
 800b93c:	0800b969 	.word	0x0800b969
 800b940:	2302      	movs	r3, #2
 800b942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b946:	e01a      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b948:	2304      	movs	r3, #4
 800b94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b94e:	e016      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b950:	2308      	movs	r3, #8
 800b952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b956:	e012      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b958:	2310      	movs	r3, #16
 800b95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b95e:	e00e      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b960:	2320      	movs	r3, #32
 800b962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b966:	e00a      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b968:	2340      	movs	r3, #64	@ 0x40
 800b96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b96e:	e006      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b970:	2380      	movs	r3, #128	@ 0x80
 800b972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b976:	e002      	b.n	800b97e <UART_SetConfig+0x7ae>
 800b978:	2380      	movs	r3, #128	@ 0x80
 800b97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4a55      	ldr	r2, [pc, #340]	@ (800bad8 <UART_SetConfig+0x908>)
 800b984:	4293      	cmp	r3, r2
 800b986:	f040 80f8 	bne.w	800bb7a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b98a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b98e:	2b20      	cmp	r3, #32
 800b990:	dc46      	bgt.n	800ba20 <UART_SetConfig+0x850>
 800b992:	2b02      	cmp	r3, #2
 800b994:	db75      	blt.n	800ba82 <UART_SetConfig+0x8b2>
 800b996:	3b02      	subs	r3, #2
 800b998:	2b1e      	cmp	r3, #30
 800b99a:	d872      	bhi.n	800ba82 <UART_SetConfig+0x8b2>
 800b99c:	a201      	add	r2, pc, #4	@ (adr r2, 800b9a4 <UART_SetConfig+0x7d4>)
 800b99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a2:	bf00      	nop
 800b9a4:	0800ba27 	.word	0x0800ba27
 800b9a8:	0800ba83 	.word	0x0800ba83
 800b9ac:	0800ba2f 	.word	0x0800ba2f
 800b9b0:	0800ba83 	.word	0x0800ba83
 800b9b4:	0800ba83 	.word	0x0800ba83
 800b9b8:	0800ba83 	.word	0x0800ba83
 800b9bc:	0800ba3f 	.word	0x0800ba3f
 800b9c0:	0800ba83 	.word	0x0800ba83
 800b9c4:	0800ba83 	.word	0x0800ba83
 800b9c8:	0800ba83 	.word	0x0800ba83
 800b9cc:	0800ba83 	.word	0x0800ba83
 800b9d0:	0800ba83 	.word	0x0800ba83
 800b9d4:	0800ba83 	.word	0x0800ba83
 800b9d8:	0800ba83 	.word	0x0800ba83
 800b9dc:	0800ba4f 	.word	0x0800ba4f
 800b9e0:	0800ba83 	.word	0x0800ba83
 800b9e4:	0800ba83 	.word	0x0800ba83
 800b9e8:	0800ba83 	.word	0x0800ba83
 800b9ec:	0800ba83 	.word	0x0800ba83
 800b9f0:	0800ba83 	.word	0x0800ba83
 800b9f4:	0800ba83 	.word	0x0800ba83
 800b9f8:	0800ba83 	.word	0x0800ba83
 800b9fc:	0800ba83 	.word	0x0800ba83
 800ba00:	0800ba83 	.word	0x0800ba83
 800ba04:	0800ba83 	.word	0x0800ba83
 800ba08:	0800ba83 	.word	0x0800ba83
 800ba0c:	0800ba83 	.word	0x0800ba83
 800ba10:	0800ba83 	.word	0x0800ba83
 800ba14:	0800ba83 	.word	0x0800ba83
 800ba18:	0800ba83 	.word	0x0800ba83
 800ba1c:	0800ba75 	.word	0x0800ba75
 800ba20:	2b40      	cmp	r3, #64	@ 0x40
 800ba22:	d02a      	beq.n	800ba7a <UART_SetConfig+0x8aa>
 800ba24:	e02d      	b.n	800ba82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ba26:	f7fd fe8d 	bl	8009744 <HAL_RCCEx_GetD3PCLK1Freq>
 800ba2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba2c:	e02f      	b.n	800ba8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fd fe9c 	bl	8009770 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba3c:	e027      	b.n	800ba8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba3e:	f107 0318 	add.w	r3, r7, #24
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7fd ffe8 	bl	8009a18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba4c:	e01f      	b.n	800ba8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba4e:	4b21      	ldr	r3, [pc, #132]	@ (800bad4 <UART_SetConfig+0x904>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f003 0320 	and.w	r3, r3, #32
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d009      	beq.n	800ba6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba5a:	4b1e      	ldr	r3, [pc, #120]	@ (800bad4 <UART_SetConfig+0x904>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	08db      	lsrs	r3, r3, #3
 800ba60:	f003 0303 	and.w	r3, r3, #3
 800ba64:	4a1d      	ldr	r2, [pc, #116]	@ (800badc <UART_SetConfig+0x90c>)
 800ba66:	fa22 f303 	lsr.w	r3, r2, r3
 800ba6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba6c:	e00f      	b.n	800ba8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ba6e:	4b1b      	ldr	r3, [pc, #108]	@ (800badc <UART_SetConfig+0x90c>)
 800ba70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba72:	e00c      	b.n	800ba8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba74:	4b1a      	ldr	r3, [pc, #104]	@ (800bae0 <UART_SetConfig+0x910>)
 800ba76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba78:	e009      	b.n	800ba8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba80:	e005      	b.n	800ba8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ba82:	2300      	movs	r3, #0
 800ba84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ba86:	2301      	movs	r3, #1
 800ba88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ba8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ba8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	f000 81ee 	beq.w	800be72 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba9a:	4a12      	ldr	r2, [pc, #72]	@ (800bae4 <UART_SetConfig+0x914>)
 800ba9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800baa0:	461a      	mov	r2, r3
 800baa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baa4:	fbb3 f3f2 	udiv	r3, r3, r2
 800baa8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	685a      	ldr	r2, [r3, #4]
 800baae:	4613      	mov	r3, r2
 800bab0:	005b      	lsls	r3, r3, #1
 800bab2:	4413      	add	r3, r2
 800bab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d305      	bcc.n	800bac6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bac0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d910      	bls.n	800bae8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800bac6:	2301      	movs	r3, #1
 800bac8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bacc:	e1d1      	b.n	800be72 <UART_SetConfig+0xca2>
 800bace:	bf00      	nop
 800bad0:	40011c00 	.word	0x40011c00
 800bad4:	58024400 	.word	0x58024400
 800bad8:	58000c00 	.word	0x58000c00
 800badc:	03d09000 	.word	0x03d09000
 800bae0:	003d0900 	.word	0x003d0900
 800bae4:	0800c578 	.word	0x0800c578
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baea:	2200      	movs	r2, #0
 800baec:	60bb      	str	r3, [r7, #8]
 800baee:	60fa      	str	r2, [r7, #12]
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baf4:	4ac0      	ldr	r2, [pc, #768]	@ (800bdf8 <UART_SetConfig+0xc28>)
 800baf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	2200      	movs	r2, #0
 800bafe:	603b      	str	r3, [r7, #0]
 800bb00:	607a      	str	r2, [r7, #4]
 800bb02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bb0a:	f7f4 fbff 	bl	800030c <__aeabi_uldivmod>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	460b      	mov	r3, r1
 800bb12:	4610      	mov	r0, r2
 800bb14:	4619      	mov	r1, r3
 800bb16:	f04f 0200 	mov.w	r2, #0
 800bb1a:	f04f 0300 	mov.w	r3, #0
 800bb1e:	020b      	lsls	r3, r1, #8
 800bb20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bb24:	0202      	lsls	r2, r0, #8
 800bb26:	6979      	ldr	r1, [r7, #20]
 800bb28:	6849      	ldr	r1, [r1, #4]
 800bb2a:	0849      	lsrs	r1, r1, #1
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	460c      	mov	r4, r1
 800bb30:	4605      	mov	r5, r0
 800bb32:	eb12 0804 	adds.w	r8, r2, r4
 800bb36:	eb43 0905 	adc.w	r9, r3, r5
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	469a      	mov	sl, r3
 800bb42:	4693      	mov	fp, r2
 800bb44:	4652      	mov	r2, sl
 800bb46:	465b      	mov	r3, fp
 800bb48:	4640      	mov	r0, r8
 800bb4a:	4649      	mov	r1, r9
 800bb4c:	f7f4 fbde 	bl	800030c <__aeabi_uldivmod>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4613      	mov	r3, r2
 800bb56:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bb58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bb5e:	d308      	bcc.n	800bb72 <UART_SetConfig+0x9a2>
 800bb60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb66:	d204      	bcs.n	800bb72 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb6e:	60da      	str	r2, [r3, #12]
 800bb70:	e17f      	b.n	800be72 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800bb72:	2301      	movs	r3, #1
 800bb74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bb78:	e17b      	b.n	800be72 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	69db      	ldr	r3, [r3, #28]
 800bb7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb82:	f040 80bd 	bne.w	800bd00 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800bb86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bb8a:	2b20      	cmp	r3, #32
 800bb8c:	dc48      	bgt.n	800bc20 <UART_SetConfig+0xa50>
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	db7b      	blt.n	800bc8a <UART_SetConfig+0xaba>
 800bb92:	2b20      	cmp	r3, #32
 800bb94:	d879      	bhi.n	800bc8a <UART_SetConfig+0xaba>
 800bb96:	a201      	add	r2, pc, #4	@ (adr r2, 800bb9c <UART_SetConfig+0x9cc>)
 800bb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb9c:	0800bc27 	.word	0x0800bc27
 800bba0:	0800bc2f 	.word	0x0800bc2f
 800bba4:	0800bc8b 	.word	0x0800bc8b
 800bba8:	0800bc8b 	.word	0x0800bc8b
 800bbac:	0800bc37 	.word	0x0800bc37
 800bbb0:	0800bc8b 	.word	0x0800bc8b
 800bbb4:	0800bc8b 	.word	0x0800bc8b
 800bbb8:	0800bc8b 	.word	0x0800bc8b
 800bbbc:	0800bc47 	.word	0x0800bc47
 800bbc0:	0800bc8b 	.word	0x0800bc8b
 800bbc4:	0800bc8b 	.word	0x0800bc8b
 800bbc8:	0800bc8b 	.word	0x0800bc8b
 800bbcc:	0800bc8b 	.word	0x0800bc8b
 800bbd0:	0800bc8b 	.word	0x0800bc8b
 800bbd4:	0800bc8b 	.word	0x0800bc8b
 800bbd8:	0800bc8b 	.word	0x0800bc8b
 800bbdc:	0800bc57 	.word	0x0800bc57
 800bbe0:	0800bc8b 	.word	0x0800bc8b
 800bbe4:	0800bc8b 	.word	0x0800bc8b
 800bbe8:	0800bc8b 	.word	0x0800bc8b
 800bbec:	0800bc8b 	.word	0x0800bc8b
 800bbf0:	0800bc8b 	.word	0x0800bc8b
 800bbf4:	0800bc8b 	.word	0x0800bc8b
 800bbf8:	0800bc8b 	.word	0x0800bc8b
 800bbfc:	0800bc8b 	.word	0x0800bc8b
 800bc00:	0800bc8b 	.word	0x0800bc8b
 800bc04:	0800bc8b 	.word	0x0800bc8b
 800bc08:	0800bc8b 	.word	0x0800bc8b
 800bc0c:	0800bc8b 	.word	0x0800bc8b
 800bc10:	0800bc8b 	.word	0x0800bc8b
 800bc14:	0800bc8b 	.word	0x0800bc8b
 800bc18:	0800bc8b 	.word	0x0800bc8b
 800bc1c:	0800bc7d 	.word	0x0800bc7d
 800bc20:	2b40      	cmp	r3, #64	@ 0x40
 800bc22:	d02e      	beq.n	800bc82 <UART_SetConfig+0xab2>
 800bc24:	e031      	b.n	800bc8a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc26:	f7fb feef 	bl	8007a08 <HAL_RCC_GetPCLK1Freq>
 800bc2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc2c:	e033      	b.n	800bc96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc2e:	f7fb ff01 	bl	8007a34 <HAL_RCC_GetPCLK2Freq>
 800bc32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc34:	e02f      	b.n	800bc96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7fd fd98 	bl	8009770 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc44:	e027      	b.n	800bc96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc46:	f107 0318 	add.w	r3, r7, #24
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7fd fee4 	bl	8009a18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc54:	e01f      	b.n	800bc96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc56:	4b69      	ldr	r3, [pc, #420]	@ (800bdfc <UART_SetConfig+0xc2c>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f003 0320 	and.w	r3, r3, #32
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d009      	beq.n	800bc76 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc62:	4b66      	ldr	r3, [pc, #408]	@ (800bdfc <UART_SetConfig+0xc2c>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	08db      	lsrs	r3, r3, #3
 800bc68:	f003 0303 	and.w	r3, r3, #3
 800bc6c:	4a64      	ldr	r2, [pc, #400]	@ (800be00 <UART_SetConfig+0xc30>)
 800bc6e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc74:	e00f      	b.n	800bc96 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800bc76:	4b62      	ldr	r3, [pc, #392]	@ (800be00 <UART_SetConfig+0xc30>)
 800bc78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc7a:	e00c      	b.n	800bc96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc7c:	4b61      	ldr	r3, [pc, #388]	@ (800be04 <UART_SetConfig+0xc34>)
 800bc7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc80:	e009      	b.n	800bc96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc88:	e005      	b.n	800bc96 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bc94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	f000 80ea 	beq.w	800be72 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bca2:	4a55      	ldr	r2, [pc, #340]	@ (800bdf8 <UART_SetConfig+0xc28>)
 800bca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bca8:	461a      	mov	r2, r3
 800bcaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcac:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcb0:	005a      	lsls	r2, r3, #1
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	085b      	lsrs	r3, r3, #1
 800bcb8:	441a      	add	r2, r3
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc6:	2b0f      	cmp	r3, #15
 800bcc8:	d916      	bls.n	800bcf8 <UART_SetConfig+0xb28>
 800bcca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcd0:	d212      	bcs.n	800bcf8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bcd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	f023 030f 	bic.w	r3, r3, #15
 800bcda:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bcdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcde:	085b      	lsrs	r3, r3, #1
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	f003 0307 	and.w	r3, r3, #7
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bcea:	4313      	orrs	r3, r2
 800bcec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bcf4:	60da      	str	r2, [r3, #12]
 800bcf6:	e0bc      	b.n	800be72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bcfe:	e0b8      	b.n	800be72 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd00:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bd04:	2b20      	cmp	r3, #32
 800bd06:	dc4b      	bgt.n	800bda0 <UART_SetConfig+0xbd0>
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	f2c0 8087 	blt.w	800be1c <UART_SetConfig+0xc4c>
 800bd0e:	2b20      	cmp	r3, #32
 800bd10:	f200 8084 	bhi.w	800be1c <UART_SetConfig+0xc4c>
 800bd14:	a201      	add	r2, pc, #4	@ (adr r2, 800bd1c <UART_SetConfig+0xb4c>)
 800bd16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd1a:	bf00      	nop
 800bd1c:	0800bda7 	.word	0x0800bda7
 800bd20:	0800bdaf 	.word	0x0800bdaf
 800bd24:	0800be1d 	.word	0x0800be1d
 800bd28:	0800be1d 	.word	0x0800be1d
 800bd2c:	0800bdb7 	.word	0x0800bdb7
 800bd30:	0800be1d 	.word	0x0800be1d
 800bd34:	0800be1d 	.word	0x0800be1d
 800bd38:	0800be1d 	.word	0x0800be1d
 800bd3c:	0800bdc7 	.word	0x0800bdc7
 800bd40:	0800be1d 	.word	0x0800be1d
 800bd44:	0800be1d 	.word	0x0800be1d
 800bd48:	0800be1d 	.word	0x0800be1d
 800bd4c:	0800be1d 	.word	0x0800be1d
 800bd50:	0800be1d 	.word	0x0800be1d
 800bd54:	0800be1d 	.word	0x0800be1d
 800bd58:	0800be1d 	.word	0x0800be1d
 800bd5c:	0800bdd7 	.word	0x0800bdd7
 800bd60:	0800be1d 	.word	0x0800be1d
 800bd64:	0800be1d 	.word	0x0800be1d
 800bd68:	0800be1d 	.word	0x0800be1d
 800bd6c:	0800be1d 	.word	0x0800be1d
 800bd70:	0800be1d 	.word	0x0800be1d
 800bd74:	0800be1d 	.word	0x0800be1d
 800bd78:	0800be1d 	.word	0x0800be1d
 800bd7c:	0800be1d 	.word	0x0800be1d
 800bd80:	0800be1d 	.word	0x0800be1d
 800bd84:	0800be1d 	.word	0x0800be1d
 800bd88:	0800be1d 	.word	0x0800be1d
 800bd8c:	0800be1d 	.word	0x0800be1d
 800bd90:	0800be1d 	.word	0x0800be1d
 800bd94:	0800be1d 	.word	0x0800be1d
 800bd98:	0800be1d 	.word	0x0800be1d
 800bd9c:	0800be0f 	.word	0x0800be0f
 800bda0:	2b40      	cmp	r3, #64	@ 0x40
 800bda2:	d037      	beq.n	800be14 <UART_SetConfig+0xc44>
 800bda4:	e03a      	b.n	800be1c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bda6:	f7fb fe2f 	bl	8007a08 <HAL_RCC_GetPCLK1Freq>
 800bdaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bdac:	e03c      	b.n	800be28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bdae:	f7fb fe41 	bl	8007a34 <HAL_RCC_GetPCLK2Freq>
 800bdb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bdb4:	e038      	b.n	800be28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7fd fcd8 	bl	8009770 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bdc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdc4:	e030      	b.n	800be28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdc6:	f107 0318 	add.w	r3, r7, #24
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fd fe24 	bl	8009a18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdd4:	e028      	b.n	800be28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bdd6:	4b09      	ldr	r3, [pc, #36]	@ (800bdfc <UART_SetConfig+0xc2c>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f003 0320 	and.w	r3, r3, #32
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d012      	beq.n	800be08 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bde2:	4b06      	ldr	r3, [pc, #24]	@ (800bdfc <UART_SetConfig+0xc2c>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	08db      	lsrs	r3, r3, #3
 800bde8:	f003 0303 	and.w	r3, r3, #3
 800bdec:	4a04      	ldr	r2, [pc, #16]	@ (800be00 <UART_SetConfig+0xc30>)
 800bdee:	fa22 f303 	lsr.w	r3, r2, r3
 800bdf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bdf4:	e018      	b.n	800be28 <UART_SetConfig+0xc58>
 800bdf6:	bf00      	nop
 800bdf8:	0800c578 	.word	0x0800c578
 800bdfc:	58024400 	.word	0x58024400
 800be00:	03d09000 	.word	0x03d09000
 800be04:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800be08:	4b24      	ldr	r3, [pc, #144]	@ (800be9c <UART_SetConfig+0xccc>)
 800be0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be0c:	e00c      	b.n	800be28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800be0e:	4b24      	ldr	r3, [pc, #144]	@ (800bea0 <UART_SetConfig+0xcd0>)
 800be10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be12:	e009      	b.n	800be28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be1a:	e005      	b.n	800be28 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800be1c:	2300      	movs	r3, #0
 800be1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800be20:	2301      	movs	r3, #1
 800be22:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800be26:	bf00      	nop
    }

    if (pclk != 0U)
 800be28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d021      	beq.n	800be72 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be32:	4a1c      	ldr	r2, [pc, #112]	@ (800bea4 <UART_SetConfig+0xcd4>)
 800be34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be38:	461a      	mov	r2, r3
 800be3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be3c:	fbb3 f2f2 	udiv	r2, r3, r2
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	085b      	lsrs	r3, r3, #1
 800be46:	441a      	add	r2, r3
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be50:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be54:	2b0f      	cmp	r3, #15
 800be56:	d909      	bls.n	800be6c <UART_SetConfig+0xc9c>
 800be58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be5e:	d205      	bcs.n	800be6c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800be60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be62:	b29a      	uxth	r2, r3
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	60da      	str	r2, [r3, #12]
 800be6a:	e002      	b.n	800be72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800be6c:	2301      	movs	r3, #1
 800be6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	2201      	movs	r2, #1
 800be76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	2201      	movs	r2, #1
 800be7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	2200      	movs	r2, #0
 800be86:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	2200      	movs	r2, #0
 800be8c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800be8e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800be92:	4618      	mov	r0, r3
 800be94:	3748      	adds	r7, #72	@ 0x48
 800be96:	46bd      	mov	sp, r7
 800be98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be9c:	03d09000 	.word	0x03d09000
 800bea0:	003d0900 	.word	0x003d0900
 800bea4:	0800c578 	.word	0x0800c578

0800bea8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b083      	sub	sp, #12
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beb4:	f003 0308 	and.w	r3, r3, #8
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00a      	beq.n	800bed2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	430a      	orrs	r2, r1
 800bed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bed6:	f003 0301 	and.w	r3, r3, #1
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d00a      	beq.n	800bef4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	430a      	orrs	r2, r1
 800bef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bef8:	f003 0302 	and.w	r3, r3, #2
 800befc:	2b00      	cmp	r3, #0
 800befe:	d00a      	beq.n	800bf16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	430a      	orrs	r2, r1
 800bf14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf1a:	f003 0304 	and.w	r3, r3, #4
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00a      	beq.n	800bf38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	430a      	orrs	r2, r1
 800bf36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf3c:	f003 0310 	and.w	r3, r3, #16
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d00a      	beq.n	800bf5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	430a      	orrs	r2, r1
 800bf58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf5e:	f003 0320 	and.w	r3, r3, #32
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00a      	beq.n	800bf7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	689b      	ldr	r3, [r3, #8]
 800bf6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	430a      	orrs	r2, r1
 800bf7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d01a      	beq.n	800bfbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	430a      	orrs	r2, r1
 800bf9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bfa6:	d10a      	bne.n	800bfbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	430a      	orrs	r2, r1
 800bfbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00a      	beq.n	800bfe0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	430a      	orrs	r2, r1
 800bfde:	605a      	str	r2, [r3, #4]
  }
}
 800bfe0:	bf00      	nop
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b098      	sub	sp, #96	@ 0x60
 800bff0:	af02      	add	r7, sp, #8
 800bff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bffc:	f7f5 fef0 	bl	8001de0 <HAL_GetTick>
 800c000:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f003 0308 	and.w	r3, r3, #8
 800c00c:	2b08      	cmp	r3, #8
 800c00e:	d12f      	bne.n	800c070 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c010:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c014:	9300      	str	r3, [sp, #0]
 800c016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c018:	2200      	movs	r2, #0
 800c01a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 f88e 	bl	800c140 <UART_WaitOnFlagUntilTimeout>
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d022      	beq.n	800c070 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c032:	e853 3f00 	ldrex	r3, [r3]
 800c036:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c03a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c03e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	461a      	mov	r2, r3
 800c046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c048:	647b      	str	r3, [r7, #68]	@ 0x44
 800c04a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c04e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c050:	e841 2300 	strex	r3, r2, [r1]
 800c054:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1e6      	bne.n	800c02a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2220      	movs	r2, #32
 800c060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c06c:	2303      	movs	r3, #3
 800c06e:	e063      	b.n	800c138 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f003 0304 	and.w	r3, r3, #4
 800c07a:	2b04      	cmp	r3, #4
 800c07c:	d149      	bne.n	800c112 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c07e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c086:	2200      	movs	r2, #0
 800c088:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 f857 	bl	800c140 <UART_WaitOnFlagUntilTimeout>
 800c092:	4603      	mov	r3, r0
 800c094:	2b00      	cmp	r3, #0
 800c096:	d03c      	beq.n	800c112 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a0:	e853 3f00 	ldrex	r3, [r3]
 800c0a4:	623b      	str	r3, [r7, #32]
   return(result);
 800c0a6:	6a3b      	ldr	r3, [r7, #32]
 800c0a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c0bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0be:	e841 2300 	strex	r3, r2, [r1]
 800c0c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d1e6      	bne.n	800c098 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	3308      	adds	r3, #8
 800c0d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	e853 3f00 	ldrex	r3, [r3]
 800c0d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f023 0301 	bic.w	r3, r3, #1
 800c0e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	3308      	adds	r3, #8
 800c0e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0ea:	61fa      	str	r2, [r7, #28]
 800c0ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ee:	69b9      	ldr	r1, [r7, #24]
 800c0f0:	69fa      	ldr	r2, [r7, #28]
 800c0f2:	e841 2300 	strex	r3, r2, [r1]
 800c0f6:	617b      	str	r3, [r7, #20]
   return(result);
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d1e5      	bne.n	800c0ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2220      	movs	r2, #32
 800c102:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2200      	movs	r2, #0
 800c10a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c10e:	2303      	movs	r3, #3
 800c110:	e012      	b.n	800c138 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2220      	movs	r2, #32
 800c116:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2220      	movs	r2, #32
 800c11e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2200      	movs	r2, #0
 800c126:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c136:	2300      	movs	r3, #0
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3758      	adds	r7, #88	@ 0x58
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	603b      	str	r3, [r7, #0]
 800c14c:	4613      	mov	r3, r2
 800c14e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c150:	e04f      	b.n	800c1f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c158:	d04b      	beq.n	800c1f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c15a:	f7f5 fe41 	bl	8001de0 <HAL_GetTick>
 800c15e:	4602      	mov	r2, r0
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	1ad3      	subs	r3, r2, r3
 800c164:	69ba      	ldr	r2, [r7, #24]
 800c166:	429a      	cmp	r2, r3
 800c168:	d302      	bcc.n	800c170 <UART_WaitOnFlagUntilTimeout+0x30>
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d101      	bne.n	800c174 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c170:	2303      	movs	r3, #3
 800c172:	e04e      	b.n	800c212 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f003 0304 	and.w	r3, r3, #4
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d037      	beq.n	800c1f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	2b80      	cmp	r3, #128	@ 0x80
 800c186:	d034      	beq.n	800c1f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	2b40      	cmp	r3, #64	@ 0x40
 800c18c:	d031      	beq.n	800c1f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	69db      	ldr	r3, [r3, #28]
 800c194:	f003 0308 	and.w	r3, r3, #8
 800c198:	2b08      	cmp	r3, #8
 800c19a:	d110      	bne.n	800c1be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	2208      	movs	r2, #8
 800c1a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1a4:	68f8      	ldr	r0, [r7, #12]
 800c1a6:	f000 f839 	bl	800c21c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2208      	movs	r2, #8
 800c1ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	e029      	b.n	800c212 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	69db      	ldr	r3, [r3, #28]
 800c1c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c1c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1cc:	d111      	bne.n	800c1f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c1d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1d8:	68f8      	ldr	r0, [r7, #12]
 800c1da:	f000 f81f 	bl	800c21c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2220      	movs	r2, #32
 800c1e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c1ee:	2303      	movs	r3, #3
 800c1f0:	e00f      	b.n	800c212 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	69da      	ldr	r2, [r3, #28]
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	4013      	ands	r3, r2
 800c1fc:	68ba      	ldr	r2, [r7, #8]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	bf0c      	ite	eq
 800c202:	2301      	moveq	r3, #1
 800c204:	2300      	movne	r3, #0
 800c206:	b2db      	uxtb	r3, r3
 800c208:	461a      	mov	r2, r3
 800c20a:	79fb      	ldrb	r3, [r7, #7]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d0a0      	beq.n	800c152 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c210:	2300      	movs	r3, #0
}
 800c212:	4618      	mov	r0, r3
 800c214:	3710      	adds	r7, #16
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
	...

0800c21c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b095      	sub	sp, #84	@ 0x54
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c22a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c22c:	e853 3f00 	ldrex	r3, [r3]
 800c230:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c234:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c238:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	461a      	mov	r2, r3
 800c240:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c242:	643b      	str	r3, [r7, #64]	@ 0x40
 800c244:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c246:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c248:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c24a:	e841 2300 	strex	r3, r2, [r1]
 800c24e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c252:	2b00      	cmp	r3, #0
 800c254:	d1e6      	bne.n	800c224 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	3308      	adds	r3, #8
 800c25c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c25e:	6a3b      	ldr	r3, [r7, #32]
 800c260:	e853 3f00 	ldrex	r3, [r3]
 800c264:	61fb      	str	r3, [r7, #28]
   return(result);
 800c266:	69fa      	ldr	r2, [r7, #28]
 800c268:	4b1e      	ldr	r3, [pc, #120]	@ (800c2e4 <UART_EndRxTransfer+0xc8>)
 800c26a:	4013      	ands	r3, r2
 800c26c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	3308      	adds	r3, #8
 800c274:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c276:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c278:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c27a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c27c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c27e:	e841 2300 	strex	r3, r2, [r1]
 800c282:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c286:	2b00      	cmp	r3, #0
 800c288:	d1e5      	bne.n	800c256 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c28e:	2b01      	cmp	r3, #1
 800c290:	d118      	bne.n	800c2c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	e853 3f00 	ldrex	r3, [r3]
 800c29e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	f023 0310 	bic.w	r3, r3, #16
 800c2a6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2b0:	61bb      	str	r3, [r7, #24]
 800c2b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b4:	6979      	ldr	r1, [r7, #20]
 800c2b6:	69ba      	ldr	r2, [r7, #24]
 800c2b8:	e841 2300 	strex	r3, r2, [r1]
 800c2bc:	613b      	str	r3, [r7, #16]
   return(result);
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d1e6      	bne.n	800c292 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2220      	movs	r2, #32
 800c2c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c2d8:	bf00      	nop
 800c2da:	3754      	adds	r7, #84	@ 0x54
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr
 800c2e4:	effffffe 	.word	0xeffffffe

0800c2e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d101      	bne.n	800c2fe <HAL_UARTEx_DisableFifoMode+0x16>
 800c2fa:	2302      	movs	r3, #2
 800c2fc:	e027      	b.n	800c34e <HAL_UARTEx_DisableFifoMode+0x66>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2201      	movs	r2, #1
 800c302:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2224      	movs	r2, #36	@ 0x24
 800c30a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	681a      	ldr	r2, [r3, #0]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f022 0201 	bic.w	r2, r2, #1
 800c324:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c32c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2200      	movs	r2, #0
 800c332:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	68fa      	ldr	r2, [r7, #12]
 800c33a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2220      	movs	r2, #32
 800c340:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2200      	movs	r2, #0
 800c348:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c34c:	2300      	movs	r3, #0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3714      	adds	r7, #20
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr

0800c35a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c35a:	b580      	push	{r7, lr}
 800c35c:	b084      	sub	sp, #16
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
 800c362:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d101      	bne.n	800c372 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c36e:	2302      	movs	r3, #2
 800c370:	e02d      	b.n	800c3ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2201      	movs	r2, #1
 800c376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2224      	movs	r2, #36	@ 0x24
 800c37e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	681a      	ldr	r2, [r3, #0]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f022 0201 	bic.w	r2, r2, #1
 800c398:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	683a      	ldr	r2, [r7, #0]
 800c3aa:	430a      	orrs	r2, r1
 800c3ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 f850 	bl	800c454 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2220      	movs	r2, #32
 800c3c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3710      	adds	r7, #16
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}

0800c3d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c3d6:	b580      	push	{r7, lr}
 800c3d8:	b084      	sub	sp, #16
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	6078      	str	r0, [r7, #4]
 800c3de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	d101      	bne.n	800c3ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c3ea:	2302      	movs	r3, #2
 800c3ec:	e02d      	b.n	800c44a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2224      	movs	r2, #36	@ 0x24
 800c3fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f022 0201 	bic.w	r2, r2, #1
 800c414:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	683a      	ldr	r2, [r7, #0]
 800c426:	430a      	orrs	r2, r1
 800c428:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 f812 	bl	800c454 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	68fa      	ldr	r2, [r7, #12]
 800c436:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2220      	movs	r2, #32
 800c43c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c448:	2300      	movs	r3, #0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3710      	adds	r7, #16
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
	...

0800c454 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c460:	2b00      	cmp	r3, #0
 800c462:	d108      	bne.n	800c476 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2201      	movs	r2, #1
 800c468:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2201      	movs	r2, #1
 800c470:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c474:	e031      	b.n	800c4da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c476:	2310      	movs	r3, #16
 800c478:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c47a:	2310      	movs	r3, #16
 800c47c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	689b      	ldr	r3, [r3, #8]
 800c484:	0e5b      	lsrs	r3, r3, #25
 800c486:	b2db      	uxtb	r3, r3
 800c488:	f003 0307 	and.w	r3, r3, #7
 800c48c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	689b      	ldr	r3, [r3, #8]
 800c494:	0f5b      	lsrs	r3, r3, #29
 800c496:	b2db      	uxtb	r3, r3
 800c498:	f003 0307 	and.w	r3, r3, #7
 800c49c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c49e:	7bbb      	ldrb	r3, [r7, #14]
 800c4a0:	7b3a      	ldrb	r2, [r7, #12]
 800c4a2:	4911      	ldr	r1, [pc, #68]	@ (800c4e8 <UARTEx_SetNbDataToProcess+0x94>)
 800c4a4:	5c8a      	ldrb	r2, [r1, r2]
 800c4a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c4aa:	7b3a      	ldrb	r2, [r7, #12]
 800c4ac:	490f      	ldr	r1, [pc, #60]	@ (800c4ec <UARTEx_SetNbDataToProcess+0x98>)
 800c4ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4b4:	b29a      	uxth	r2, r3
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c4bc:	7bfb      	ldrb	r3, [r7, #15]
 800c4be:	7b7a      	ldrb	r2, [r7, #13]
 800c4c0:	4909      	ldr	r1, [pc, #36]	@ (800c4e8 <UARTEx_SetNbDataToProcess+0x94>)
 800c4c2:	5c8a      	ldrb	r2, [r1, r2]
 800c4c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c4c8:	7b7a      	ldrb	r2, [r7, #13]
 800c4ca:	4908      	ldr	r1, [pc, #32]	@ (800c4ec <UARTEx_SetNbDataToProcess+0x98>)
 800c4cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c4ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c4da:	bf00      	nop
 800c4dc:	3714      	adds	r7, #20
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr
 800c4e6:	bf00      	nop
 800c4e8:	0800c590 	.word	0x0800c590
 800c4ec:	0800c598 	.word	0x0800c598

0800c4f0 <memset>:
 800c4f0:	4402      	add	r2, r0
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d100      	bne.n	800c4fa <memset+0xa>
 800c4f8:	4770      	bx	lr
 800c4fa:	f803 1b01 	strb.w	r1, [r3], #1
 800c4fe:	e7f9      	b.n	800c4f4 <memset+0x4>

0800c500 <__libc_init_array>:
 800c500:	b570      	push	{r4, r5, r6, lr}
 800c502:	4d0d      	ldr	r5, [pc, #52]	@ (800c538 <__libc_init_array+0x38>)
 800c504:	4c0d      	ldr	r4, [pc, #52]	@ (800c53c <__libc_init_array+0x3c>)
 800c506:	1b64      	subs	r4, r4, r5
 800c508:	10a4      	asrs	r4, r4, #2
 800c50a:	2600      	movs	r6, #0
 800c50c:	42a6      	cmp	r6, r4
 800c50e:	d109      	bne.n	800c524 <__libc_init_array+0x24>
 800c510:	4d0b      	ldr	r5, [pc, #44]	@ (800c540 <__libc_init_array+0x40>)
 800c512:	4c0c      	ldr	r4, [pc, #48]	@ (800c544 <__libc_init_array+0x44>)
 800c514:	f000 f818 	bl	800c548 <_init>
 800c518:	1b64      	subs	r4, r4, r5
 800c51a:	10a4      	asrs	r4, r4, #2
 800c51c:	2600      	movs	r6, #0
 800c51e:	42a6      	cmp	r6, r4
 800c520:	d105      	bne.n	800c52e <__libc_init_array+0x2e>
 800c522:	bd70      	pop	{r4, r5, r6, pc}
 800c524:	f855 3b04 	ldr.w	r3, [r5], #4
 800c528:	4798      	blx	r3
 800c52a:	3601      	adds	r6, #1
 800c52c:	e7ee      	b.n	800c50c <__libc_init_array+0xc>
 800c52e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c532:	4798      	blx	r3
 800c534:	3601      	adds	r6, #1
 800c536:	e7f2      	b.n	800c51e <__libc_init_array+0x1e>
 800c538:	0800c5a8 	.word	0x0800c5a8
 800c53c:	0800c5a8 	.word	0x0800c5a8
 800c540:	0800c5a8 	.word	0x0800c5a8
 800c544:	0800c5ac 	.word	0x0800c5ac

0800c548 <_init>:
 800c548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54a:	bf00      	nop
 800c54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c54e:	bc08      	pop	{r3}
 800c550:	469e      	mov	lr, r3
 800c552:	4770      	bx	lr

0800c554 <_fini>:
 800c554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c556:	bf00      	nop
 800c558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c55a:	bc08      	pop	{r3}
 800c55c:	469e      	mov	lr, r3
 800c55e:	4770      	bx	lr
