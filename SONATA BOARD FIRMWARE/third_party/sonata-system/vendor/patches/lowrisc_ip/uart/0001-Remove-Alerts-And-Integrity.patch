diff --git a/rtl/uart.sv b/rtl/uart.sv
index f79ec4b..e2023bf 100644
--- a/rtl/uart.sv
+++ b/rtl/uart.sv
@@ -6,11 +6,7 @@
 
 `include "prim_assert.sv"
 
-module uart
-    import uart_reg_pkg::*;
-#(
-  parameter logic [NumAlerts-1:0] AlertAsyncOn = {NumAlerts{1'b1}}
-) (
+module uart import uart_reg_pkg::*; (
   input           clk_i,
   input           rst_ni,
 
@@ -18,10 +14,6 @@ module uart
   input  tlul_pkg::tl_h2d_t tl_i,
   output tlul_pkg::tl_d2h_t tl_o,
 
-  // Alerts
-  input  prim_alert_pkg::alert_rx_t [NumAlerts-1:0] alert_rx_i,
-  output prim_alert_pkg::alert_tx_t [NumAlerts-1:0] alert_tx_o,
-
   // Generic IO
   input           cio_rx_i,
   output logic    cio_tx_o,
@@ -39,7 +31,6 @@ module uart
   output logic    intr_rx_parity_err_o
 );
 
-  logic [NumAlerts-1:0] alert_test, alerts;
   uart_reg2hw_t reg2hw;
   uart_hw2reg_t hw2reg;
 
@@ -49,9 +40,7 @@ module uart
     .tl_i,
     .tl_o,
     .reg2hw,
-    .hw2reg,
-    // SEC_CM: BUS.INTEGRITY
-    .intg_err_o (alerts[0])
+    .hw2reg
   );
 
   uart_core uart_core (
@@ -74,28 +63,6 @@ module uart
     .intr_rx_parity_err_o
   );
 
-  // Alerts
-  assign alert_test = {
-    reg2hw.alert_test.q &
-    reg2hw.alert_test.qe
-  };
-
-  for (genvar i = 0; i < NumAlerts; i++) begin : gen_alert_tx
-    prim_alert_sender #(
-      .AsyncOn(AlertAsyncOn[i]),
-      .IsFatal(1'b1)
-    ) u_prim_alert_sender (
-      .clk_i,
-      .rst_ni,
-      .alert_test_i  ( alert_test[i] ),
-      .alert_req_i   ( alerts[0]     ),
-      .alert_ack_o   (               ),
-      .alert_state_o (               ),
-      .alert_rx_i    ( alert_rx_i[i] ),
-      .alert_tx_o    ( alert_tx_o[i] )
-    );
-  end
-
   // always enable the driving out of TX
   assign cio_tx_en_o = 1'b1;
 
@@ -103,9 +70,6 @@ module uart
   `ASSERT(TxEnIsOne_A, cio_tx_en_o === 1'b1)
   `ASSERT_KNOWN(TxKnown_A, cio_tx_o, clk_i, !rst_ni || !cio_tx_en_o)
 
-  // Assert Known for alerts
-  `ASSERT_KNOWN(AlertsKnown_A, alert_tx_o)
-
   // Assert Known for interrupts
   `ASSERT_KNOWN(TxWatermarkKnown_A, intr_tx_watermark_o)
   `ASSERT_KNOWN(TxEmptyKnown_A, intr_tx_empty_o)
@@ -116,7 +80,4 @@ module uart
   `ASSERT_KNOWN(RxBreakErrKnown_A, intr_rx_break_err_o)
   `ASSERT_KNOWN(RxTimeoutKnown_A, intr_rx_timeout_o)
   `ASSERT_KNOWN(RxParityErrKnown_A, intr_rx_parity_err_o)
-
-  // Alert assertions for reg_we onehot check
-  `ASSERT_PRIM_REG_WE_ONEHOT_ERROR_TRIGGER_ALERT(RegWeOnehotCheck_A, u_reg, alert_tx_o[0])
 endmodule
diff --git a/rtl/uart_reg_top.sv b/rtl/uart_reg_top.sv
index 6648443..70c8933 100644
--- a/rtl/uart_reg_top.sv
+++ b/rtl/uart_reg_top.sv
@@ -13,10 +13,7 @@ module uart_reg_top (
   output tlul_pkg::tl_d2h_t tl_o,
   // To HW
   output uart_reg_pkg::uart_reg2hw_t reg2hw, // Write
-  input  uart_reg_pkg::uart_hw2reg_t hw2reg, // Read
-
-  // Integrity check errors
-  output logic intg_err_o
+  input  uart_reg_pkg::uart_hw2reg_t hw2reg  // Read
 );
 
   import uart_reg_pkg::* ;
@@ -42,45 +39,11 @@ module uart_reg_top (
   tlul_pkg::tl_h2d_t tl_reg_h2d;
   tlul_pkg::tl_d2h_t tl_reg_d2h;
 
-
-  // incoming payload check
-  logic intg_err;
-  tlul_cmd_intg_chk u_chk (
-    .tl_i(tl_i),
-    .err_o(intg_err)
-  );
-
-  // also check for spurious write enables
-  logic reg_we_err;
-  logic [12:0] reg_we_check;
-  prim_reg_we_check #(
-    .OneHotWidth(13)
-  ) u_prim_reg_we_check (
-    .clk_i(clk_i),
-    .rst_ni(rst_ni),
-    .oh_i  (reg_we_check),
-    .en_i  (reg_we && !addrmiss),
-    .err_o (reg_we_err)
-  );
-
-  logic err_q;
-  always_ff @(posedge clk_i or negedge rst_ni) begin
-    if (!rst_ni) begin
-      err_q <= '0;
-    end else if (intg_err || reg_we_err) begin
-      err_q <= 1'b1;
-    end
-  end
-
-  // integrity error output is permanent and should be used for alert generation
-  // register errors are transactional
-  assign intg_err_o = err_q | intg_err | reg_we_err;
-
   // outgoing integrity generation
   tlul_pkg::tl_d2h_t tl_o_pre;
   tlul_rsp_intg_gen #(
-    .EnableRspIntgGen(1),
-    .EnableDataIntgGen(1)
+    .EnableRspIntgGen(0),
+    .EnableDataIntgGen(0)
   ) u_rsp_intg_gen (
     .tl_i(tl_o_pre),
     .tl_o(tl_o)
@@ -116,7 +79,7 @@ module uart_reg_top (
   // cdc oversampling signals
 
   assign reg_rdata = reg_rdata_next ;
-  assign reg_error = addrmiss | wr_err | intg_err;
+  assign reg_error = addrmiss | wr_err;
 
   // Define SW related signals
   // Format: <reg>_<field>_{wd|we|qs}
@@ -1699,24 +1662,6 @@ module uart_reg_top (
 
   assign timeout_ctrl_en_wd = reg_wdata[31];
 
-  // Assign write-enables to checker logic vector.
-  always_comb begin
-    reg_we_check = '0;
-    reg_we_check[0] = intr_state_we;
-    reg_we_check[1] = intr_enable_we;
-    reg_we_check[2] = intr_test_we;
-    reg_we_check[3] = alert_test_we;
-    reg_we_check[4] = ctrl_we;
-    reg_we_check[5] = 1'b0;
-    reg_we_check[6] = 1'b0;
-    reg_we_check[7] = wdata_we;
-    reg_we_check[8] = fifo_ctrl_we;
-    reg_we_check[9] = 1'b0;
-    reg_we_check[10] = ovrd_we;
-    reg_we_check[11] = 1'b0;
-    reg_we_check[12] = timeout_ctrl_we;
-  end
-
   // Read data return
   always_comb begin
     reg_rdata_next = '0;
