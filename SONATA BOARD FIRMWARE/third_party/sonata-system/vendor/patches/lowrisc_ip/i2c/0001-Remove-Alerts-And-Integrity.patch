diff --git a/rtl/i2c.sv b/rtl/i2c.sv
index 8fc5703..455e635 100644
--- a/rtl/i2c.sv
+++ b/rtl/i2c.sv
@@ -9,7 +9,6 @@
 module i2c
   import i2c_reg_pkg::*;
 #(
-  parameter logic [NumAlerts-1:0] AlertAsyncOn = {NumAlerts{1'b1}},
   parameter int unsigned InputDelayCycles = 0
 ) (
   input                               clk_i,
@@ -20,10 +19,6 @@ module i2c
   input  tlul_pkg::tl_h2d_t tl_i,
   output tlul_pkg::tl_d2h_t tl_o,
 
-  // Alerts
-  input  prim_alert_pkg::alert_rx_t [NumAlerts-1:0] alert_rx_i,
-  output prim_alert_pkg::alert_tx_t [NumAlerts-1:0] alert_tx_o,
-
   // Generic IO
   input                     cio_scl_i,
   output logic              cio_scl_o,
@@ -53,40 +48,15 @@ module i2c
   i2c_reg2hw_t reg2hw;
   i2c_hw2reg_t hw2reg;
 
-  logic [NumAlerts-1:0] alert_test, alerts;
-
   i2c_reg_top u_reg (
     .clk_i,
     .rst_ni,
     .tl_i,
     .tl_o,
     .reg2hw,
-    .hw2reg,
-    // SEC_CM: BUS.INTEGRITY
-    .intg_err_o(alerts[0])
+    .hw2reg
   );
 
-  assign alert_test = {
-    reg2hw.alert_test.q &
-    reg2hw.alert_test.qe
-  };
-
-  for (genvar i = 0; i < NumAlerts; i++) begin : gen_alert_tx
-    prim_alert_sender #(
-      .AsyncOn(AlertAsyncOn[i]),
-      .IsFatal(1'b1)
-    ) u_prim_alert_sender (
-      .clk_i,
-      .rst_ni,
-      .alert_test_i  ( alert_test[i] ),
-      .alert_req_i   ( alerts[0]     ),
-      .alert_ack_o   (               ),
-      .alert_state_o (               ),
-      .alert_rx_i    ( alert_rx_i[i] ),
-      .alert_tx_o    ( alert_tx_o[i] )
-    );
-  end
-
   logic scl_int;
   logic sda_int;
 
@@ -134,7 +104,6 @@ module i2c
 
   `ASSERT_KNOWN(TlDValidKnownO_A, tl_o.d_valid)
   `ASSERT_KNOWN(TlAReadyKnownO_A, tl_o.a_ready)
-  `ASSERT_KNOWN(AlertKnownO_A, alert_tx_o)
   `ASSERT_KNOWN(CioSclKnownO_A, cio_scl_o)
   `ASSERT_KNOWN(CioSclEnKnownO_A, cio_scl_en_o)
   `ASSERT_KNOWN(CioSdaKnownO_A, cio_sda_o)
@@ -154,7 +123,4 @@ module i2c
   `ASSERT_KNOWN(IntrAcqStretchKnownO_A, intr_acq_stretch_o)
   `ASSERT_KNOWN(IntrUnexpStopKnownO_A, intr_unexp_stop_o)
   `ASSERT_KNOWN(IntrHostTimeoutKnownO_A, intr_host_timeout_o)
-
-  // Alert assertions for reg_we onehot check
-  `ASSERT_PRIM_REG_WE_ONEHOT_ERROR_TRIGGER_ALERT(RegWeOnehotCheck_A, u_reg, alert_tx_o[0])
 endmodule
diff --git a/rtl/i2c_fifos.sv b/rtl/i2c_fifos.sv
index c104018..c363364 100644
--- a/rtl/i2c_fifos.sv
+++ b/rtl/i2c_fifos.sv
@@ -298,8 +298,7 @@ import i2c_reg_pkg::AcqFifoDepth;
     .rdata_o (ram_rdata),
     .rvalid_o(ram_rvalid),
     .rerror_o(/* unused */),
-    .cfg_i   (ram_cfg_i),
-    .alert_o (/* unused */)
+    .cfg_i   (ram_cfg_i)
   );
   assign {ram_write, ram_addr, ram_wdata} = ram_arb_oup_data;
 
diff --git a/rtl/i2c_reg_top.sv b/rtl/i2c_reg_top.sv
index 4de69b9..2ea7949 100644
--- a/rtl/i2c_reg_top.sv
+++ b/rtl/i2c_reg_top.sv
@@ -13,10 +13,7 @@ module i2c_reg_top (
   output tlul_pkg::tl_d2h_t tl_o,
   // To HW
   output i2c_reg_pkg::i2c_reg2hw_t reg2hw, // Write
-  input  i2c_reg_pkg::i2c_hw2reg_t hw2reg, // Read
-
-  // Integrity check errors
-  output logic intg_err_o
+  input  i2c_reg_pkg::i2c_hw2reg_t hw2reg  // Read
 );
 
   import i2c_reg_pkg::* ;
@@ -42,45 +39,11 @@ module i2c_reg_top (
   tlul_pkg::tl_h2d_t tl_reg_h2d;
   tlul_pkg::tl_d2h_t tl_reg_d2h;
 
-
-  // incoming payload check
-  logic intg_err;
-  tlul_cmd_intg_chk u_chk (
-    .tl_i(tl_i),
-    .err_o(intg_err)
-  );
-
-  // also check for spurious write enables
-  logic reg_we_err;
-  logic [31:0] reg_we_check;
-  prim_reg_we_check #(
-    .OneHotWidth(32)
-  ) u_prim_reg_we_check (
-    .clk_i(clk_i),
-    .rst_ni(rst_ni),
-    .oh_i  (reg_we_check),
-    .en_i  (reg_we && !addrmiss),
-    .err_o (reg_we_err)
-  );
-
-  logic err_q;
-  always_ff @(posedge clk_i or negedge rst_ni) begin
-    if (!rst_ni) begin
-      err_q <= '0;
-    end else if (intg_err || reg_we_err) begin
-      err_q <= 1'b1;
-    end
-  end
-
-  // integrity error output is permanent and should be used for alert generation
-  // register errors are transactional
-  assign intg_err_o = err_q | intg_err | reg_we_err;
-
   // outgoing integrity generation
   tlul_pkg::tl_d2h_t tl_o_pre;
   tlul_rsp_intg_gen #(
-    .EnableRspIntgGen(1),
-    .EnableDataIntgGen(1)
+    .EnableRspIntgGen(0),
+    .EnableDataIntgGen(0)
   ) u_rsp_intg_gen (
     .tl_i(tl_o_pre),
     .tl_o(tl_o)
@@ -116,7 +79,7 @@ module i2c_reg_top (
   // cdc oversampling signals
 
   assign reg_rdata = reg_rdata_next ;
-  assign reg_error = addrmiss | wr_err | intg_err;
+  assign reg_error = addrmiss | wr_err;
 
   // Define SW related signals
   // Format: <reg>_<field>_{wd|we|qs}
@@ -3687,43 +3650,6 @@ module i2c_reg_top (
 
   assign target_events_arbitration_lost_wd = reg_wdata[2];
 
-  // Assign write-enables to checker logic vector.
-  always_comb begin
-    reg_we_check = '0;
-    reg_we_check[0] = intr_state_we;
-    reg_we_check[1] = intr_enable_we;
-    reg_we_check[2] = intr_test_we;
-    reg_we_check[3] = alert_test_we;
-    reg_we_check[4] = ctrl_we;
-    reg_we_check[5] = 1'b0;
-    reg_we_check[6] = 1'b0;
-    reg_we_check[7] = fdata_we;
-    reg_we_check[8] = fifo_ctrl_we;
-    reg_we_check[9] = host_fifo_config_we;
-    reg_we_check[10] = target_fifo_config_we;
-    reg_we_check[11] = 1'b0;
-    reg_we_check[12] = 1'b0;
-    reg_we_check[13] = ovrd_we;
-    reg_we_check[14] = 1'b0;
-    reg_we_check[15] = timing0_we;
-    reg_we_check[16] = timing1_we;
-    reg_we_check[17] = timing2_we;
-    reg_we_check[18] = timing3_we;
-    reg_we_check[19] = timing4_we;
-    reg_we_check[20] = timeout_ctrl_we;
-    reg_we_check[21] = target_id_we;
-    reg_we_check[22] = 1'b0;
-    reg_we_check[23] = txdata_we;
-    reg_we_check[24] = host_timeout_ctrl_we;
-    reg_we_check[25] = target_timeout_ctrl_we;
-    reg_we_check[26] = 1'b0;
-    reg_we_check[27] = target_ack_ctrl_we;
-    reg_we_check[28] = 1'b0;
-    reg_we_check[29] = host_nack_handler_timeout_we;
-    reg_we_check[30] = controller_events_we;
-    reg_we_check[31] = target_events_we;
-  end
-
   // Read data return
   always_comb begin
     reg_rdata_next = '0;
