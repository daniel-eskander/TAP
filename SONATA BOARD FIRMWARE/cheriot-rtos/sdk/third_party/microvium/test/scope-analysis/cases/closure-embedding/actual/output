[this module slot] 'thisModule'; [global slot] 'thisModule'

module with entry 'moduleEntry' {
  [no closure scope]; [0 var declarations]

  bindings {
    function 'case1' # binding_1 @ local[0];
    function 'case2' # binding_2 @ local[1];
    function 'case3' # binding_3 @ local[2];
    function 'case4' # binding_4 @ local[3];
    function 'case5' # binding_5 @ local[4]
  }

  No references

  prologue {
    func 'case1' -> local[0]
    func 'case2' -> local[1]
    func 'case3' -> local[2]
    func 'case4' -> local[3]
    func 'case5' -> local[4]
  }

  function case1 as 'case1' {
    [closure scope with 2 slots: embedded-closure:increment1, x]
    [0 var declarations]

    bindings { this '#this' # binding_6 @ arg[0] }

    No references

    prologue { ScopeNew(2) }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        writable let 'x' # binding_7 @ scoped[!1];
        function 'increment1' # binding_8 @ local[0];
        function 'decrement1' # binding_9 @ local[1]
      }

      prologue {
        func 'increment1' -> local[0] [embedded closure]
        func 'decrement1' -> local[1] [non-embedded closure]
      }

      epilogue { Pop(2) }

      No references

      embedded closure function increment1 as 'increment1' {
        [no closure scope]; [0 var declarations]

        bindings { this '#this' # binding_10 @ arg[0] }

        No references

        prologue {  }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            x @ binding_7 using relative slot index 1
          }
        }
      }

      closure function decrement1 as 'decrement1' {
        [no closure scope]; [0 var declarations]

        bindings { this '#this' # binding_11 @ arg[0] }

        No references

        prologue {  }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            x @ binding_7 using relative slot index 3
          }
        }
      }
    }
  }

  function case2 as 'case2' {
    [closure scope with 1 slots: x]; [0 var declarations]

    bindings { this '#this' # binding_12 @ arg[0] }

    No references

    prologue { ScopeNew(1) }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        writable let 'x' # binding_13 @ scoped[!0]
      }

      prologue {  }

      epilogue {  }

      No references

      block {
        sameInstanceCountAsParent: false; [no closure scope]

        bindings {
          writable let 'i' # binding_14 @ local[0]
        }

        prologue { new let -> local[0] }

        epilogue { Pop(1) }

        references { i @ binding_14; i @ binding_14 }

        block {
          sameInstanceCountAsParent: false
          [closure scope with 2 slots: embedded-closure:increment2, parent-reference]

          bindings {
            function 'increment2' # binding_15 @ local[1]
          }

          prologue {
            ScopePush(2)
            func 'increment2' -> local[1] [embedded closure]
          }

          epilogue { ScopePop; Pop(1) }

          No references

          embedded closure function increment2 as 'increment2' {
            [no closure scope]; [0 var declarations]

            bindings { this '#this' # binding_16 @ arg[0] }

            No references

            prologue {  }

            block {
              sameInstanceCountAsParent: true
              [no closure scope]

              bindings {  }

              prologue {  }

              epilogue {  }

              references {
                x @ binding_13 using relative slot index 2
              }
            }
          }
        }
      }
    }
  }

  function case3 as 'case3' {
    [closure scope with 1 slots: x]; [0 var declarations]

    bindings { this '#this' # binding_17 @ arg[0] }

    No references

    prologue { ScopeNew(1) }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings { let 'x' # binding_18 @ scoped[!0] }

      prologue {  }

      epilogue {  }

      No references

      block {
        sameInstanceCountAsParent: false
        [closure scope with 2 slots: i, parent-reference]

        bindings {
          writable let 'i' # binding_19 @ scoped[!0]
        }

        prologue { ScopePush(2) }

        epilogue { ScopePop }

        references {
          i @ binding_19 using relative slot index 0
          i @ binding_19 using relative slot index 0
        }

        block {
          sameInstanceCountAsParent: false
          [closure scope with 2 slots: embedded-closure:increment3, parent-reference]

          bindings {
            function 'increment3' # binding_20 @ local[0]
          }

          prologue {
            ScopePush(2)
            func 'increment3' -> local[0] [embedded closure]
          }

          epilogue { ScopePop; Pop(1) }

          references {
            i @ binding_19 using relative slot index 2
            x @ binding_18 using relative slot index 4
          }

          embedded closure function increment3 as 'increment3' {
            [no closure scope]; [0 var declarations]

            bindings { this '#this' # binding_21 @ arg[0] }

            No references

            prologue {  }

            block {
              sameInstanceCountAsParent: true
              [no closure scope]

              bindings {  }

              prologue {  }

              epilogue {  }

              references {
                i @ binding_19 using relative slot index 2
                x @ binding_18 using relative slot index 4
              }
            }
          }
        }
      }
    }
  }

  function case4 as 'case4' {
    [closure scope with 1 slots: x]; [0 var declarations]

    bindings { this '#this' # binding_22 @ arg[0] }

    No references

    prologue { ScopeNew(1) }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings { let 'x' # binding_23 @ scoped[!0] }

      prologue {  }

      epilogue {  }

      No references

      block {
        sameInstanceCountAsParent: false; [no closure scope]

        bindings {
          writable let 'i' # binding_24 @ local[0]
        }

        prologue { new let -> local[0] }

        epilogue { Pop(1) }

        references { i @ binding_24; i @ binding_24 }

        block {
          sameInstanceCountAsParent: false
          [closure scope with 3 slots: embedded-closure:increment4, i2, parent-reference]

          bindings {
            readonly const 'i2' # binding_25 @ scoped[!1];
            function 'increment4' # binding_26 @ local[1]
          }

          prologue {
            ScopePush(3)
            func 'increment4' -> local[1] [embedded closure]
          }

          epilogue { ScopePop; Pop(1) }

          references { i @ binding_24 }

          embedded closure function increment4 as 'increment4' {
            [no closure scope]; [0 var declarations]

            bindings { this '#this' # binding_27 @ arg[0] }

            No references

            prologue {  }

            block {
              sameInstanceCountAsParent: true
              [no closure scope]

              bindings {  }

              prologue {  }

              epilogue {  }

              references {
                i2 @ binding_25 using relative slot index 1
                x @ binding_23 using relative slot index 3
              }
            }
          }
        }
      }
    }
  }

  function case5 as 'case5' {
    [closure scope with 2 slots: embedded-closure:bar5, x]
    [0 var declarations]

    bindings { this '#this' # binding_28 @ arg[0] }

    No references

    prologue { ScopeNew(2) }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        let 'x' # binding_29 @ scoped[!1];
        function 'bar5' # binding_30 @ local[0];
        function 'baz5' # binding_31 @ local[1]
      }

      prologue {
        func 'bar5' -> local[0] [embedded closure]
        func 'baz5' -> local[1] [non-embedded closure]
      }

      epilogue { Pop(2) }

      No references

      embedded closure function bar5 as 'bar5' {
        [closure scope with 3 slots: embedded-closure:anonymous, y, parent-reference]
        [0 var declarations]

        bindings { this '#this' # binding_32 @ arg[0] }

        No references

        prologue { ScopePush(3) }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {
            let 'y' # binding_33 @ scoped[!1];
            readonly const 'increment5' # binding_34 @ local[0]
          }

          prologue { new let -> local[0] }

          epilogue { Pop(1) }

          No references

          embedded closure function '<anonymous>' as 'anonymous' {
            [no closure scope]; [0 var declarations]

            bindings {  }

            references {
              x @ binding_29 using relative slot index 4
              y @ binding_33 using relative slot index 1
            }

            prologue {  }
          }
        }
      }

      closure function baz5 as 'baz5' {
        [closure scope with 3 slots: embedded-closure:anonymous, z, parent-reference]
        [0 var declarations]

        bindings { this '#this' # binding_35 @ arg[0] }

        No references

        prologue { ScopePush(3) }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {
            let 'z' # binding_36 @ scoped[!1];
            readonly const 'decrement5' # binding_37 @ local[0]
          }

          prologue { new let -> local[0] }

          epilogue { Pop(1) }

          No references

          embedded closure function '<anonymous>' as 'anonymous1' {
            [no closure scope]; [0 var declarations]

            bindings {  }

            references {
              x @ binding_29 using relative slot index 6
              z @ binding_36 using relative slot index 1
            }

            prologue {  }
          }
        }
      }
    }
  }
}