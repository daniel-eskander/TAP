[this module slot] 'thisModule'; [global slot] 'thisModule'

module with entry 'moduleEntry' {
  [no closure scope]; [0 var declarations]

  bindings {
    function 'foo' # binding_1 @ local[0];
    function 'bar' # binding_2 @ local[1]
  }

  No references

  prologue {
    func 'foo' -> local[0]; func 'bar' -> local[1]
  }

  function foo as 'foo' {
    [no closure scope]; [0 var declarations]

    bindings {
      this '#this' # binding_3 @ arg[0];
      param 'a' # binding_4 @ arg[1]
    }

    No references

    prologue {  }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings { let 'x' # binding_5 @ local[0] }

      prologue { new let -> local[0] }

      epilogue { Pop(1) }

      No references

      block {
        sameInstanceCountAsParent: true; [no closure scope]

        bindings { let 'y' # binding_6 @ local[3] }

        prologue { StartTry; new let -> local[3] }

        epilogue { !EndTry }

        No references
      }

      block {
        sameInstanceCountAsParent: true; [no closure scope]

        bindings {
          catch-param 'e' # binding_7 @ local[1];
          let 'z' # binding_8 @ local[2]
        }

        prologue {
          Stack has exception; new let -> local[2]
        }

        epilogue { Pop(2) }

        No references
      }
    }
  }

  function bar as 'bar' {
    [closure scope with 2 slots: embedded-closure:anonymous, e]
    [0 var declarations]

    bindings {
      this '#this' # binding_9 @ arg[0];
      param 'a' # binding_10 @ arg[1]
    }

    No references

    prologue { ScopeNew(2) }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings { let 'x' # binding_11 @ local[0] }

      prologue { new let -> local[0] }

      epilogue { Pop(1) }

      No references

      block {
        sameInstanceCountAsParent: true; [no closure scope]

        bindings { let 'y' # binding_12 @ local[3] }

        prologue { StartTry; new let -> local[3] }

        epilogue { !EndTry }

        No references
      }

      block {
        sameInstanceCountAsParent: true; [no closure scope]

        bindings {
          catch-param 'e' # binding_13 @ scoped[!1];
          let 'z' # binding_14 @ local[1]
        }

        prologue {
          Stack has exception
          Pop exception -> scoped[+1]
          new let -> local[1]
        }

        epilogue { Pop(1) }

        No references

        embedded closure function '<anonymous>' as 'anonymous' {
          [no closure scope]; [0 var declarations]

          bindings {  }

          references {
            e @ binding_13 using relative slot index 1
          }

          prologue {  }
        }
      }
    }
  }
}