[this module slot] 'thisModule'; [global slot] 'thisModule'

module with entry 'moduleEntry' {
  [no closure scope]; [0 var declarations]

  bindings { function 'foo' # binding_1 @ local[0] }

  No references

  prologue { func 'foo' -> local[0] }

  function foo as 'foo' {
    [closure scope with 4 slots: embedded-closure:bar, x, a, b]
    [0 var declarations]

    bindings {
      this '#this' # binding_2 @ arg[0];
      param 'x' # binding_3 @ scoped[!1]
    }

    No references

    prologue { ScopeNew(4); arg[1] -> scoped[+1] }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        let 'a' # binding_4 @ scoped[!2];
        let 'b' # binding_5 @ scoped[!3];
        function 'bar' # binding_6 @ local[0]
      }

      prologue { func 'bar' -> local[0] [embedded closure] }

      epilogue { Pop(1) }

      No references

      embedded closure function bar as 'bar' {
        [closure scope with 5 slots: embedded-closure:baz, y, c, d, parent-reference]
        [0 var declarations]

        bindings {
          this '#this' # binding_7 @ arg[0];
          param 'y' # binding_8 @ scoped[!1]
        }

        No references

        prologue { ScopePush(5); arg[1] -> scoped[+1] }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {
            let 'c' # binding_9 @ scoped[!2];
            let 'd' # binding_10 @ scoped[!3];
            function 'baz' # binding_11 @ local[0]
          }

          prologue {
            func 'baz' -> local[0] [embedded closure]
          }

          epilogue { Pop(1) }

          No references

          embedded closure function baz as 'baz' {
            [closure scope with 5 slots: embedded-closure:qux, z, e, f, parent-reference]
            [0 var declarations]

            bindings {
              this '#this' # binding_12 @ arg[0];
              param 'z' # binding_13 @ scoped[!1]
            }

            No references

            prologue { ScopePush(5); arg[1] -> scoped[+1] }

            block {
              sameInstanceCountAsParent: true
              [no closure scope]

              bindings {
                let 'e' # binding_14 @ scoped[!2];
                let 'f' # binding_15 @ scoped[!3];
                function 'qux' # binding_16 @ local[0]
              }

              prologue {
                func 'qux' -> local[0] [embedded closure]
              }

              epilogue { Pop(1) }

              No references

              embedded closure function qux as 'qux' {
                [no closure scope]; [0 var declarations]

                bindings {
                  this '#this' # binding_17 @ arg[0]
                }

                No references

                prologue {  }

                block {
                  sameInstanceCountAsParent: true
                  [no closure scope]

                  bindings {  }

                  prologue {  }

                  epilogue {  }

                  references {
                    z @ binding_13 using relative slot index 1
                    e @ binding_14 using relative slot index 2
                    f @ binding_15 using relative slot index 3
                    y @ binding_8 using relative slot index 6
                    c @ binding_9 using relative slot index 7
                    d @ binding_10 using relative slot index 8
                    x @ binding_3 using relative slot index 11
                    a @ binding_4 using relative slot index 12
                    b @ binding_5 using relative slot index 13
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}