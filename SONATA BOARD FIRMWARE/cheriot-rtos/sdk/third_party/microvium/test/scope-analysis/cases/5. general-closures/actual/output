[this module slot] 'thisModule'; [global slot] 'thisModule'

module with entry 'moduleEntry' {
  [no closure scope]; [0 var declarations]

  bindings {
    readonly const 'makeIncrementor' # binding_1 @ local[0];
    readonly const 'incrementor' # binding_2 @ local[1];
    readonly const 'x' # binding_3 @ local[2];
    readonly const 'y' # binding_4 @ local[3]
  }

  references {
    makeIncrementor @ binding_1
    incrementor @ binding_2
    incrementor @ binding_2
  }

  prologue {
    new let -> local[0]
    new let -> local[1]
    new let -> local[2]
    new let -> local[3]
  }

  function '<anonymous>' as 'anonymous' {
    [closure scope with 4 slots: embedded-closure:anonymous, c, x, y]
    [0 var declarations]

    bindings {
      param 'a' # binding_5 @ arg[1];
      writable param 'b' # binding_6 @ local[0];
      writable param 'c' # binding_7 @ scoped[!1]
    }

    No references

    prologue {
      ScopeNew(4); arg[2] -> local[0]; arg[3] -> scoped[+1]
    }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        writable let 'w' # binding_8 @ local[1];
        writable let 'x' # binding_9 @ scoped[!2];
        writable let 'y' # binding_10 @ scoped[!3];
        let 'z' # binding_11 @ local[2]
      }

      prologue { new let -> local[1]; new let -> local[2] }

      epilogue { Pop(2) }

      references { w @ binding_8; b @ binding_6 }

      embedded closure function '<anonymous>' as 'anonymous1' {
        [no closure scope]; [0 var declarations]

        bindings {  }

        references {
          x @ binding_9 using relative slot index 2
          y @ binding_10 using relative slot index 3
          c @ binding_7 using relative slot index 1
        }

        prologue {  }
      }
    }
  }
}